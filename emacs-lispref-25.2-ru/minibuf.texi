@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1995, 1998-1999, 2001-2017 Free Software
@c Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Minibuffers
@chapter Мини-буферы
@c @chapter Minibuffers
@cindex arguments, reading
@cindex complex arguments
@cindex minibuffer

  @dfn{мини-буфер} (@dfn{minibuffer}) является специальным буфером
который команды Emacs используют для считывания параметров, более
сложных чем числовой префикс аргумент. К таким аргументам относятся
имена файлов, имена буферов, имена команд (как в @kbd{M-x}). Мини-буфер
отображается в нижней строке фрейма, в том же месте что и эхо область
(@pxref{The Echo Area}), но только пока используется для чтения аргумента.

@c   A @dfn{minibuffer} is a special buffer that Emacs commands use to
@c read arguments more complicated than the single numeric prefix
@c argument.  These arguments include file names, buffer names, and
@c command names (as in @kbd{M-x}).  The minibuffer is displayed on the
@c bottom line of the frame, in the same place as the echo area
@c (@pxref{The Echo Area}), but only while it is in use for reading an
@c argument.

@menu
* Intro to Minibuffers::      Базовая информация о мини-буферах.
* Text from Minibuffer::      Как считать простую текстовую строку.
* Object from Minibuffer::    Как считать Lisp объект или выражение.
* Minibuffer History::        Сохранение ранее введенных в мини-буфер значений
                               для повторного использования пользователем.
* Initial Input::             Задание начального содержимого мини-буфера.
* Completion::                Как вызвать специализированное авто-дополнение.
* Yes-or-No Queries::         Задание вопроса с простым ответом.
* Multiple Queries::          Задание последовательности схожих вопросов.
* Reading a Password::        Считывание пароля из терминала.
* Minibuffer Commands::       Команды (клавиатуры), используемые в мини-буфере.
* Minibuffer Windows::        Работа с специальными мини-буфер окнами.
* Minibuffer Contents::       Как команды мини-буфера получают доступ к тексту мини-буфера.
* Recursive Mini::            Разрешен ли рекурсивный вход в мини-буфер.
* Minibuffer Misc::           Перехватчики и переменные настройки мини-буфера.
@end menu

@c @menu
@c * Intro to Minibuffers::      Basic information about minibuffers.
@c * Text from Minibuffer::      How to read a straight text string.
@c * Object from Minibuffer::    How to read a Lisp object or expression.
@c * Minibuffer History::        Recording previous minibuffer inputs
@c                                 so the user can reuse them.
@c * Initial Input::             Specifying initial contents for the minibuffer.
@c * Completion::                How to invoke and customize completion.
@c * Yes-or-No Queries::         Asking a question with a simple answer.
@c * Multiple Queries::          Asking a series of similar questions.
@c * Reading a Password::        Reading a password from the terminal.
@c * Minibuffer Commands::       Commands used as key bindings in minibuffers.
@c * Minibuffer Windows::        Operating on the special minibuffer windows.
@c * Minibuffer Contents::       How such commands access the minibuffer text.
@c * Recursive Mini::            Whether recursive entry to minibuffer is allowed.
@c * Minibuffer Misc::           Various customization hooks and variables.
@c @end menu

@node Intro to Minibuffers
@section Мини-буферы введение
@c @section Introduction to Minibuffers

  В основном мини-буфер является обычным Emacs буфером. Большинство
операций @emph{внутри} буфера, такие как редактирование, работаю обычно
в мини-буфере. Но, многие операции по управлению буферами не применяются
к мини-буферу. Имя мини-буфера всегда имеет форму @w{@samp{
*Minibuf-@var{number}*}}, и не может быть изменено. Мини-буфер отображается
только в специальных окнах используемых только для мини-буферов,
всегда отображающихся в низу фрейма. (Иногда фреймы не имеют
окна мини-буфера, и иногда специальный вид фрейма содержит только
окно мини-буфера; см. @ref{Minibuffers and Frames}.)

@c   In most ways, a minibuffer is a normal Emacs buffer.  Most operations
@c @emph{within} a buffer, such as editing commands, work normally in a
@c minibuffer.  However, many operations for managing buffers do not apply
@c to minibuffers.  The name of a minibuffer always has the form @w{@samp{
@c *Minibuf-@var{number}*}}, and it cannot be changed.  Minibuffers are
@c displayed only in special windows used only for minibuffers; these
@c windows always appear at the bottom of a frame.  (Sometimes frames have
@c no minibuffer window, and sometimes a special kind of frame contains
@c nothing but a minibuffer window; see @ref{Minibuffers and Frames}.)

  Текст в мини-буфере всегда начинается с @dfn{строки запроса} (@dfn{prompt string}).
Это текст заданный программой использующей мини-буфер и указывающий на то
какого рода информация от него требуется. Текст строки запроса
только для чтения, поэтому его не получится случайно удалить или
изменить. Текст строки ввода так же помечен как поле (@pxref{Fields}),
поэтому функции перемещения курсора, такие как @code{beginning-of-line},
@code{forward-word}, @code{forward-sentence}, и @code{forward-paragraph},
будут останавливаться на границе строки запроса и текста.

@c   The text in the minibuffer always starts with the @dfn{prompt string},
@c the text that was specified by the program that is using the minibuffer
@c to tell the user what sort of input to type.  This text is marked
@c read-only so you won't accidentally delete or change it.  It is also
@c marked as a field (@pxref{Fields}), so that certain motion functions,
@c including @code{beginning-of-line}, @code{forward-word},
@c @code{forward-sentence}, and @code{forward-paragraph}, stop at the
@c boundary between the prompt and the actual text.

@c See http://debbugs.gnu.org/11276
  Окно мини-буфера как правило состоит из одной строки и автоматически
расширяется в случае необходимости. Пока окно мини-буфера активно,
можно временно изменить его размер с помощью команд изменения размера окна,
но при выходе из мини-буфера окно вернется к своему обычному размеру.
Когда мини-буфер не активен можно изменить его размер используя команды
изменения размера окна из другого окна фрейма или переместив строку
режима с помощью мыши. (В следствие особенностей текущей
реализации, чтобы это работало @code{resize-mini-windows} должно
быть @code{nil}.) Если фрейм содержит только мини-буфер, чтобы изменить
размеры мини-буфера нужно изменить размер фрейма.

@c   The minibuffer's window is normally a single line; it grows
@c automatically if the contents require more space.  Whilst it is
@c active, you can explicitly resize it temporarily with the window
@c sizing commands; it reverts to its normal size when the minibuffer is
@c exited.  When the minibuffer is not active, you can resize it
@c permanently by using the window sizing commands in the frame's other
@c window, or dragging the mode line with the mouse.  (Due to details of
@c the current implementation, for this to work @code{resize-mini-windows}
@c must be @code{nil}.)  If the frame contains just a minibuffer, you can
@c change the minibuffer's size by changing the frame's size.

  При чтении ввода в мини-буфере изменяются значения переменных
таких как @code{this-command} и @code{last-command} (@pxref{Command Loop Info}).
Если нужно избежать изменения переменных, нужно сделать для них привязку
в содержащем использование мини-буфера.

@c   Use of the minibuffer reads input events, and that alters the values
@c of variables such as @code{this-command} and @code{last-command}
@c (@pxref{Command Loop Info}).  Your program should bind them around the
@c code that uses the minibuffer, if you do not want that to change them.

  При некоторых обстоятельствах, команда может использовать
мини-буфер даже если мини-буфер активен, такой мини-буфер
называется @dfn{рекурсивным} (@dfn{recursive minibuffer}).
Первый мини-буфер называется @w{@samp{ *Minibuf-1*}}. Имена рекурсивных
буферов строятся путем увеличения на 1 числа в конце имени.
(Имена начинаются с пробела, поэтому они не показываются в стандартном
списке буферов.) В случае рекурсивных мини-буферов самый новый (с большим номером)
является активным мини-буфером. Как правило его называют
текущий мини-буфер (В английском варианте @emph{the} minubufer, то есть
the указывает на конкретный мини-буфер который 1).
Можно разрешить или запретить использование рекурсивных мини-буферов
установкой переменной @code{enable-recursive-minibuffers},
или установкой свойства с таким именем для символов команд
(@xref{Recursive Mini}).

@c   Under some circumstances, a command can use a minibuffer even if
@c there is an active minibuffer; such a minibuffer is called a
@c @dfn{recursive minibuffer}.  The first minibuffer is named
@c @w{@samp{ *Minibuf-1*}}.  Recursive minibuffers are named by
@c incrementing the number at the end of the name.  (The names begin with
@c a space so that they won't show up in normal buffer lists.)  Of
@c several recursive minibuffers, the innermost (or most recently
@c entered) is the active minibuffer.  We usually call this @emph{the}
@c minibuffer.  You can permit or forbid recursive minibuffers by setting
@c the variable @code{enable-recursive-minibuffers}, or by putting
@c properties of that name on command symbols (@xref{Recursive Mini}.)

  Как и другие буферы, мини-буфер использует локальную привязку клавиш
(@pxref{Keymaps}) для задания специальных клавиатурных комбинаций. Функция
которая вызывает мини-буфер в дополнение задает локальные клавиатурные
сочетания. По настройке локальных клавиатурных сочетаний
отличных от автодополнения @xref{Text from Minibuffer}.
Настройку клавиатурных сочетания автодополнения @xref{Completion Commands}.

@c   Like other buffers, a minibuffer uses a local keymap
@c (@pxref{Keymaps}) to specify special key bindings.  The function that
@c invokes the minibuffer also sets up its local map according to the job
@c to be done.  @xref{Text from Minibuffer}, for the non-completion
@c minibuffer local maps.  @xref{Completion Commands}, for the minibuffer
@c local maps for completion.

@cindex inactive minibuffer
  Если мини-буфер не активен у него основной режим
@code{minibuffer-inactive-mode} с клавиатурными
сочетаниями задающимися @code{minibuffer-inactive-mode-map}.
Эти режимы имеют смысл только если мини-буфер находится
в отдельном фрейме. @xref{Minibuffers and Frames}.

@c   When a minibuffer is inactive, its major mode is
@c @code{minibuffer-inactive-mode}, with keymap
@c @code{minibuffer-inactive-mode-map}.  This is only really useful if
@c the minibuffer is in a separate frame.  @xref{Minibuffers and Frames}.

  Если Emacs работает в пакетном режиме, все запросы на считывание из
мини-буфера перенаправляются на стандартный поток ввода, который получает
Emacs при запуске. Таким образом поддерживается только
базовый ввод без специальных возможностей мини-буфера (истории, автодополнения и др.).

@c   When Emacs is running in batch mode, any request to read from the
@c minibuffer actually reads a line from the standard input descriptor that
@c was supplied when Emacs was started.  This supports only basic input:
@c none of the special minibuffer features (history, completion, etc.)@:
@c are available in batch mode.

@node Text from Minibuffer
@section Считывание Текстовых Строк при Помощи Мини-буфера.
@c @section Reading Text Strings with the Minibuffer
@cindex minibuffer input, reading text strings

  Базовый и наиболее часто используемый примитив
для работы с мини-буфером @code{read-from-minibuffer},
подходит для считывания как строк, так и Lisp объектов
в текстовом виде. Функция @code{read-regexp} используется
для считывания регулярных выражений (@pxref{Regular Expressions}),
которые являются специальным видом строк. Так же есть специальные
функции для считывания команд, переменных, имен файлов и т.д.@:
(@pxref{Completion}).

@c   The most basic primitive for minibuffer input is
@c @code{read-from-minibuffer}, which can be used to read either a string
@c or a Lisp object in textual form.  The function @code{read-regexp} is
@c used for reading regular expressions (@pxref{Regular Expressions}),
@c which are a special kind of string.  There are also specialized
@c functions for reading commands, variables, file names, etc.@:
@c (@pxref{Completion}).

  Обычно не нужно вызывать получение ввода из мини-буфера ``в середине''
Lisp функции. Как правило получение данных из мини-буфера является
частью считывания аргумента команды, заданных с помощью спецификации @code{interactive}.
@xref{Defining Commands}.

@c   In most cases, you should not call minibuffer input functions in the
@c middle of a Lisp function.  Instead, do all minibuffer input as part of
@c reading the arguments for a command, in the @code{interactive}
@c specification.  @xref{Defining Commands}.

@defun read-from-minibuffer prompt &optional initial keymap read history default inherit-input-method
Функция представляет наиболее общий способ получения ввода из
мини-буфера. По умолчанию, функция принимает произвольный текст,
и возвращает его в качестве строки; но если @var{read} не-@code{nil}, тогда
@code{read} используется для преобразования текста в Lisp объект
(@pxref{Input Functions}).

@c This function is the most general way to get input from the
@c minibuffer.  By default, it accepts arbitrary text and returns it as a
@c string; however, if @var{read} is non-@code{nil}, then it uses
@c @code{read} to convert the text into a Lisp object (@pxref{Input
@c Functions}).

Сначала функция активирует мини-буфер и отображает запрос @var{prompt}
(должен быть строкой). После чего пользователь может редактировать
текст в мини-буфере.

@c The first thing this function does is to activate a minibuffer and
@c display it with @var{prompt} (which must be a string) as the
@c prompt.  Then the user can edit text in the minibuffer.

Когда пользователь вводит команду для выхода из мини-буфера,
@code{read-from-minibuffer} создает возвращаемое значение из текста
в мини-буфере. Обычно возвращается текстовая строка.
Но если, @var{read} не-@code{nil}, @code{read-from-minibuffer}
считывает текст и возвращает полученный Lisp объект, не вычисляя его.
(Чтобы получить информацию по чтению(reading), @xref{Input Functions}).

@c When the user types a command to exit the minibuffer,
@c @code{read-from-minibuffer} constructs the return value from the text in
@c the minibuffer.  Normally it returns a string containing that text.
@c However, if @var{read} is non-@code{nil}, @code{read-from-minibuffer}
@c reads the text and returns the resulting Lisp object, unevaluated.
@c (@xref{Input Functions}, for information about reading.)

Аргумент @var{default} определяет начальные значения, доступные
через команды истории. Значение должно быть строкой, списком
строк, или @code{nil}. Строка или строки становятся
``будущей историей'', доступным с помощью команды @kbd{M-n}.

@c The argument @var{default} specifies default values to make available
@c through the history commands.  It should be a string, a list of
@c strings, or @code{nil}.  The string or strings become the minibuffer's
@c ``future history'', available to the user with @kbd{M-n}.

Если @var{read} не-@code{nil}, тогда @var{default} также
используется в качестве ввода для @code{read}, если пользователь
вводит пустую строку. Если @var{default} список строк, используется
первая строка. Если @var{default} @code{nil}, пустой ввод приводит
к ошибке @code{end-of-file}. Но обычно (когда @var{read} @code{nil}),
@code{read-from-minibuffer} не учитывает @var{default} и если пользователь
вводит пустую строку возвращается пустая строка, @code{""}. В этом
отношении данная функция отличается от других функций для получения
данных из мини-буфера данной главы.

@c If @var{read} is non-@code{nil}, then @var{default} is also used
@c as the input to @code{read}, if the user enters empty input.
@c If @var{default} is a list of strings, the first string is used as the input.
@c If @var{default} is @code{nil}, empty input results in an @code{end-of-file} error.
@c However, in the usual case (where @var{read} is @code{nil}),
@c @code{read-from-minibuffer} ignores @var{default} when the user enters
@c empty input and returns an empty string, @code{""}.  In this respect,
@c it differs from all the other minibuffer input functions in this chapter.

Если @var{keymap} не @code{nil}, тогда keymap задает локальную привязку клавиш
для мини-буфера. Если @var{keymap} пропущена или @code{nil},
будет использоваться @code{minibuffer-local-map}. Задание
привязки клавиш важный способ настройки мини-буфера для разных
приложений таких как авто-дополнение.

@c If @var{keymap} is non-@code{nil}, that keymap is the local keymap to
@c use in the minibuffer.  If @var{keymap} is omitted or @code{nil}, the
@c value of @code{minibuffer-local-map} is used as the keymap.  Specifying
@c a keymap is the most important way to customize the minibuffer for
@c various applications such as completion.

Аргумент @var{history} (история) определяет переменную со списком истории
в которую сохраняются вводы пользователя и с которой взаимодействуют
команды истории мини-буфера. Значением по умолчанию является
@code{minibuffer-history}. Дополнительно можно задать начальную позицию
истории. @xref{Minibufer History}.

@c The argument @var{history} specifies a history list variable to use
@c for saving the input and for history commands used in the minibuffer.
@c It defaults to @code{minibuffer-history}.  You can optionally specify
@c a starting position in the history list as well.  @xref{Minibuffer History}.

Если переменная @code{minibuffer-allow-text-properties}
не-@code{nil}, тогда возвращаемая строка будет содержать текстовые
свойства которые были в мини-буфере. Иначе все текстовые свойства
удаляются из текста при возвращении.

@c If the variable @code{minibuffer-allow-text-properties} is
@c non-@code{nil}, then the string that is returned includes whatever text
@c properties were present in the minibuffer.  Otherwise all the text
@c properties are stripped when the value is returned.

Если аргумент @var{inherit-input-method} не-@code{nil}, тогда
мини-буфер наследует текущий метод ввода (@pxref{Input Methods})
и настройку @code{enable-multibyte-characters} (@pxref{Text Representations})
из буфера который был активен до входа в мини-буфер.

@c If the argument @var{inherit-input-method} is non-@code{nil}, then the
@c minibuffer inherits the current input method (@pxref{Input Methods}) and
@c the setting of @code{enable-multibyte-characters} (@pxref{Text
@c Representations}) from whichever buffer was current before entering the
@c minibuffer.

Использование @var{initial} является устаревшим. Рекомендуется
использовать не-@code{nil} значение только в связке с заданием cons ячейки
для @var{history}. @xref{Initial Input}.

@c Use of @var{initial} is mostly deprecated; we recommend using
@c a non-@code{nil} value only in conjunction with specifying a cons cell
@c for @var{history}.  @xref{Initial Input}.
@end defun

@defun read-string prompt &optional initial history default inherit-input-method
Функция считывает строку из мини-буфера и возвращает ее. Аргументы
@var{propmpt}, @var{initial}, @var{history} и @var{inherit-input-method}
используются так же как в @code{read-from-minibuffer}.
Используется привязка клавиш @code{minibuffer-local-map}.

@c This function reads a string from the minibuffer and returns it.  The
@c arguments @var{prompt}, @var{initial}, @var{history} and
@c @var{inherit-input-method} are used as in @code{read-from-minibuffer}.
@c The keymap used is @code{minibuffer-local-map}.

Не обязательный аргумент @var{default} используется как
в @code{read-from-minibuffer}, за исключением того, что если
значение не-@code{nil}, используется оно, если пользователь указал
пустую строку. Как в @code{read-from-minibuffer} значение должно быть
строкой, списком строк или @code{nil}, который эквивалентен пустой строке.
Когда @var{default} строка, она является значением по умолчанию. Когда
список, первая строка значение по умолчанию. (Все строки доступны
пользователю в ``будущая история мини-буфера''(``future minibuffer history'').)

@c The optional argument @var{default} is used as in
@c @code{read-from-minibuffer}, except that, if non-@code{nil}, it also
@c specifies a default value to return if the user enters null input.  As
@c in @code{read-from-minibuffer} it should be a string, a list of
@c strings, or @code{nil}, which is equivalent to an empty string.  When
@c @var{default} is a string, that string is the default value.  When it
@c is a list of strings, the first string is the default value.  (All
@c these strings are available to the user in the ``future minibuffer
@c history''.)

Реализация функции вызывает @code{read-from-minibuffer} функцию:
@c This function works by calling the
@c @code{read-from-minibuffer} function:

@smallexample
@group
(read-string @var{prompt} @var{initial} @var{history} @var{default} @var{inherit})
@equiv{}
(let ((value
       (read-from-minibuffer @var{prompt} @var{initial} nil nil
                             @var{history} @var{default} @var{inherit})))
  (if (and (equal value "") @var{default})
      (if (consp @var{default}) (car @var{default}) @var{default})
    value))
@end group
@end smallexample
@end defun

@defun read-regexp prompt &optional defaults history
Функция считывает из мини-буфера регулярное выражение как строку из
возвращает его. Если строка запроса мини-буфера @var{prompt} не
заканчивается @samp{:} (за которым следует не обязательный пробел),
функция добавляет @samp{: } в конец, а перед ним значение по умолчанию,
если есть.

@c This function reads a regular expression as a string from the
@c minibuffer and returns it.  If the minibuffer prompt string
@c @var{prompt} does not end in @samp{:} (followed by optional
@c whitespace), the function adds @samp{: } to the end, preceded by the
@c default return value (see below), if that is non-empty.

Не обязательный аргумент @var{defaults} задает возвращаемое по умолчанию
значение если пользователь ничего не вводит. Значением может быть:
строка, @code{nil} эквивалентно пустой строке; списком строк
или символом.

@c The optional argument @var{defaults} controls the default value to
@c return if the user enters null input, and should be one of: a string;
@c @code{nil}, which is equivalent to an empty string; a list of strings;
@c or a symbol.

Если @var{defaults} символ, @code{read-regexp} проверяет значение
@code{read-regexp-defaults-function} (см. ниже), и если значение
не-@code{nil} используется оно. Допустимыми при этом являются
значения:

@c If @var{defaults} is a symbol, @code{read-regexp} consults the value
@c of the variable @code{read-regexp-defaults-function} (see below), and
@c if that is non-@code{nil} uses it in preference to @var{defaults}.
@c The value in this case should be either:

@itemize @minus
@item
@code{regexp-history-last}, что означает что нужно использовать
последний элемент соответствующего списка истории мини-буфера (см. ниже).

@c @code{regexp-history-last}, which means to use the first element of
@c the appropriate minibuffer history list (see below).

@item
Функция без аргументов, возвращающая значение (которое должно быть
@code{nil}, строкой или списком строк), которое становится значением
@var{defaults}.

@c A function of no arguments, whose return value (which should be
@c @code{nil}, a string, or a list of strings) becomes the value of
@c @var{defaults}.
@end itemize

@code{read-regexp} теперь гарантирует, что результат
обработки @var{defaults} является списком (т.е. если значение
@code{nil} или строка, он будет конвертирован в список из одного
элемента). К этому списку @code{read-regexp} добавляет несколько
полезных кандидатов. Это:

@c @code{read-regexp} now ensures that the result of processing
@c @var{defaults} is a list (i.e., if the value is @code{nil} or a
@c string, it converts it to a list of one element).  To this list,
@c @code{read-regexp} then appends a few potentially useful candidates for
@c input.  These are:

@itemize @minux
@item
Слово или символ под курсором.
@item
Последнее регулярное выражение используемое в последовательном поиске.
@item
Последняя строка используемая в последовательном поиске.
@item
Последняя строка или шаблон используемый в командах замены.
@end itemize

@c @itemize @minus
@c @item
@c The word or symbol at point.
@c @item
@c The last regexp used in an incremental search.
@c @item
@c The last string used in an incremental search.
@c @item
@c The last string or pattern used in query-replace commands.
@c @end itemize

Функция содержит список регулярных выражений который передается
@code{read-from-minibuffer} для получения ввода от пользователя.
Первый элемент списка является результатом по умолчанию в случае
пустого ввода. Все элементы списка доступны пользователю как
список ``будущей история мини-буфера'' (``future minibuffer history'')
(@pxref{Minibuffer History, future list,, emacs, The GNU Emacs Manual}).

@c The function now has a list of regular expressions that it passes to
@c @code{read-from-minibuffer} to obtain the user's input.  The first
@c element of the list is the default result in case of empty input.  All
@c elements of the list are available to the user as the ``future
@c minibuffer history'' list (@pxref{Minibuffer History, future list,,
@c emacs, The GNU Emacs Manual}).

Если задан не обязательный аргумент @var{history}, то должен быть
символом задающим список истории мини-буфера (@pxref{Minibuffer History}).
Если параметр не задан или @code{nil}, используется список @code{regexp-history}.

@c The optional argument @var{history}, if non-@code{nil}, is a symbol
@c specifying a minibuffer history list to use (@pxref{Minibuffer
@c History}).  If it is omitted or @code{nil}, the history list defaults
@c to @code{regexp-history}.
@end defun

@defopt read-regexp-defaults-function
Функция @code{read-regexp} может использовать значение этой переменной
для определения списка регулярных выражений по умолчанию. Если
значение не-@code{nil}, то оно должно быть:

@c The function @code{read-regexp} may use the value of this variable to
@c determine its list of default regular expressions.  If non-@code{nil},
@c the value of this variable should be either:

@itemize @minus
@item
Символ @code{regexp-history-last}.
@c The symbol @code{regexp-history-last}.

@item
Функцией без аргументов, которая возвращает @code{nil}, строку,
список строк.

@c A function of no arguments that returns either @code{nil}, a string,
@c or a list of strings.
@end itemize

@noindent
См. @code{read-regexp} выше, чтобы получить больше подробностей.
@c See @code{read-regexp} above for details of how these values are used.
@end defopt

@defvar minibuffer-allow-text-properties
Если переменная @code{nil}, тогда @code{read-from-minibuffer}
и @code{read-strign} игнорируют все текстовые свойства в тексте
мини-буфера. Но, @code{read-no-blanks-input} (см. ниже) и
@code{read-minibuffer} и связанные функции (@pxref{Object from Minibuffer,,
Reading Lisp Objects With the Minibuffer}), и все функции
выполняющие считывание данных из мини-буфера с авто дополнением,
игнорируют текстовые свойства в не зависимости от значения данной переменной.

@c If this variable is @code{nil}, then @code{read-from-minibuffer}
@c and @code{read-string} strip all text properties from the minibuffer
@c input before returning it.  However,
@c @code{read-no-blanks-input} (see below), as well as
@c @code{read-minibuffer} and related functions (@pxref{Object from
@c Minibuffer,, Reading Lisp Objects With the Minibuffer}), and all
@c functions that do minibuffer input with completion, discard text
@c properties unconditionally, regardless of the value of this variable.
@end defvar

@defvar minibuffer-local-map
@anchor{Definition of minibuffer-local-map}
является локальной раскладкой для чтения из мини-буфера. По
умолчанию она содержит следующие привязки:

@c This
@c @anchor{Definition of minibuffer-local-map}
@c @c avoid page break at anchor; work around Texinfo deficiency
@c is the default local keymap for reading from the minibuffer.  By
@c default, it makes the following bindings:

@table @asis
@item @kbd{C-j}
@code{exit-minibuffer}

@item @key{RET}
@code{exit-minibuffer}

@item @kbd{C-g}
@code{abort-recursive-edit}

@item @kbd{M-n}
@itemx @key{DOWN}
@code{next-history-element}

@item @kbd{M-p}
@itemx @key{UP}
@code{previous-history-element}

@item @kbd{M-s}
@code{next-matching-history-element}

@item @kbd{M-r}
@code{previous-matching-history-element}

@ignore
@c Does not seem worth/appropriate mentioning.
@item @kbd{C-@key{TAB}}
@code{file-cache-minibuffer-complete}
@end ignore
@end table
@end defvar

@c In version 18, initial is required
@c Emacs 19 feature
@defun read-no-blanks-input prompt &optional initial inherit-input-method
Функция считывает строку из мини-буфера, но при этом пробельные символы
прекращают ввод. Аргументы @var{prompt}, @var{initial}, и
@var{inherit-input-method} аналогичны @code{read-from-minibuffer}.

@c This function reads a string from the minibuffer, but does not allow
@c whitespace characters as part of the input: instead, those characters
@c terminate the input.  The arguments @var{prompt}, @var{initial}, and
@c @var{inherit-input-method} are used as in @code{read-from-minibuffer}.

Данная функция является упрощенным интерфейсом к @code{read-from-minibuffer},
передает значение @code{minibuffer-local-ns-map} в @code{read-from-minibuffer}.
Так как раскладка @code{minibuffer-local-ns-map} не переназначает
@kbd{C-q}, @emph{возможно} ввести строку в пробел квотировав его.

@c This is a simplified interface to the @code{read-from-minibuffer}
@c function, and passes the value of the @code{minibuffer-local-ns-map}
@c keymap as the @var{keymap} argument for that function.  Since the keymap
@c @code{minibuffer-local-ns-map} does not rebind @kbd{C-q}, it @emph{is}
@c possible to put a space into the string, by quoting it.

Функция удаляет текстовые свойства, не зависимо от значения
@code{minibuffer-allow-text-properties}.

@c This function discards text properties, regardless of the value of
@c @code{minibuffer-allow-text-properties}.

@smallexample
@group
(read-no-blanks-input @var{prompt} @var{initial})
@equiv{}
(let (minibuffer-allow-text-properties)
  (read-from-minibuffer @var{prompt} @var{initial} minibuffer-local-ns-map))
@end group
@end smallexample
@end defun

@c Slightly unfortunate name, suggesting it might be related to the
@c Nextstep port...
@defvar minibuffer-local-ns-map
Встроенная переменная задает раскладку для мини-буфера в функции
@code{read-no-blanks-input}. По умолчанию, она содержит привязки из
@code{minibuffer-local-map} и в дополнение к ним:

@c This built-in variable is the keymap used as the minibuffer local keymap
@c in the function @code{read-no-blanks-input}.  By default, it makes the
@c following bindings, in addition to those of @code{minibuffer-local-map}:

@table @asis
@item @key{SPC}
@cindex @key{SPC} in minibuffer
@code{exit-minibuffer}

@item @key{TAB}
@cindex @key{TAB} in minibuffer
@code{exit-minibuffer}

@item @kbd{?}
@cindex @kbd{?} in minibuffer
@code{self-insert-and-exit}
@end table
@end defvar

@node Object from Minibuffer
@section Считывание Lisp Объектов в Мини-буфере
@c @section Reading Lisp Objects with the Minibuffer
@cindex minibuffer input, reading lisp objects

  Данная секция содержит описание функций для считывания Lisp
объектов с помощью мини-буфера.
@c   This section describes functions for reading Lisp objects with the
@c minibuffer.

@defun read-minibuffer prompt &optional initial
Функция считывает Lisp объект используя мини-буфер, и возвращает его без
вычисления. Аргументы @var{prompt} и @var{initial} используются аналогично
@code{read-from-minibuffer}.

@c This function reads a Lisp object using the minibuffer, and returns it
@c without evaluating it.  The arguments @var{prompt} and @var{initial} are
@c used as in @code{read-from-minibuffer}.

Данная функция является упрощенным интерфейсом для
@code{read-from-minibuffer}.

@c This is a simplified interface to the
@c @code{read-from-minibuffer} function:

@smallexample
@group
(read-minibuffer @var{prompt} @var{initial})
@equiv{}
(let (minibuffer-allow-text-properties)
  (read-from-minibuffer @var{prompt} @var{initial} nil t))
@end group
@end smallexample

Ниже пример, в котором используется строка @code{"(testing)"} в качестве,
начального значения.

@c Here is an example in which we supply the string @code{"(testing)"} as
@c tial input:

@smallexample
@group
(read-minibuffer
 "Enter an expression: " (format "%s" '(testing)))

;; @r{Here is how the minibuffer is displayed:}
@end group

@group
---------- Buffer: Minibuffer ----------
Enter an expression: (testing)@point{}
---------- Buffer: Minibuffer ----------
@end group
@end smallexample

@noindent
Пользователь может ввести @key{RET} сразу после получения запроса, чтобы
использовать значение по умолчанию.

@c The user can type @key{RET} immediately to use the initial input as a
@c default, or can edit the input.
@end defun

@defun eval-minibuffer prompt &optional initial
Функция считывает Lisp выражение используя мини-буфер, вычисляет его,
после чего возвращает полученный результат. Аргументы @var{prompt} и
@var{initial} аналогичны @code{read-from-minibuffer}.

@c This function reads a Lisp expression using the minibuffer, evaluates
@c it, then returns the result.  The arguments @var{prompt} and
@c @var{initial} are used as in @code{read-from-minibuffer}.

Функция просто вычисляет результат полученный с помощью вызова
@code{read-minibuffer}:

@c This function simply evaluates the result of a call to
@c @code{read-minibuffer}:

@smallexample
@group
(eval-minibuffer @var{prompt} @var{initial})
@equiv{}
(eval (read-minibuffer @var{prompt} @var{initial}))
@end group
@end smallexample
@end defun

@defun edit-and-eval-command prompt form
Функция считывает Lisp выражение из мини-буфера, вычисляет его,
и возвращает результат. Отличие от @code{eval-minibuffer} заключается
в том, что в рассматриваемой функции параметр @var{form} обязательный,
и рассматривается как Lisp объект преобразуемый в печатное представление.
Если его напечатать с помощью @code{prin1}, будут выведены двойные кавычки (@samp{"})
если объект строка. @xref{Output Functions}.

@c This function reads a Lisp expression in the minibuffer, evaluates it,
@c then returns the result.  The difference between this command and
@c @code{eval-minibuffer} is that here the initial @var{form} is not
@c optional and it is treated as a Lisp object to be converted to printed
@c representation rather than as a string of text.  It is printed with
@c @code{prin1}, so if it is a string, double-quote characters (@samp{"})
@c appear in the initial text.  @xref{Output Functions}.

В следующем примере, у пользователя запрашивается выражение, с начальным значением
уже являющимся корректной формой:

@c In the following example, we offer the user an expression with initial
@c text that is already a valid form:

@smallexample
@group
(edit-and-eval-command "Please edit: " '(forward-word 1))

;; @r{After evaluation of the preceding expression,}
;;   @r{the following appears in the minibuffer:}
@end group

@group
---------- Buffer: Minibuffer ----------
Please edit: (forward-word 1)@point{}
---------- Buffer: Minibuffer ----------
@end group
@end smallexample

@noindent
Ввод @key{RET} приведет к выходу из мини-буфера и вычислению выражения,
в данном примере перемещение на 1 слово вперед.

@c Typing @key{RET} right away would exit the minibuffer and evaluate the
@c expression, thus moving point forward one word.
@end defun

@node Minibuffer History
@section История Мини-буфера
@c @section Minibuffer History
@cindex minibuffer history
@cindex history list

  @dfn{Список истории мини-буфера} (@dfn{minibuffer history list})
хранит список предыдущих вводов пользователей, данные из него можно
быстро ввести повторно. История представляет собой переменную,
значением которой является список строк (с предыдущими вводами),
сначала идут те что были введены последними.

@c   A @dfn{minibuffer history list} records previous minibuffer inputs
@c so the user can reuse them conveniently.  It is a variable whose value
@c is a list of strings (previous inputs), most recent first.

  Для разных видов ввода используются разные списки и истории, поэтому
списков много. Обязанностью Lisp программиста является задание
правильного списка истории для каждого использования мини-буфера.

@c   There are many separate minibuffer history lists, used for different
@c kinds of inputs.  It's the Lisp programmer's job to specify the right
@c history list for each use of the minibuffer.

  Список истории задается с помощью не обязательного параметра @var{history}
функции @code{read-from-minibuffer} или @code{completing-read}.
Ниже приводятся возможные значения:

@c   You specify a minibuffer history list with the optional @var{history}
@c argument to @code{read-from-minibuffer} or @code{completing-read}.
@c Here are the possible values for it:

@table @asis
@item @var{variable}
В качестве истории используется переменная @var{variable} (символ).
@c Use @var{variable} (a symbol) as the history list.

@item (@var{variable} . @var{startpos})
В качестве списка истории будет использоваться переменная @var{variable} (символ),
с начальной позицией @var{startpos} (не отрицательное целое).

@c Use @var{variable} (a symbol) as the history list, and assume that the
@c initial history position is @var{startpos} (a nonnegative integer).

Задание 0 в качестве @var{starpos} эквивалентно просто использованию
@var{variable}. @code{previous-history-element} будет отображать
самый новый элемент списка истории в мини-буфере. Если задать положительный
@var{startpos}, функции работы с историей мини-буфера будут работать
как если бы текущим был элемент истории @code{(elt @var{variable (1- @var{startpos})})}.

@c Specifying 0 for @var{startpos} is equivalent to just specifying the
@c symbol @var{variable}.  @code{previous-history-element} will display
@c the most recent element of the history list in the minibuffer.  If you
@c specify a positive @var{startpos}, the minibuffer history functions
@c behave as if @code{(elt @var{variable} (1- @var{startpos}))} were the
@c history element currently shown in the minibuffer.

По соглашению, нужно указывать этот элемент в качестве начального
содержимого мини-буфера, используя параметр @var{initial} для функции
ввода с мини-буфера (@pxref{Initial Input}).

@c For consistency, you should also specify that element of the history
@c as the initial minibuffer contents, using the @var{initial} argument
@c to the minibuffer input function (@pxref{Initial Input}).
@end table

  Если не задать @var{history} по умолчанию будет использован
список @code{minibuffer-history}. Для некоторых других стандартных
списков истории умолчания будут описаны ниже. Можно создать свою
собственную переменную со списком истории просто инициализировав
ее значением @code{nil} до первого использования.

@c   If you don't specify @var{history}, then the default history list
@c @code{minibuffer-history} is used.  For other standard history lists,
@c see below.  You can also create your own history list variable; just
@c initialize it to @code{nil} before the first use.

  @code{read-from-minibuffer} и @code{completing-read} автоматически добавляют
новые элементы в списки истории, и предоставляют команды для обращения
к элементам из списков пользователем. Чтобы использовать историю нужно
инициализировать соответствующую переменную и передать имя этой переменной
в функцию ввода (которая считывает из мини-буфера). Список истории
можно безопасно изменять, когда он не используется функцией ввода.

@c   Both @code{read-from-minibuffer} and @code{completing-read} add new
@c elements to the history list automatically, and provide commands to
@c allow the user to reuse items on the list.  The only thing your program
@c needs to do to use a history list is to initialize it and to pass its
@c name to the input functions when you wish.  But it is safe to modify the
@c list by hand when the minibuffer input functions are not using it.

  Функции Emacs добавляющие элементы в историю, могут удалять
старые элементы если история слишком длинная. Переменная @code{history-length}
задает максимальную длину для большинства списков истории.
Чтобы другую длину для какого списка нужно задать значение
свойства @code{history-length} соответствующей переменной истории.
Переменная @code{history-delete-duplicates} определяет будут
ли из истории удаляться дубликаты.

@c   Emacs functions that add a new element to a history list can also
@c delete old elements if the list gets too long.  The variable
@c @code{history-length} specifies the maximum length for most history
@c lists.  To specify a different maximum length for a particular history
@c list, put the length in the @code{history-length} property of the
@c history list symbol.  The variable @code{history-delete-duplicates}
@c specifies whether to delete duplicates in history.

@defun add-to-history history-var newelt &optional maxelt keep-all
Функция добавляет в список с историей @var{history-var}
новый элемент в @var{newelt}, если он не пустая строка.
Возвращается обновленный список. Длина списка ограничивается
@var{maxelt} (если не-@code{nil}) или @code{history-length}
(см. ниже). Возможные значения @var{maxelt} аналогичны
значениям @code{history-length}.

@c This function adds a new element @var{newelt}, if it isn't the empty
@c string, to the history list stored in the variable @var{history-var},
@c and returns the updated history list.  It limits the list length to
@c the value of @var{maxelt} (if non-@code{nil}) or @code{history-length}
@c (described below).  The possible values of @var{maxelt} have the same
@c meaning as the values of @code{history-length}.

Как правило, @code{add-to-history} удаляет дубликаты если
@code{history-delete-duplicates} не-@code{nil}.
Но, если @var{keep-all} не-@code{nil}, дубликаты не удаляются и
в список добавляются даже пустые строки.

@c Normally, @code{add-to-history} removes duplicate members from the
@c history list if @code{history-delete-duplicates} is non-@code{nil}.
@c However, if @var{keep-all} is non-@code{nil}, that says not to remove
@c duplicates, and to add @var{newelt} to the list even if it is empty.
@end defun

@defvar history-add-new-input
Если значение переменной @code{nil}, стандартные функции считывания
из мини-буфера не добавляют новые элементы в список истории.
Переменная позволяет программам на Lisp выполнять явное управление
историей используя @code{add-to-history}. Значение по умолчанию @code{t}.

@c If the value of this variable is @code{nil}, standard functions that
@c read from the minibuffer don't add new elements to the history list.
@c This lets Lisp programs explicitly manage input history by using
@c @code{add-to-history}.  The default value is @code{t}.
@end defvar

@defopt history-length
Значение переменной определяет максимальную длину списков
истории, для которых не задано специфичное максимальное значение
(задается свойством @code{history-list} переменной списка истории).
Если значение @code{t}, то максимальное значение не определено
и старые элементы вообще не будут удаляться.

@c The value of this variable specifies the maximum length for all
@c history lists that don't specify their own maximum lengths.  If the
@c value is @code{t}, that means there is no maximum (don't delete old
@c elements).  If a history list variable's symbol has a non-@code{nil}
@c @code{history-length} property, it overrides this variable for that
@c particular history list.
@end defopt

@defopt history-delete-duplicates
Если значение переменной @code{t}, то при добавлении элемента
в список истории дубликаты добавленные ранее будут удаляться.

@c If the value of this variable is @code{t}, that means when adding a
@c new history element, all previous identical elements are deleted.
@end defopt

  Ниже приводится список части стандартных переменных со списками истории:
  @c Here are some of the standard minibuffer history list variables:

@defvar minibuffer-history
Список истории по умолчанию.
@c The default history list for minibuffer history input.
@end defvar

@defvar query-replace-history
Список истории для аргументов @code{query-replace} (и аналогичных аргументов
других команд).
@c A history list for arguments to @code{query-replace} (and similar
@c arguments to other commands).
@end defvar

@defvar file-name-history
История со списком имен файлов.
@c A history list for file-name arguments.
@end defvar

@defvar buffer-name-history
История со списком имен буферов.
@c A history list for buffer-name arguments.
@end defvar

@defvar regexp-history
Список истории с регулярными выражениями.
@c A history list for regular expression arguments.
@end defvar

@defvar extended-command-history
Список истории с именами команд
@c A history list for arguments that are names of extended commands.
@end defvar

@defvar shell-command-history
Список истории shell команд.
@c A history list for arguments that are shell commands.
@end defvar

@defvar read-expression-history
Список истории с Lisp выражениями используемым для вычисления.
@c A history list for arguments that are Lisp expressions to evaluate.
@end defvar

@defvar face-name-history
Список истории со шрифтами.
@c A history list for arguments that are faces.
@end defvar

@c Less common: coding-system-history, input-method-history,
@c command-history, grep-history, grep-find-history,
@c read-envvar-name-history, setenv-history, yes-or-no-p-history.

@node Initial Input
@section Начальное Значение
@c @section Initial Input

Некоторые из функций считывания из мини-буфера имеют аргумент
@var{initial}. Аргумент задает начальное значение ввода.
Данная опция является почти устаревшей.

@c Several of the functions for minibuffer input have an argument called
@c @var{initial}.  This is a mostly-deprecated
@c feature for specifying that the minibuffer should start out with
@c certain text, instead of empty as usual.

Если @var{initial} строка, начальное значение в мини-буфере будет
содержать эту строку. Если пользователь просто нажмет @kbd{RET}
это значение будет считаться вводом пользователя.

@c If @var{initial} is a string, the minibuffer starts out containing the
@c text of the string, with point at the end, when the user starts to
@c edit the text.  If the user simply types @key{RET} to exit the
@c minibuffer, it will use the initial input string to determine the
@c value to return.

@strong{Не рекомендуется использовать не-@code{nil} значения
для @var{initial}}, потому что, такое значение будет достаточно
навязчивым. Лучше использовать значение по умолчанию
определяемое списком истории.

@c @strong{We discourage use of a non-@code{nil} value for
@c @var{initial}}, because initial input is an intrusive interface.
@c History lists and default values provide a much more convenient method
@c to offer useful default inputs to the user.

В случае если для аргумента истории задается cons ячейка, имеет смысл
воспользоваться @var{initial} аргументом. @xref{Minibuffer History}.

@c There is just one situation where you should specify a string for an
@c @var{initial} argument.  This is when you specify a cons cell for the
@c @var{history} argument.  @xref{Minibuffer History}.

@var{initial} может быть cons ячейкой в форме @code{(@var{string} . @var{position})}.
Что будет значить, что в мини-буфере будет начальное значение
@var{string} и курсор будет в позиции @var{position} (По умолчанию к конце строки).

@c @var{initial} can also be a cons cell of the form @code{(@var{string}
@c . @var{position})}.  This means to insert @var{string} in the
@c minibuffer but put point at @var{position} within the string's text.

Исторически так сложилось, что @var{position} реализовано
не совместимо в разных функциях. В @code{completing-read}
@var{position} 0 соответствует началу строки, а в @code{read-minibuffer}
и других функциях начало строки соответствует 1.

@c As a historical accident, @var{position} was implemented
@c inconsistently in different functions.  In @code{completing-read},
@c @var{position}'s value is interpreted as origin-zero; that is, a value
@c of 0 means the beginning of the string, 1 means after the first
@c character, etc.  In @code{read-minibuffer}, and the other
@c non-completion minibuffer input functions that support this argument,
@c 1 means the beginning of the string, 2 means after the first character,
@c etc.

Использование cons ячейки для задания @var{initial} значение считается
устаревшим.

@c Use of a cons cell as the value for @var{initial} arguments is deprecated.

@node Completion
@section Авто-дополнение
@c @section Completion
@cindex completion

  @dfn{Авто-дополнение} (@dfn{Completion}) выполняет завершение текста по части
или имени по аббревиатуре. Авто-дополнение работает за счет сравнения
ввода пользователя со списков корректных значений и определяет насколько
введенная часть уникальна в этом списке. Например, если ввести
@kbd{C-x -b} (@code{switch-to-buffer}), затем ввести первые несколько
букв буфера на который нужно переключиться после чего нажать @key{TAB}
(@code{minibuffer-complete}), Emacs выполнит расширение имени насколько
возможно.

@c   @dfn{Completion} is a feature that fills in the rest of a name
@c starting from an abbreviation for it.  Completion works by comparing the
@c user's input against a list of valid names and determining how much of
@c the name is determined uniquely by what the user has typed.  For
@c example, when you type @kbd{C-x b} (@code{switch-to-buffer}) and then
@c @c "This is the sort of English up with which I will not put."
@c type the first few letters of the name of the buffer to which you wish
@c to switch, and then type @key{TAB} (@code{minibuffer-complete}), Emacs
@c extends the name as far as it can.

  Стандартные команды Emacs могут выполнять дополнения имен символов, файлов,
буферов и процессов; функции описываемые в данном разделе позволяет
реализовать авто-дополнение для других видов имен.

@c   Standard Emacs commands offer completion for names of symbols, files,
@c buffers, and processes; with the functions in this section, you can
@c implement completion for other kinds of names.

  Функция @code{try-completion} базовая функция для авто-дополнения:
которая возвращает максимальное доступное дополнение для заданной строки,
по заданному набору строк для проверки совпадения.

@c   The @code{try-completion} function is the basic primitive for
@c completion: it returns the longest determined completion of a given
@c initial string, with a given set of strings to match against.

  Функция @code{completion-read} предоставляет высокоуровневый интерфейс
для выполнения авто-дополнения. Вызов @code{completion-read} задает
определение списка корректных имен. После чего функция активирует мини-буфер
с раскладкой содержащей команды для дополнения. Другие функции предоставляют
удобные и простые интерфейсы для считывания определенных видов имен
с поддержкой авто-дополнения.

@c   The function @code{completing-read} provides a higher-level interface
@c for completion.  A call to @code{completing-read} specifies how to
@c determine the list of valid names.  The function then activates the
@c minibuffer with a local keymap that binds a few keys to commands useful
@c for completion.  Other functions provide convenient simple interfaces
@c for reading certain kinds of names with completion.

@menu
* Basic Completion::       Низкоуровневые функции для дополнения строк.
* Minibuffer Completion::  Вызов мини-буфера с поддержкой автодополнения.
* Completion Commands::    Команды мини-буфера которые выполняют дополнение.
* High-Level Completion::  Случай для которых уже есть удобная реализация авто-дополнения
                             (считывание имен буферов, переменных, и т.д.).
* Reading File Names::     Использование авто-дополнения при считывании имен файлов
                              и команд оболочки (shell).
* Completion Variables::   Переменные управляющие работой авто-дополнения.
* Programmed Completion::  Написание собственной функции авто-дополнения.
* Completion in Buffers::  Авто-завершение текста в обычных буферах.
@end menu

@c @menu
@c * Basic Completion::       Low-level functions for completing strings.
@c * Minibuffer Completion::  Invoking the minibuffer with completion.
@c * Completion Commands::    Minibuffer commands that do completion.
@c * High-Level Completion::  Convenient special cases of completion
@c                              (reading buffer names, variable names, etc.).
@c * Reading File Names::     Using completion to read file names and
@c                              shell commands.
@c * Completion Variables::   Variables controlling completion behavior.
@c * Programmed Completion::  Writing your own completion function.
@c * Completion in Buffers::  Completing text in ordinary buffers.
@c  @end menu

@node Basic Completion
@subsection Базовые Функции Авто-дополнения

  Следующие функции сами не работают с мини-буфером. Тут они описываются
чтобы описание было рядом с высокоуровневыми функциями авто-дополнения.

@c   The following completion functions have nothing in themselves to do
@c with minibuffers.  We describe them here to keep them near the
@c higher-level completion features that do use the minibuffer.

@defun try-completion string collection &optional predicate
Функция возвращает наиболее длинную общую часть для строки
@var{string} совпадающую со строками @var{collection}.

@c This function returns the longest common substring of all possible
@c completions of @var{string} in @var{collection}.

@cindex completion table
@var{collection} называется @dfn{таблицей завершения} (@dfn{completion table}).
Значение должно быть строкой или cons ячейкой, или obarray, или hash таблицей,
или функцией дополнения.

@c @var{collection} is called the @dfn{completion table}.  Its value must
@c be a list of strings or cons cells, an obarray, a hash table, or a
@c completion function.

@code{try-completion} сравнивает @var{string} с каждым значением
таблицы завершения. Если совпадений нет, возвращается @code{nil}.
Если есть только одно совпадение, и совпадение полное, возвращается
@code{t}. Иначе, возвращается наиболее длинная начальная последовательность
общая для всех найденных совпадений.

@c @code{try-completion} compares @var{string} against each of the
@c permissible completions specified by the completion table.  If no
@c permissible completions match, it returns @code{nil}.  If there is
@c just one matching completion, and the match is exact, it returns
@c @code{t}.  Otherwise, it returns the longest initial sequence common
@c to all possible matching completions.

Если @var{collection} список, элементы проверки определяются
элементами списка, каждый элемент которого должен быть строкой или
cons ячейкой, у которой @sc{car} строка или символ (символы
преобразуются в строку используя @code{symbol-name}). Элементы
других типов игнорируются.

@c If @var{collection} is a list, the permissible completions are
@c specified by the elements of the list, each of which should be either
@c a string, or a cons cell whose @sc{car} is either a string or a symbol
@c (a symbol is converted to a string using @code{symbol-name}).  If the
@c list contains elements of any other type, those are ignored.

@cindex obarray in completion
Если @code{collection} obaryy (@pxref{Creating Symbols}), имена
всех символов в obarray являются проверяемыми значениями.

@c If @var{collection} is an obarray (@pxref{Creating Symbols}), the names
@c of all symbols in the obarray form the set of permissible completions.

Если @var{collection} hash таблица, тогда ключи которые являются
строками или символами являются проверяемыми значениями.

@c If @var{collection} is a hash table, then the keys that are strings or
@c symbols are the possible completions.  Other keys are ignored.

В качестве @var{collection} можно задать функцию. Эта функция
будет отвечать за выполнение дополнения; @code{try-completion}
вернет результат выполнения этой функции. Функция вызывается с тремя
аргументами: @var{string}, @var{predicate}, @code{nil} (третий аргумент используется,
чтобы одну и туже функцию можно было использовать в @code{all-completions} и
работала одинаково в обоих случаях). @xref{Programmed Completion}.

@c You can also use a function as @var{collection}.  Then the function is
@c solely responsible for performing completion; @code{try-completion}
@c returns whatever this function returns.  The function is called with
@c three arguments: @var{string}, @var{predicate} and @code{nil} (the
@c third argument is so that the same function can be used
@c in @code{all-completions} and do the appropriate thing in either
@c case).  @xref{Programmed Completion}.

Если @var{predicate} не-@code{nil}, он должен быть функций от одного
аргумента, но если @var{collection} хеш таблица то функция должна быть
от двух аргументов. Функция используется для проверки каждого
возможного значения и значение считается прошедшим проверки если
функция вернула не-@code{nil} иначе значение отбрасывается. Аргумент
передающийся в функцию это строка или cons ячейка (@sc{car} которой строка)
или символ (@emph{не} имя символа) из obarray. Если @var{collection}
хеш таблица, @var{predicate} вызывается с двумя аргументами ключом и
значением.

@c If the argument @var{predicate} is non-@code{nil}, then it must be a
@c function of one argument, unless @var{collection} is a hash table, in
@c which case it should be a function of two arguments.  It is used to
@c test each possible match, and the match is accepted only if
@c @var{predicate} returns non-@code{nil}.  The argument given to
@c @var{predicate} is either a string or a cons cell (the @sc{car} of
@c which is a string) from the alist, or a symbol (@emph{not} a symbol
@c name) from the obarray.  If @var{collection} is a hash table,
@c @var{predicate} is called with two arguments, the string key and the
@c associated value.

Кроме того дополнения должны соответствовать регулярным выражениям
из @code{completion-regexp-list}. (Если @var{collection} функция, то
она сама выполняет проверку @code{completion-regexp-list}).

@c In addition, to be acceptable, a completion must also match all the
@c regular expressions in @code{completion-regexp-list}.  (Unless
@c @var{collection} is a function, in which case that function has to
@c handle @code{completion-regexp-list} itself.)

В первом из следующих примеров для строки @samp{foo} ищется
соответствие в @sc{car} ячейках ассоциативного списка(alist).
Все элементы начинаются на @samp{fooba}, который является результатом.
Во втором примере есть только одно соответствие и оно полное, поэтому
результат @code{t}.

@c In the first of the following examples, the string @samp{foo} is
@c matched by three of the alist @sc{car}s.  All of the matches begin with
@c the characters @samp{fooba}, so that is the result.  In the second
@c example, there is only one possible match, and it is exact, so the
@c return value is @code{t}.

@smallexample
@group
(try-completion
 "foo"
 '(("foobar1" 1) ("barfoo" 2) ("foobaz" 3) ("foobar2" 4)))
     @result{} "fooba"
@end group

@group
(try-completion "foo" '(("barfoo" 2) ("foo" 3)))
     @result{} t
@end group
@end smallexample

В следующем примере, часть символов начинается с @samp{forw}, и они
все начинаются со слова @samp{forward}. В большинстве символов потом идет
@samp{-}, но не во всех, поэтому результат @samp{forward}.

@c In the following example, numerous symbols begin with the characters
@c @samp{forw}, and all of them begin with the word @samp{forward}.  In
@c most of the symbols, this is followed with a @samp{-}, but not in all,
@c so no more than @samp{forward} can be completed.

@smallexample
@group
(try-completion "forw" obarray)
     @result{} "forward"
@end group
@end smallexample

В следующем примере, только два из трех элементов соответствуют
предикату @code{test} (строка @samp{foobaz} слишком короткая). Оба
начинаются со строки @samp{foobaz}.

@c Finally, in the following example, only two of the three possible
@c matches pass the predicate @code{test} (the string @samp{foobaz} is
@c too short).  Both of those begin with the string @samp{foobar}.

@smallexample
@group
(defun test (s)
  (> (length (car s)) 6))
     @result{} test
@end group
@group
(try-completion
 "foo"
 '(("foobar1" 1) ("barfoo" 2) ("foobaz" 3) ("foobar2" 4))
 'test)
     @result{} "foobar"
@end group
@end smallexample
@end defun

@c Removed obsolete argument nospace.
@defun all-completions string collection &optional predicate
Функция возвращает список всех возможных дополнений
для @var{string}. Аргументы функции такие же как у
@code{try-completion}, @code{completion-regexp-list}
используется так же как в @code{try-completion}.

@c This function returns a list of all possible completions of
@c @var{string}.  The arguments to this function
@c @c (aside from @var{nospace})
@c are the same as those of @code{try-completion}, and it
@c uses @code{completion-regexp-list} in the same way that
@c @code{try-completion} does.

@ignore
The optional argument @var{nospace} is obsolete.  If it is
non-@code{nil}, completions that start with a space are ignored unless
@var{string} starts with a space.
@end ignore

Если @var{collection} функция, она вызывается с тремя аргументами:
@var{string}, @var{predicate} и @code{t}; после чего @code{all-completions}
возвращает результат вызова @var{collection}. @xref{Programmed Completion}.

@c If @var{collection} is a function, it is called with three arguments:
@c @var{string}, @var{predicate} and @code{t}; then @code{all-completions}
@c returns whatever the function returns.  @xref{Programmed Completion}.

Ниже пример:
@c Here is an example, using the function @code{test} shown in the
@c example for @code{try-completion}:

@smallexample
@group
(defun test (s)
  (> (length (car s)) 6))
     @result{} test
@end group

@group
(all-completions
 "foo"
 '(("foobar1" 1) ("barfoo" 2) ("foobaz" 3) ("foobar2" 4))
 'test)
     @result{} ("foobar1" "foobar2")
@end group
@end smallexample
@end defun

@defun test-completion string collection &optional predicate
@anchor{Definition of test-completion}
Функция возвращает не-@code{nil} если @var{string} является
корректным вариантом дополнения для заданных
@var{collection} и @var{predicate}. Аргументы те же,
что и у @var{try-completion}. Например, если @var{collection} список
строк, результат функции будет true если @var{string} находится
в списке и удовлетворяет @var{predicate}.

@c This function returns non-@code{nil} if @var{string} is a valid
@c completion alternative specified by @var{collection} and
@c @var{predicate}.  The arguments are the same as in
@c @code{try-completion}.  For instance, if @var{collection} is a list of
@c strings, this is true if @var{string} appears in the list and
@c @var{predicate} is satisfied.

@code{completion-regexp-list} используется так же
как @code{try-completion}.

@c This function uses @code{completion-regexp-list} in the same
@c way that @code{try-completion} does.

Если @var{predicate} не-@code{nil} и @var{collection} содержит
несколько строк которые эквиваленты если сравнивать их @code{compare-strings}
при @code{completion-ignore-case}, тогда @var{predicate} должен либо
для всех возвращать true, либо false. Иначе, возвращаемое значение
@code{test-completion} будет не предсказуемым.

@c If @var{predicate} is non-@code{nil} and if @var{collection} contains
@c several strings that are equal to each other, as determined by
@c @code{compare-strings} according to @code{completion-ignore-case},
@c then @var{predicate} should accept either all or none of them.
@c Otherwise, the return value of @code{test-completion} is essentially
@c unpredictable.

Если @var{collection} функция, она вызывается с тремя аргументами
@var{string}, @var{predicate}, @code{lambda}; и результат ее
вызова является результатом @code{test-completion}.

@c If @var{collection} is a function, it is called with three arguments,
@c the values @var{string}, @var{predicate} and @code{lambda}; whatever
@c it returns, @code{test-completion} returns in turn.
@end defun

@defun completion-boundaries string collection predicate suffix
Функция возвращает границы в которых @var{collection} будет проверяться,
полагая что @var{string} хранит текст до курсора, а @var{suffix} хранит
текст после курсора.

@c This function returns the boundaries of the field on which @var{collection}
@c will operate, assuming that @var{string} holds the text before point
@c and @var{suffix} holds the text after point.

Как правило completio работает со всей строкой, поэтому для
обычных коллекций возвращается @code{(0 . (lenght @var{suffix}))}.
В более сложных случаях таких как дополнения для файлов
будет выполняться для части пути. Например, дополнение для
@code{"/usr/sh"} будет включать @code{"/usr/share/"}, но
не будет включать @code{"/usr/share/doc"} даже если
@code{"/usr/share/doc"} существует. @code{all-completions}
для @code{"/usr/sh"} будут включать только @code{"share/"}, а
не @code{"/usr/share/"}. Поэтому если @var{string}
@code{"/usr/sh"} и @var{suffix} @code{"e/doc"},
@code{completion-boundaries} вернет @code{(5 . 1)}, что значит, что
@code{collection} вернет дополнения относящиеся к области после @code{"/usr/"}
и до @code{"/doc"}.

@c Normally completion operates on the whole string, so for all normal
@c collections, this will always return @code{(0 . (length
@c @var{suffix}))}.  But more complex completion such as completion on
@c files is done one field at a time.  For example, completion of
@c @code{"/usr/sh"} will include @code{"/usr/share/"} but not
@c @code{"/usr/share/doc"} even if @code{"/usr/share/doc"} exists.
@c Also @code{all-completions} on @code{"/usr/sh"} will not include
@c @code{"/usr/share/"} but only @code{"share/"}.  So if @var{string} is
@c @code{"/usr/sh"} and @var{suffix} is @code{"e/doc"},
@c @code{completion-boundaries} will return @code{(5 . 1)} which tells us
@c that the @var{collection} will only return completion information that
@c pertains to the area after @code{"/usr/"} and before @code{"/doc"}.
@end defun

Если хранить список дополнения в переменной, нужно помечать такую
переменную как рискованную задав свойство @code{risky-local-variable}
в не-@code{nil}. @xref{File Local Variables}.

@c If you store a completion alist in a variable, you should mark the
@c variable as risky by giving it a non-@code{nil}
@c @code{risky-local-variable} property.  @xref{File Local Variables}.

@defvar completion-ignore-case
Если значение этой переменной не-@code{nil}, регистр символов не учитывается
при построении дополнения. Для функции @code{read-file-name}
переменная переопределяется @code{read-file-name-completion-ignore-case}
(@pxref{Reading File Names}); для @code{read-buffer} переменной
@code{read-buffer-completion-ignore-case} (@pxref{High-Level Completion}).

@c If the value of this variable is non-@code{nil}, case is not
@c considered significant in completion.  Within @code{read-file-name},
@c this variable is overridden by
@c @code{read-file-name-completion-ignore-case} (@pxref{Reading File
@c Names}); within @code{read-buffer}, it is overridden by
@c @code{read-buffer-completion-ignore-case} (@pxref{High-Level
@c Completion}).
@end defvar

@defvar completion-regexp-list
Список с регулярными выражениями. Функции дополнения рассматривают
корректными только дополнения, которые удовлетворяют всем
регулярным выражениям из этого списка. Проверка выполняется
со значением @code{case-fold-search} (@pxref{Searching and Case})
равным @code{completion-ignore-case}.

@c This is a list of regular expressions.  The completion functions only
@c consider a completion acceptable if it matches all regular expressions
@c in this list, with @code{case-fold-search} (@pxref{Searching and Case})
@c bound to the value of @code{completion-ignore-case}.
@end defvar

@defmac lazy-completion-table var fun
Макрос предоставляет ленивую инициализацию переменной
@var{var} как коллекцию для дополнения, то есть значение
не будет вычисляться до того как оно понадобится. Макрос можно
использовать для создания значения помещаемого в @var{var}. Реальное
значение будет вычислено при выполнении первого авто-дополнения
с использованием @var{var}. Значение вычисляется при помощи вызова
@var{fun} без аргументов. Возвращаемое @var{fun} значением становится
значением @var{var}.

@c This macro provides a way to initialize the variable @var{var} as a
@c collection for completion in a lazy way, not computing its actual
@c contents until they are first needed.  You use this macro to produce a
@c value that you store in @var{var}.  The actual computation of the
@c proper value is done the first time you do completion using @var{var}.
@c It is done by calling @var{fun} with no arguments.  The
@c value @var{fun} returns becomes the permanent value of @var{var}.

Пример:
@c Here is an example:

@smallexample
(defvar foo (lazy-completion-table foo make-my-alist))
@end smallexample
@end defmac

@c FIXME?  completion-table-with-context?
@findex completion-table-case-fold
@findex completion-table-in-turn
@findex completion-table-merge
@findex completion-table-subvert
@findex completion-table-with-quoting
@findex completion-table-with-predicate
@findex completion-table-with-terminator
@cindex completion table, modifying
@cindex completion tables, combining
Есть несколько функций которые выполняют преобразование таблицы
дополнений. @code{completion-table-case-fold} возвращает
таблицу не чувствительную к регистру. @code{completion-table-in-turn}
и @code{completion-table-merge} объединяют несколько таблиц
дополнений в одну (разными способами). @code{completion-table-subvert}
изменяет таблицу для использования с другим начальным префиксом.
@code{completion-table-with-quoting} возвращает таблицу пригодную
для действий с текстом с кавычками. @code{completion-table-with-predicate}
выполняет фильтрацию таблицы используя предикат. @code{completion-table-with-terminator}
добавляет завершающую строку.

@c There are several functions that take an existing completion table and
@c return a modified version.  @code{completion-table-case-fold} returns
@c a case-insensitive table.  @code{completion-table-in-turn} and
@c @code{completion-table-merge} combine multiple input tables in
@c different ways.  @code{completion-table-subvert} alters a table to use
@c a different initial prefix.  @code{completion-table-with-quoting}
@c returns a table suitable for operating on quoted text.
@c @code{completion-table-with-predicate} filters a table with a
@c predicate function.  @code{completion-table-with-terminator} adds a
@c terminating string.


@node Minibuffer Completion
@subsection Дополнение и Мини-буфер
@c @subsection Completion and the Minibuffer
@cindex minibuffer completion
@cindex reading from minibuffer with completion

  Данная секция описывает базовый интерфейс чтения из мини-буфера
с использованием авто-дополнения.

@c   This section describes the basic interface for reading from the
@c minibuffer with completion.

@defun completing-read prompt collection &optional predicate require-match initial history default inherit-input-method
Функция выполняет чтение строки в мини-буфере, предоставляя пользователю
возможности дополнения. Функция активирует мини-буфер с запросом
@var{prompt} (строка).

@c This function reads a string in the minibuffer, assisting the user by
@c providing completion.  It activates the minibuffer with prompt
@c @var{prompt}, which must be a string.

Дополнение выполняется с функцией @code{try-completion}
с использованием таблицы дополнения @var{collection} и предиката @var{predicate}
(@pxref{Basic Completion}). Дополнение строится при вызове
локальных команд заданных в раскладке мини-буфера. Некоторые из
них (команд) вызывают @code{try-completion}. Если
@var{predicate} не-@code{nil}, он должен быть совместим с
@var{collection} и @code{completion-ignore-case}.
@xref{Definition of test-completion}.

@c The actual completion is done by passing the completion table
@c @var{collection} and the completion predicate @var{predicate} to the
@c function @code{try-completion} (@pxref{Basic Completion}).  This
@c happens in certain commands bound in the local keymaps used for
@c completion.  Some of these commands also call @code{test-completion}.
@c Thus, if @var{predicate} is non-@code{nil}, it should be compatible
@c with @var{collection} and @code{completion-ignore-case}.
@c @xref{Definition of test-completion}.

Требования для случая функции @var{collection} @xref{Programmed Completion}.
@c @xref{Programmed Completion}, for detailed requirements when
@c @var{collection} is a function.

Значение необязательного аргумента @var{require-match} определяет как
пользователь может выйти из мини-буфера:

@c The value of the optional argument @var{require-match} determines how
@c the user may exit the minibuffer:

@itemize @bullet
@item
Если @code{nil} пользователь может выйти используя стандартные
команды для выхода из мини-буфера.

@c If @code{nil}, the usual minibuffer exit commands work regardless of
@c the input in the minibuffer.

@item
Если @code{t}, обычные команды выхода не будут срабатывать пока
ввод не будет соответствовать одному из элементов @var{collection}.

@c If @code{t}, the usual minibuffer exit commands won't exit unless the
@c input completes to an element of @var{collection}.

@item
Если @code{confirm}, пользователь может выйти с любым вводом, но
у него будет запрошено подтверждение, если элемент не в @var{collection}.

@c If @code{confirm}, the user can exit with any input, but is asked for
@c confirmation if the input is not an element of @var{collection}.

@item
Если @code{confirm-after-completion}, пользователь может выйти
с любым вводом, но если предыдущая команда была дополнением
(одна из команда в @code{minibuffer-confirm-exit-commands}) и результат
не в @var{collection} будет запрошено подтверждение. @xref{Completion Commands}.

@c If @code{confirm-after-completion}, the user can exit with any input,
@c but is asked for confirmation if the preceding command was a
@c completion command (i.e., one of the commands in
@c @code{minibuffer-confirm-exit-commands}) and the resulting input is
@c not an element of @var{collection}.  @xref{Completion Commands}.

@item
Другие значения приравниваются к @code{t}.
@c Any other value of @var{require-match} behaves like @code{t}, except
@c that the exit commands won't exit if it performs completion.
@end itemize

Пустой ввод всегда разрешен, в соответствии с @var{require-match}
@code{completion-read} возвратит первый элемент @var{default}, если
это список, @code{""} если @code{default} @code{nil}, или @var{default}.
Строка или строки @var{default} всегда доступны, так как используют
историю.

@c However, empty input is always permitted, regardless of the value of
@c @var{require-match}; in that case, @code{completing-read} returns the
@c first element of @var{default}, if it is a list; @code{""}, if
@c @var{default} is @code{nil}; or @var{default}.  The string or strings
@c in @var{default} are also available to the user through the history
@c commands.

Функция @code{completion-read} использует @code{minibuffer-local-complection-map}
в качестве локальной раскладки, если @var{require-match} @code{nil}.
В случае если @var{require-match} не-@code{nil} используется
@code{minibuffer-local-must-match-map}. @xref{Completion Commands}.

@c The function @code{completing-read} uses
@c @code{minibuffer-local-completion-map} as the keymap if
@c @var{require-match} is @code{nil}, and uses
@c @code{minibuffer-local-must-match-map} if @var{require-match} is
@c non-@code{nil}.  @xref{Completion Commands}.

Аргумент @var{history} определяет используемый список истории. По
умолчанию используется @code{minibuffer-history}. @xref{Minibuffer History}.

@c The argument @var{history} specifies which history list variable to use for
@c saving the input and for minibuffer history commands.  It defaults to
@c @code{minibuffer-history}.  @xref{Minibuffer History}.

Аргумент @var{initial} устаревший, не-@code{nil} стоит использовать
только в связке с cons ячейкой для истории. @xref{Initial Input}.
Для ввода по умолчанию стоит использовать @var{default}.

@c The argument @var{initial} is mostly deprecated; we recommend using a
@c non-@code{nil} value only in conjunction with specifying a cons cell
@c for @var{history}.  @xref{Initial Input}.  For default input, use
@c @var{default} instead.

Если аргумент @var{inherit-input-method} не-@code{nil}, мини-буфер
наследует текущий метод ввода (@pxref{Input Methods}) и настройку
@code{enable-minibyte-characters} из текущего буфера (до вызова мини-буфера).

@c If the argument @var{inherit-input-method} is non-@code{nil}, then the
@c minibuffer inherits the current input method (@pxref{Input
@c Methods}) and the setting of @code{enable-multibyte-characters}
@c (@pxref{Text Representations}) from whichever buffer was current before
@c entering the minibuffer.

Если @code{completion-ingore-case} не-@code{nil}, дополнение не будет
учитывать регистр. @xref{Basic Completion}. При этом @var{predicate}
тоже должен игнорировать регистр, иначе результат может быть неожиданным.

@c If the variable @code{completion-ignore-case} is
@c non-@code{nil}, completion ignores case when comparing the input
@c against the possible matches.  @xref{Basic Completion}.  In this mode
@c of operation, @var{predicate} must also ignore case, or you will get
@c surprising results.

Пример использования @code{completing-read}:
@c Here's an example of using @code{completing-read}:

@smallexample
@group
(completing-read
 "Complete a foo: "
 '(("foobar1" 1) ("barfoo" 2) ("foobaz" 3) ("foobar2" 4))
 nil t "fo")
@end group

@group
;; @r{После вычисления предыдущего выражения,}
;;   @r{в мини-буфере будет:}

---------- Buffer: Minibuffer ----------
Complete a foo: fo@point{}
---------- Buffer: Minibuffer ----------
@end group
@end smallexample

@noindent
Если теперь пользователь введет @kbd{@key{DEL}} @key{DEL} b @key{RET},
@code{completion-read} вернет @code{barfoo}.

@c If the user then types @kbd{@key{DEL} @key{DEL} b @key{RET}},
@c @code{completing-read} returns @code{barfoo}.

@code{completing-read} задает значения переменным, чтобы передать
информацию в функции непосредственно выполняющие дополнение.
Переменные описываются дальше.

@c The @code{completing-read} function binds variables to pass
@c information to the commands that actually do completion.
@c They are described in the following section.
@end defun

@defvar completing-read-function
Значением переменной должна быть функция, которая вызывается в
@code{completion-read} для непосредственного выполнения действия.
Функция должна принимать те же аргументы что и @code{completion-read}.
Может быть задана любая функция, что позволяет полностью
переопределить поведение @code{completion-read}.

@c The value of this variable must be a function, which is called by
@c @code{completing-read} to actually do its work.  It should accept the
@c same arguments as @code{completing-read}.  This can be bound to a
@c different function to completely override the normal behavior of
@c @code{completing-read}.
@end defvar

@node Completion Commands
@subsection Команды Мини-буфера Выполняющие Дополнение
@c @subsection Minibuffer Commands that Do Completion

  Данный раздел описывает раскладки, команды и пользовательские параметры
используемые в мини-буфере для построения дополнения.
@c   This section describes the keymaps, commands and user options used
@c in the minibuffer to do completion.

@defvar minibuffer-completion-table
Переменная определяет таблицу дополнения. Переменная глобальная, она содержит
данные которые @code{completion-read} передает в @code{try-completion}.
Переменная используется такими командами как @code{minibuffer-complete-word}.

@c The value of this variable is the completion table used for completion
@c in the minibuffer.  This is the global variable that contains what
@c @code{completing-read} passes to @code{try-completion}.  It is used by
@c minibuffer completion commands such as
@c @code{minibuffer-complete-word}.
@end defvar

@defvar minibuffer-completion-predicate
Переменная определяет предикат которые @code{completing-read} передает
в @code{try-completion} и используется другими командами для авто-дополнения.

@c This variable's value is the predicate that @code{completing-read}
@c passes to @code{try-completion}.  The variable is also used by the other
@c minibuffer completion functions.
@end defvar

@defvar minibuffer-completion-confirm
Переменная определяет будет ли Emacs запрашивать подтверждение
перед выходом из мини-буфера; @code{cimplting-read} задает данную
переменную, а функция @code{minibuffer-complete-and-exit} выполняет
проверку перед выходом. Если значение @code{nil}, подтверждение не
требуется. Если значение @code{confirm} пользователь может выйти
с вводом не соответствующим ни одному дополнению, но Emacs запросит
подтверждение. Если значение @code{confirm-after-completion}, пользователь
сможет выйти с вводом не соответствующим дополнениям, но Emacs
запросит подтверждение если пользователь будет выходить
сразу после команд дополнения перечисленных в @code{minibuffer-confirm-exit-commands}.

@c This variable determines whether Emacs asks for confirmation before
@c exiting the minibuffer; @code{completing-read} binds this variable,
@c and the function @code{minibuffer-complete-and-exit} checks the value
@c before exiting.  If the value is @code{nil}, confirmation is not
@c required.  If the value is @code{confirm}, the user may exit with an
@c input that is not a valid completion alternative, but Emacs asks for
@c confirmation.  If the value is @code{confirm-after-completion}, the
@c user may exit with an input that is not a valid completion
@c alternative, but Emacs asks for confirmation if the user submitted the
@c input right after any of the completion commands in
@c @code{minibuffer-confirm-exit-commands}.
@end defvar

@defvar minibuffer-confirm-exit-commands
Переменная хранит список с командами. Если
@var{require-match} аргумент @code{completion-read}
@code{confirm-after-completion}, тогда если
пользователь непосредственно перед выходом
выполнил одну из команд списка @code{minibuffer-confirm-exit-commands}
у него будет запрошено подтверждение.

@c This variable holds a list of commands that cause Emacs to ask for
@c confirmation before exiting the minibuffer, if the @var{require-match}
@c argument to @code{completing-read} is @code{confirm-after-completion}.
@c The confirmation is requested if the user attempts to exit the
@c minibuffer immediately after calling any command in this list.
@end defvar

@deffn Command minibuffer-complete-word
Функция выполняет дополнение содержимого мини-буфера максимум
на одно слово. Даже если содержимое мини-буфера имеет только
одно дополнение @code{minibuffer-complete-word} не добавляет
никаких символов выходящих за слово. @xref{Syntax Tables}.

@c This function completes the minibuffer contents by at most a single
@c word.  Even if the minibuffer contents have only one completion,
@c @code{minibuffer-complete-word} does not add any characters beyond the
@c first character that is not a word constituent.  @xref{Syntax Tables}.
@end deffn

@deffn Command minibuffer-complete
Функция строит максимально возможное дополнение.
@c This function completes the minibuffer contents as far as possible.
@end deffn

@deffn Command minibuffer-complete-and-exit
Функция строит дополнение для содержимого в мини-буфере,
и завершается если не нужно подтверждение (@code{minibuffer-completion-confirm} @code{nil}).
Если подтверждение @emph{нужно}, то она вызывается повторно. При этом
при повторном запуске она будет завершаться без подтверждения.

@c This function completes the minibuffer contents, and exits if
@c confirmation is not required, i.e., if
@c @code{minibuffer-completion-confirm} is @code{nil}.  If confirmation
@c @emph{is} required, it is given by repeating this command
@c immediately---the command is programmed to work without confirmation
@c when run twice in succession.
@end deffn

@deffn Command minibuffer-completion-help
Функция создает список дополнений вызывая @code{all-completions}.
@code{minibuffer-completion-table} используется как @var{collection},
а @code{minibuffer-completion-predicate} как @var{predicate}.
Список дополнений отображается в буфере @file{*Completions*}.

@c This function creates a list of the possible completions of the
@c current minibuffer contents.  It works by calling @code{all-completions}
@c using the value of the variable @code{minibuffer-completion-table} as
@c the @var{collection} argument, and the value of
@c @code{minibuffer-completion-predicate} as the @var{predicate} argument.
@c The list of completions is displayed as text in a buffer named
@c @file{*Completions*}.
@end deffn

@defun display-completion-list completions
Функция отображает @var{completions} в потоке @code{standard-output},
как правило являющимся буфером. (Подробнее: @xref{Read and Print}).
Аргумент @code{completions} обычно список дополнений,
возвращенный @code{all-completions}. Каждый элемент списка может быть
символом или строкой. Либо элементы могут быть списками из двух
строк, тогда они будут печататься соединяясь. Первая из
двух строк будет рассматриваться дополнением, а вторая как аннотация.

@c This function displays @var{completions} to the stream in
@c @code{standard-output}, usually a buffer.  (@xref{Read and Print}, for more
@c information about streams.)  The argument @var{completions} is normally
@c a list of completions just returned by @code{all-completions}, but it
@c does not have to be.  Each element may be a symbol or a string, either
@c of which is simply printed.  It can also be a list of two strings,
@c which is printed as if the strings were concatenated.  The first of
@c the two strings is the actual completion, the second string serves as
@c annotation.

Функция вызывается из @code{mibibuffer-completion-help}.
Часто она используется вместе с @code{with-output-to-temp-buffer}:

@c This function is called by @code{minibuffer-completion-help}.  A
@c common way to use it is together with
@c @code{with-output-to-temp-buffer}, like this:

@example
(with-output-to-temp-buffer "*Completions*"
  (display-completion-list
    (all-completions (buffer-string) my-alist)))
@end example
@end defun

@defopt completion-auto-help
Если переменная не-@code{nil}, команды авто-дополнения
автоматически отображают возможные дополнения, когда следующий символ
для автодополнения определяется не однозначно.

@c If this variable is non-@code{nil}, the completion commands
@c automatically display a list of possible completions whenever nothing
@c can be completed because the next character is not uniquely determined.
@end defopt

@defvar minibuffer-local-completion-map
@code{completing-read} использует значение переменной как локальная
раскладка когда требуется не точно одно совпадение. По умолчанию
раскладка содержит следующие привязки:

@c @code{completing-read} uses this value as the local keymap when an
@c exact match of one of the completions is not required.  By default, this
@c keymap makes the following bindings:

@table @asis
@item @kbd{?}
@code{minibuffer-completion-help}

@item @key{SPC}
@code{minibuffer-complete-word}

@item @key{TAB}
@code{minibuffer-complete}
@end table

@noindent
и использует @code{minibuffer-local-map} в качестве
родительской раскладки (@pxref{Definition of minibuffer-local-map}).

@c and uses @code{minibuffer-local-map} as its parent keymap
@c (@pxref{Definition of minibuffer-local-map}).
@end defvar

@defvar minibuffer-local-must-match-map
Локальная раскладка для @code{completing-read}. В этом случае, не одна
комбинация не привязана к @code{exit-minibuffer} (команда безусловного
выхода из мини-буфера). По умолчанию имеет следующие привязки:

@c @code{completing-read} uses this value as the local keymap when an
@c exact match of one of the completions is required.  Therefore, no keys
@c are bound to @code{exit-minibuffer}, the command that exits the
@c minibuffer unconditionally.  By default, this keymap makes the following
@c bindings:

@table @asis
@item @kbd{C-j}
@code{minibuffer-complete-and-exit}

@item @key{RET}
@code{minibuffer-complete-and-exit}
@end table

@noindent
и использует @code{minibuffer-local-completion-map} как родительскую раскладку.

@c and uses @code{minibuffer-local-completion-map} as its parent keymap.
@end defvar

@defvar minibuffer-local-filename-completion-map
Специальная раскладка в которой для @kbd{SPC} нет привязки,
потому что имена файлов могут содержать пробелы. Функция
@code{read-file-name} использует комбинацию этой раскладки
и @code{minibuffer-local-completion-map} или
@code{minibuffer-local-must-match-map}.

@c This is a sparse keymap that simply unbinds @key{SPC}; because
@c filenames can contain spaces.  The function @code{read-file-name}
@c combines this keymap with either @code{minibuffer-local-completion-map}
@c or @code{minibuffer-local-must-match-map}.
@end defvar


@node High-Level Completion
@subsection Высоко-уровневые Функции Авто-дополнения
@c @subsection High-Level Completion Functions

@c   This section describes the higher-level convenience functions for
@c reading certain sorts of names with completion.

  В большинстве случаев, данные функции не вызываются внутри
Lisp функции. Когда возможно, весь ввод мини-буфера, стоит
делать как чтение аргументов для команды, у которой задана
@code{interactive} спецификация. @xref{Defining Commands}.

@c   In most cases, you should not call these functions in the middle of a
@c Lisp function.  When possible, do all minibuffer input as part of
@c reading the arguments for a command, in the @code{interactive}
@c specification.  @xref{Defining Commands}.

@defun read-buffer prompt &optional default require-match predicate
Функция считывает имя буфера и возвращает его как строку.
Запрос делается с @var{prompt}. @var{default} значение по умолчанию,
используется если пользователь вышел с пустым значением. Если не-@code{nil}
должно @var{default} должно быть строкой, списком, списком строк
или буфером. Если список, используется первый элемент. Значение
показывается в запросе (@var{prompt}), но не вставляется в мини-буфер.

@c This function reads the name of a buffer and returns it as a string.
@c It prompts with @var{prompt}.  The argument @var{default} is the
@c default name to use, the value to return if the user exits with an
@c empty minibuffer.  If non-@code{nil}, it should be a string, a list of
@c strings, or a buffer.  If it is a list, the default value is the first
@c element of this list.  It is mentioned in the prompt, but is not
@c inserted in the minibuffer as initial input.

Аргумент @var{prompt} должен быть строкой заканчивающейся двоеточием
или пробелом. Если @var{default} не-@code{nil}, функция добавляет его в
@var{prompt} перед двоеточием, в соответствии с соглашением.
(@pxref{Programming Tips}).

@c The argument @var{prompt} should be a string ending with a colon and a
@c space.  If @var{default} is non-@code{nil}, the function inserts it in
@c @var{prompt} before the colon to follow the convention for reading from
@c the minibuffer with a default value (@pxref{Programming Tips}).

Не обязательный аргумент @var{require-match} имеет то же значение,
что в @code{completing-read}. @xref{Minibuffer Completion}.

@c The optional argument @var{require-match} has the same meaning as in
@c @code{completing-read}.  @xref{Minibuffer Completion}.

Не обязательный аргумент @var{predicat}, если не-@code{nil}, задает
функцию используемую для фильтрации буферов. Функция вызывается с
возможными кандидатами и возвращает @code{nil} если кандидат не
подходит.

@c The optional argument @var{predicate}, if non-@code{nil}, specifies a
@c function to filter the buffers that should be considered: the function
@c will be called with every potential candidate as its argument, and
@c should return @code{nil} to reject the candidate, non-@code{nil} to
@c accept it.

В примере ниже пользователь вводит @samp{minibuffer.t} и
нажимает @key{RET}. Аргумент @var{require-match} @code{t},
и единственное имя буфера начинающееся на @samp{minibuffer.t}
@samp{minibuffer.texi}, поэтому это значение будет
результатом.

@c In the following example, the user enters @samp{minibuffer.t}, and
@c then types @key{RET}.  The argument @var{require-match} is @code{t},
@c and the only buffer name starting with the given input is
@c @samp{minibuffer.texi}, so that name is the value.

@example
(read-buffer "Buffer name: " "foo" t)
@group
;; @r{After evaluation of the preceding expression,}
;;   @r{the following prompt appears,}
;;   @r{with an empty minibuffer:}
@end group

@group
---------- Buffer: Minibuffer ----------
Buffer name (default foo): @point{}
---------- Buffer: Minibuffer ----------
@end group

@group
;; @r{The user types @kbd{minibuffer.t @key{RET}}.}
     @result{} "minibuffer.texi"
@end group
@end example
@end defun

@defopt read-buffer-function
Если не-@code{nil}, то переменная хранит функцию для считывания имен
буферов. @code{read-buffer} будет использовать эту функцию,
вместо обычного считывания имени буфера. Функция вызывается
с теми же аргументами с которыми вызывается @code{read-buffer}.

@c This variable, if non-@code{nil}, specifies a function for reading
@c buffer names.  @code{read-buffer} calls this function instead of doing
@c its usual work, with the same arguments passed to @code{read-buffer}.
@end defopt

@defopt read-buffer-completion-ignore-case
Если переменная не-@code{nil}, @code{read-buffer} игнорирует
регистр выполняя авто-дополнение при считывании имени буфера.

@c If this variable is non-@code{nil}, @code{read-buffer} ignores case
@c when performing completion while reading the buffer name.
@end defopt

@defun read-command prompt &optional default
Функция считывает имя команды и возвращает ее Lisp символ. Аргумент
@var{prompt} используется в @code{read-from-minibuffer}. Командой считаются
объекты для которых @code{commandp} возвращает @code{t}, а именем
команды символы для которых @code{commandp} возвращает @code{t}. @xref{Interactive Call}.

@c This function reads the name of a command and returns it as a Lisp
@c symbol.  The argument @var{prompt} is used as in
@c @code{read-from-minibuffer}.  Recall that a command is anything for
@c which @code{commandp} returns @code{t}, and a command name is a symbol
@c for which @code{commandp} returns @code{t}.  @xref{Interactive Call}.

Аргумент @var{default} определяет результат, если пользователь
ничего не введет. @var{default} может быть символом, строкой или списком
строк. Если строка, @code{read-command} выполняет интернирование
перед возвратом. Если @var{default} список, @code{read-command}
использует первый элемент. Если @var{default} @code{nil} и пользователь
ничего не ввел результатом будет @code{(intern "")}, то есть
символ именем которого является пустая строка.

@c The argument @var{default} specifies what to return if the user enters
@c null input.  It can be a symbol, a string or a list of strings.  If it
@c is a string, @code{read-command} interns it before returning it.
@c If it is a list, @code{read-command} interns the first element of this list.
@c If @var{default} is @code{nil}, that means no default has been
@c specified; then if the user enters null input, the return value is
@c @code{(intern "")}, that is, a symbol whose name is an empty string.

@example
(read-command "Command name? ")

@group
;; @r{After evaluation of the preceding expression,}
;;   @r{the following prompt appears with an empty minibuffer:}
@end group

@group
---------- Buffer: Minibuffer ----------
Command name?
---------- Buffer: Minibuffer ----------
@end group
@end example

@noindent
Если пользователь введет @kbd{forward-c @key{RET}}, функция вернет
@code{forward-char}.

@c If the user types @kbd{forward-c @key{RET}}, then this function returns
@c @code{forward-char}.

Функция @code{read-command} является упрощенным интерфейсом к
@code{completing-read}. Функция использует @code{obarray} для подбора дополнений,
и предикат @code{commandp} для фильтрации только команд.

@c The @code{read-command} function is a simplified interface to
@c @code{completing-read}.  It uses the variable @code{obarray} so as to
@c complete in the set of extant Lisp symbols, and it uses the
@c @code{commandp} predicate so as to accept only command names:

@cindex @code{commandp} example
@example
@group
(read-command @var{prompt})
@equiv{}
(intern (completing-read @var{prompt} obarray
                         'commandp t nil))
@end group
@end example
@end defun

@defun read-variable prompt &optional default
@anchor{Definition of read-variable}
Функция выполняет считывание имени переменной и возвращает ее символ.
Аргументы такие же как @code{read-command}. Функция работает так
же как @code{read-command}, за исключением того, что
в качестве предиката используется @code{custom-variable-p} вместо
@code{commandp}.

@c This function reads the name of a customizable variable and returns it
@c as a symbol.  Its arguments have the same form as those of
@c @code{read-command}.  It behaves just like @code{read-command}, except
@c that it uses the predicate @code{custom-variable-p} instead of
@c @code{commandp}.
@end defun

@deffn Command read-color &optional prompt convert allow-empty display
Функция считывает строку, которая задает цвет. Это может быть
имя цвета или шестнадцатеричное представление @code{#RRRGGGBBB}.
По умолчанию @var{prompt} @code{"Color (name or #RGB triplet):"}.
Авто-дополнение предоставляется для имен цветов. При авто-дополнении
кандидаты раскрашены в соответствии с соответствующим цветом.

@c This function reads a string that is a color specification, either the
@c color's name or an RGB hex value such as @code{#RRRGGGBBB}.  It
@c prompts with @var{prompt} (default: @code{"Color (name or #RGB triplet):"})
@c and provides completion for color names, but not for hex RGB values.
@c In addition to names of standard colors, completion candidates include
@c the foreground and background colors at point.

Корректные RGB значения описываются @ref{Color Names}.
@c Valid RGB values are described in @ref{Color Names}.

Функция возвращает значение строки введенной пользователем
в мини-буфере. Но, при интерактивном вызове или если
@var{convert} не-@code{nil}, введенное значение
преобразуется в RGB формат. Функции требуется чтобы
цвет был введен корректно (иначе ввод не принимается).
Пустое имя цвета разрешено если @var{allow-empty}
@var{allow-empty} не-@code{nil}.

@c The function's return value is the string typed by the user in the
@c minibuffer.  However, when called interactively or if the optional
@c argument @var{convert} is non-@code{nil}, it converts any input color
@c name into the corresponding RGB value string and instead returns that.
@c This function requires a valid color specification to be input.
@c Empty color names are allowed when @var{allow-empty} is
@c non-@code{nil} and the user enters null input.

При интерактивном вызове, и если @var{display} не-@code{nil},
результат отображается в эхо области.

@c Interactively, or when @var{display} is non-@code{nil}, the return
@c value is also displayed in the echo area.
@end deffn

  Похожие функции: @code{read-coding-system}, @code{read-non-nil-coding-system}
(@ref{User-Chosen Coding Systems}), @code{read-input-method-name} (@ref{Input Methods}).

@c   See also the functions @code{read-coding-system} and
@c @code{read-non-nil-coding-system}, in @ref{User-Chosen Coding Systems},
@c and @code{read-input-method-name}, in @ref{Input Methods}.

@node Reading File Names
@subsection Считывание Имен Файлов
@c @subsection Reading File Names
@cindex read file names
@cindex prompt for file name

  Функции высокоуровневого дополнения @code{read-file-name},
@code{read-directory-name} и @code{read-shell-command} созданы
для считывания имен файлов, имен каталогов и команд оболочки.
У них есть специальные возможности, такие как автоматическая вставка
текущего каталога.

@c   The high-level completion functions @code{read-file-name},
@c @code{read-directory-name}, and @code{read-shell-command} are designed
@c to read file names, directory names, and shell commands, respectively.
@c They provide special features, including automatic insertion of the
@c default directory.

@defun read-file-name prompt &optional directory default require-match initial predicate
Функция считывает имя файла. Запрос задается параметром @var{prompt}.
Поддерживается авто-дополнение.

@c This function reads a file name, prompting with @var{prompt} and
@c providing completion.

Данная функция запрашивает имя файла
используя диалоговое окно, а не мини-буфер, если верно
следующее:

@c As an exception, this function reads a file name using a graphical
@c file dialog instead of the minibuffer, if all of the following are
@c true:

@enumerate
@item
Если вызвана при помощи мыши.
@c It is invoked via a mouse command.

@item
В текущем фрейме поддерживаются графические диалоговые окна.
@c The selected frame is on a graphical display supporting such dialogs.
@item
Переменная @code{use-dialog-box} не-@code{nil}.
@xref{Dialog Boxes,, Dialog Boxes, emacs, The GNU Emacs Manual}.

@c The variable @code{use-dialog-box} is non-@code{nil}.
@c @xref{Dialog Boxes,, Dialog Boxes, emacs, The GNU Emacs Manual}.

@item
Аргумент @var{directory}, описанный ниже, не задает внешний файл.
@xref{Remote Files,, Remote Files, emacs, The GNU Emacs Manual}.

@c The @var{directory} argument, described below, does not specify a
@c remote file.  @xref{Remote Files,, Remote Files, emacs, The GNU Emacs Manual}.
@end enumerate

@noindent
Поведение выборе файла с использованием диалогового
окна зависит от платформы. Далее будет описано только
поведение с использованием мини-буфера.

@c The exact behavior when using a graphical file dialog is
@c platform-dependent.  Here, we simply document the behavior when using
@c the minibuffer.

@code{read-file-name} не выполняет расширение имени возвращаемого имени
файла. Если нужно абсолютное имя файла @code{expand-file-name} нужно
вызвать явно.

@c @code{read-file-name} does not automatically expand the returned file
@c name.  You must call @code{expand-file-name} yourself if an absolute
@c file name is required.

Не обязательный аргумент @var{require-match} означает тоже, что
в @code{completing-read}. @xref{Minibuffer Completion}.

@c The optional argument @var{require-match} has the same meaning as in
@c @code{completing-read}.  @xref{Minibuffer Completion}.

Аргумент @var{directory} определяет каталог который будет
использоваться для выполнения авто-дополнения относительных
имен файлов. Значением должен быть абсолютный путь каталога.
@var{directory} вставляется в мини-буфер в качестве ввода по
умолчанию, если @var{insert-default-directory} не-@code{nil}.
По умолчанию @var{directory} равно @code{default-directory}.

@c The argument @var{directory} specifies the directory to use for
@c completing relative file names.  It should be an absolute directory
@c name.  If the variable @code{insert-default-directory} is non-@code{nil},
@c @var{directory} is also inserted in the minibuffer as initial input.
@c It defaults to the current buffer's value of @code{default-directory}.

@var{initial} определяет имя файла по умолчанию (если задано), и вставляется
в буфер (после @var{directory}). В этом случае, курсор помещается в начало @var{initial}.
По умолчанию @var{initial} @code{nil} (имя файла не вставляется).
Посмотреть на работу с @var{initial} можно введя @kbd{C-x C-v}
в буфере работающим с файлом. @strong{Внимание:} рекомендуется
использовать @var{default} вместо @var{initial} в большинстве
случаев.

@c If you specify @var{initial}, that is an initial file name to insert
@c in the buffer (after @var{directory}, if that is inserted).  In this
@c case, point goes at the beginning of @var{initial}.  The default for
@c @var{initial} is @code{nil}---don't insert any file name.  To see what
@c @var{initial} does, try the command @kbd{C-x C-v} in a buffer visiting
@c a file.  @strong{Please note:} we recommend using @var{default} rather
@c than @var{initial} in most cases.

Если @var{default} не-@code{nil}, функция возвращает @var{default}
если пользователь выходит из мини-буфера, содержащего начальное
значение. Начальное значение мини-буфера всегда не пусто
если @code{insert-default-directory} не-@code{nil}.
@var{default} не проверяется на корректность, в соответствии
с @var{require-match}. Но, если @var{require-match}
не-@code{nil}, начальное значение мини-буфера должно
быть корректным именем каталога (файла). Иначе @code{read-file-name}
выполнит попытку выполнить авто-дополнение, если пользователь
выйдет ничего не введя. @var{default} доступно через команды истории.

@c If @var{default} is non-@code{nil}, then the function returns
@c @var{default} if the user exits the minibuffer with the same non-empty
@c contents that @code{read-file-name} inserted initially.  The initial
@c minibuffer contents are always non-empty if
@c @code{insert-default-directory} is non-@code{nil}, as it is by
@c default.  @var{default} is not checked for validity, regardless of the
@c value of @var{require-match}.  However, if @var{require-match} is
@c non-@code{nil}, the initial minibuffer contents should be a valid file
@c (or directory) name.  Otherwise @code{read-file-name} attempts
@c completion if the user exits without any editing, and does not return
@c @var{default}.  @var{default} is also available through the history
@c commands.

Если @var{default} @code{nil}, @code{read-file-name} пытается найти
подходящее начальное значение, которое будет работать так же
как если бы задан явно. Если @var{default}
@code{nil}, но @var{initial} не-@code{nil}, default будет
соответствовать абсолютному имени файла полученного из
@var{directory} и @var{initial}. Если @var{default} и @var{initial}
@code{nil} и буфер работает с файлом, @code{read-file-name} будет использовать
абсолютное имя файла в качестве default. Если буфер не работает с файлом,
значения по умолчанию не будет, и если
пользователь просто нажмет @key{RET}, @code{read-file-name} просто
вернется предварительно вставленное значение мини-буфера.

@c If @var{default} is @code{nil}, @code{read-file-name} tries to find a
@c substitute default to use in its place, which it treats in exactly the
@c same way as if it had been specified explicitly.  If @var{default} is
@c @code{nil}, but @var{initial} is non-@code{nil}, then the default is
@c the absolute file name obtained from @var{directory} and
@c @var{initial}.  If both @var{default} and @var{initial} are @code{nil}
@c and the buffer is visiting a file, @code{read-file-name} uses the
@c absolute file name of that file as default.  If the buffer is not
@c visiting a file, then there is no default.  In that case, if the user
@c types @key{RET} without any editing, @code{read-file-name} simply
@c returns the pre-inserted contents of the minibuffer.

Если пользователь введет @key{RET} при пустом мини-буфере, функция
вернет пустую строку, в соответствии с @var{require-match}. Таким
образом пользователь может сделать, чтобы буфер не использовал
никакого файла @kbd{M-x set-visited-file-name}.

@c If the user types @key{RET} in an empty minibuffer, this function
@c returns an empty string, regardless of the value of
@c @var{require-match}.  This is, for instance, how the user can make the
@c current buffer visit no file using @kbd{M-x set-visited-file-name}.

Если @var{predicate} не-@code{nil}, он задает функцию одного аргумента,
которая используется для определения подходящих имен файлов. Имя файла
считается разрешенным если @var{predicate} возвращает не-@code{nil}.

@c If @var{predicate} is non-@code{nil}, it specifies a function of one
@c argument that decides which file names are acceptable completion
@c alternatives.  A file name is an acceptable value if @var{predicate}
@c returns non-@code{nil} for it.

Ниже пример использования @code{read-file-name}:
@c Here is an example of using @code{read-file-name}:

@example
@group
(read-file-name "The file is ")

;; @r{After evaluation of the preceding expression,}
;;   @r{the following appears in the minibuffer:}
@end group

@group
---------- Buffer: Minibuffer ----------
The file is /gp/gnu/elisp/@point{}
---------- Buffer: Minibuffer ----------
@end group
@end example

@noindent
Ввод @kbd{manual @key{TAB}} возвращает следующее:
@c Typing @kbd{manual @key{TAB}} results in the following:

@example
@group
---------- Buffer: Minibuffer ----------
The file is /gp/gnu/elisp/manual.texi@point{}
---------- Buffer: Minibuffer ----------
@end group
@end example

@c Wordy to avoid overfull hbox in smallbook mode.
@noindent
Если пользователь вводит @key{RET}, @code{read-file-name} вернет имя
файла @code{"/gp/gnu/elisp/manual.texi"}.

@c If the user types @key{RET}, @code{read-file-name} returns the file name
@c as the string @code{"/gp/gnu/elisp/manual.texi"}.
@end defun

@defvar read-file-name-function
Если не-@code{nil}, значение должно быть функцией, принимающей те
же параметры, что и @code{read-file-name}. Данная функция вызывается
из @code{read-file-name} для выполнения действия вместо обычного выполнения.

@c If non-@code{nil}, this should be a function that accepts the same
@c arguments as @code{read-file-name}.  When @code{read-file-name} is
@c called, it calls this function with the supplied arguments instead of
@c doing its usual work.
@end defvar

@defopt read-file-name-completion-ignore-case
Если переменная не-@code{nil}, @code{read-file-name} игнорирует
регистр при выполнении построении дополнений.

@c If this variable is non-@code{nil}, @code{read-file-name} ignores case
@c when performing completion.
@end defopt

@defun read-directory-name prompt &optional directory default require-match initial
Функция аналогична @code{read-file-name}, но позволяет вводить
только имена директорий.

@c This function is like @code{read-file-name} but allows only directory
@c names as completion alternatives.

Если @var{default} @code{nil} и @var{initial} не-@code{nil},
@code{read-directory-name} строит подстановку соединяя
@var{directory} и @var{initial}. Если и @var{default} и @var{initial}
@code{nil}, функция использует @var{directory} как подстановку по умолчанию,
или текущий каталог буфера если @var{directory} @code{nil}.

@c If @var{default} is @code{nil} and @var{initial} is non-@code{nil},
@c @code{read-directory-name} constructs a substitute default by
@c combining @var{directory} (or the current buffer's default directory
@c if @var{directory} is @code{nil}) and @var{initial}.  If both
@c @var{default} and @var{initial} are @code{nil}, this function uses
@c @var{directory} as substitute default, or the current buffer's default
@c directory if @var{directory} is @code{nil}.
@end defun

@defopt insert-default-directory
Переменная используется @code{read-file-name}, и таким образом большинством
команд считывания имен файлов. (В частности команды в interactive
которых есть @samp{F}, @samp{f}) @xref{Interactive Codes,, Code Characters for interactive}.
Переменная определяет, будет ли помещено начальное имя файла, в мини-буфер.
(Имя файла строится из каталога по умолчанию и @var{initial} значения.)
Если значение @code{nil} начальное значение не помещается.
(если не задан аргумент @var{initial}). При этом каталог
по умолчания используется для построения дополнений, просто
не отображается.

@c This variable is used by @code{read-file-name}, and thus, indirectly,
@c by most commands reading file names.  (This includes all commands that
@c use the code letters @samp{f} or @samp{F} in their interactive form.
@c @xref{Interactive Codes,, Code Characters for interactive}.)  Its
@c value controls whether @code{read-file-name} starts by placing the
@c name of the default directory in the minibuffer, plus the initial file
@c name, if any.  If the value of this variable is @code{nil}, then
@c @code{read-file-name} does not place any initial input in the
@c minibuffer (unless you specify initial input with the @var{initial}
@c argument).  In that case, the default directory is still used for
@c completion of relative file names, but is not displayed.

Если переменная @code{nil}, и начальное содержимое мини-буфера пустое,
пользователь может явно запросить следующий элемент истории в качестве
начального значения. Если переменная не-@code{nil}, начальное содержимое
мини-буфера всегда не пустое и пользователь может выйти с этим значением
просто нажав @key{RET}. (См. ниже.)

@c If this variable is @code{nil} and the initial minibuffer contents are
@c empty, the user may have to explicitly fetch the next history element
@c to access a default value.  If the variable is non-@code{nil}, the
@c initial minibuffer contents are always non-empty and the user can
@c always request a default value by immediately typing @key{RET} in an
@c unedited minibuffer.  (See above.)

Например:
@c For example:

@example
@group
;; @r{В этом случае в мини-буфере отображается начальный каталог.}
(let ((insert-default-directory t))
  (read-file-name "The file is "))
@end group

@group
---------- Buffer: Minibuffer ----------
The file is ~lewis/manual/@point{}
---------- Buffer: Minibuffer ----------
@end group

@group
;; @r{В этом случае мини-буфер пустой и только}
;;   @r{запрос отображается на строке.}
(let ((insert-default-directory nil))
  (read-file-name "The file is "))
@end group

@group
---------- Buffer: Minibuffer ----------
The file is @point{}
---------- Buffer: Minibuffer ----------
@end group
@end example
@end defopt

@defun read-shell-command prompt &optional initial history &rest args
Функция считывает команду оболочки из мини-буфера. Запрос
задается @var{prompt}. Команда предоставляет умное дополнение.
Команда завершает первое слова используя имена команд в качестве
кандидатов, и имена файлов для остальных слов.

@c This function reads a shell command from the minibuffer, prompting
@c with @var{prompt} and providing intelligent completion.  It completes
@c the first word of the command using candidates that are appropriate
@c for command names, and the rest of the command words as file names.

Функция использует @code{minibuffer-local-shell-command-map} в качестве
раскладки мини-буфера. Аргумент @var{history} задает
список истории, значение по умолчанию @code{shell-command-history}
(@pxref{Minibuffer History, shell-command-history}). Не обязательный
аргумент @var{initial} задает начальное содержимое мини-буфера
(@pxref{Initial Input}). Остальные @var{args}, если заданы, используется
как @var{default} и @var{inherit-input-method} в
@code{read-from-minibuffer} (@pxref{Text from Minibuffer}).

@c This function uses @code{minibuffer-local-shell-command-map} as the
@c keymap for minibuffer input.  The @var{history} argument specifies the
@c history list to use; if is omitted or @code{nil}, it defaults to
@c @code{shell-command-history} (@pxref{Minibuffer History,
@c shell-command-history}).  The optional argument @var{initial}
@c specifies the initial content of the minibuffer (@pxref{Initial
@c Input}).  The rest of @var{args}, if present, are used as the
@c @var{default} and @var{inherit-input-method} arguments in
@c @code{read-from-minibuffer} (@pxref{Text from Minibuffer}).
@end defun

@defvar minibuffer-local-shell-command-map
Раскладка используемая @code{read-shell-command} для авто-дополнения
команды и имен файлов. Переменная используется @code{minibuffer-local-map}
в качестве родительской раскладки, и на @key{TAB} назначена
команда @code{completion-at-point}.

@c This keymap is used by @code{read-shell-command} for completing
@c command and file names that are part of a shell command.  It uses
@c @code{minibuffer-local-map} as its parent keymap, and binds @key{TAB}
@c to @code{completion-at-point}.
@end defvar

@node Completion Variables
@subsection Переменные Авто-дополнения
@c @subsection Completion Variables

  Некоторые переменные могут изменить поведение команд
дополнения.

@c   Here are some variables that can be used to alter the default
@c completion behavior.

@cindex completion styles
@defopt completion-styles
Значение данной переменной представляет список стиля (состоит из символов).
@dfn{completion style} это множество правил для генерирования
дополнений. Каждый символ списка должен иметь соответствующую
запись в @code{completion-styles-alist}.

@c The value of this variable is a list of completion style (symbols) to
@c use for performing completion.  A @dfn{completion style} is a set of
@c rules for generating completions.  Each symbol occurring this list
@c must have a corresponding entry in @code{completion-styles-alist}.
@end defopt

@defvar completion-styles-alist
Переменная хранит список доступных стилей дополнения. Каждый
элемент является списком в форме:

@c This variable stores a list of available completion styles.  Each
@c element in the list has the form

@example
(@var{style} @var{try-completion} @var{all-completions} @var{doc})
@end example

@noindent
Где, @var{style} имя стиля дополнения (символ),
которые может быть использован в переменной @code{completion-styles}
для ссылки на стиль; @var{try-completion} функция которая выполняет
дополнение; @var{all-completions} функция перечисляющая дополнения;
и @var{doc} строка описывающая стиль завершения.

@c Here, @var{style} is the name of the completion style (a symbol),
@c which may be used in the @code{completion-styles} variable to refer to
@c this style; @var{try-completion} is the function that does the
@c completion; @var{all-completions} is the function that lists the
@c completions; and @var{doc} is a string describing the completion
@c style.

Функции @var{try-completion} и @var{all-completions} должны
принимать четыре аргумента: @var{string}, @var{collection},
@var{predicate}, и @var{point}. @var{string}, @var{collection},
и @var{predicate} имеют тот же смысл, что в @code{try-completion}
(@pxref{Basic Completion}), @var{point} позиция курсора в строке
@var{string}. Каждая функция должна возвращать не-@code{nil} если
дополнение может быть построено и @code{nil} иначе.

@c The @var{try-completion} and @var{all-completions} functions should
@c each accept four arguments: @var{string}, @var{collection},
@c @var{predicate}, and @var{point}.  The @var{string}, @var{collection},
@c and @var{predicate} arguments have the same meanings as in
@c @code{try-completion} (@pxref{Basic Completion}), and the @var{point}
@c argument is the position of point within @var{string}.  Each function
@c should return a non-@code{nil} value if it performed its job, and
@c @code{nil} if it did not (e.g., if there is no way to complete
@c @var{string} according to the completion style).

Когда пользователь вызывает команду дополнения, такую как
@code{minibuffer-complete} (@pxref{Completion Commands}), Emacs
берет первый стиль в @code{completion-styles} и вызывает
его функцию @var{try-completion}. Если функция возвращает
@code{nil}, Emacs переходит к следующему стилю и вызывает
его @var{try-completion} и так далее, пока какой-то из стилей
не вернет не-@code{nil}. Аналогичная последовательность
действий используется при получении списка дополнений с
через @var{all-completions}.

@c When the user calls a completion command like
@c @code{minibuffer-complete} (@pxref{Completion Commands}), Emacs looks
@c for the first style listed in @code{completion-styles} and calls its
@c @var{try-completion} function.  If this function returns @code{nil},
@c Emacs moves to the next listed completion style and calls its
@c @var{try-completion} function, and so on until one of the
@c @var{try-completion} functions successfully performs completion and
@c returns a non-@code{nil} value.  A similar procedure is used for
@c listing completions, via the @var{all-completions} functions.

Доступные стили дополнения @xref{Completion Styles,,, emacs, The GNU Emacs Manual}.

@c @xref{Completion Styles,,, emacs, The GNU Emacs Manual}, for a
@c description of the available completion styles.
@end defvar

@defopt completion-category-overrides
Переменная определяет специальные стили дополнения для дополнений
определенных типов текста. Значение должно быть ассоциативным списком
с элементами в форме @code{(@var{category} . @var{alist})}.
@var{category} символ описывающий, для чего будет строится
дополнение; в настоящее время определены следующие категории
@code{buffer}, @code{file} и @code{unicode-name}, а другие могут
быть определены специальными функциями (@pxref{Programmed Completion}).
@var{alist} ассоциативный массив описывающий как должно работать
дополнение для соответствующей категории. Поддерживаются
следующие ключи:

@c This variable specifies special completion styles and other completion
@c behaviors to use when completing certain types of text.  Its value
@c should be an alist with elements of the form @code{(@var{category}
@c . @var{alist})}.  @var{category} is a symbol describing what is being
@c completed; currently, the @code{buffer}, @code{file}, and
@c @code{unicode-name} categories are defined, but others can be defined
@c via specialized completion functions (@pxref{Programmed Completion}).
@c @var{alist} is an association list describing how completion should
@c behave for the corresponding category.  The following alist keys are
@c supported:

@table @code
@item styles
Значение должно быть списком стилей дополнения (символы).
@c The value should be a list of completion styles (symbols).

@item cycle
Значение должно быть значением для @code{completion-cycle-threshold}
(@pxref{Completion Options,,, emacs, The GNU Emacs Manual}) для
данной категории.

@c The value should be a value for @code{completion-cycle-threshold}
@c (@pxref{Completion Options,,, emacs, The GNU Emacs Manual}) for this
@c category.
@end table

@noindent
В будущем могут быть добавлены и другие опции.
@c Additional alist entries may be defined in the future.
@end defopt

@defvar completion-extra-properties
Переменная используется для задания дополнительных свойств
для текущей команды дополнения. Значение задается специальными
командами дополнения. Значение должно быть списком
пар свойство-значение. Поддерживаются следующие свойства:

@c This variable is used to specify extra properties of the current
@c completion command.  It is intended to be let-bound by specialized
@c completion commands.  Its value should be a list of property and value
@c pairs.  The following properties are supported:

@table @code
@item :annotation-function
Значение должно быть функцией для добавления аннотаций в буфер
для дополнений. Функция должна принимать один аргумент, дополнение,
и возвращать @code{nil} или строку отображаемую сразу за дополнением.

@c The value should be a function to add annotations in the completions
@c buffer.  This function must accept one argument, a completion, and
@c should either return @code{nil} or a string to be displayed next to
@c the completion.

@item :exit-function
Значение должно быть функцией, которая будет запускаться
после выполнения дополнения. Функция должна принимать два аргумента,
@var{string} и @var{status}, где @var{string} строка до которой
было расширено значение и @var{status} указывает на тип выполненной
операции: @code{finished} если текст завершен, @code{sole} если
текст не может быть дальше дополнен но дополнение не завершено,
или @code{exact} если текст является корректным дополнением, но
может быть дополнен еще.

@c The value should be a function to run after performing completion.
@c The function should accept two arguments, @var{string} and
@c @var{status}, where @var{string} is the text to which the field was
@c completed, and @var{status} indicates what kind of operation happened:
@c @code{finished} if text is now complete, @code{sole} if the text
@c cannot be further completed but completion is not finished, or
@c @code{exact} if the text is a valid completion but may be further
@c completed.
@end table
@end defvar

@node Programmed Completion
@subsection Запрограммированное Авто-дополнение
@c @subsection Programmed Completion
@cindex programmed completion

  Иногда не возможно или не удобно создавать alist или
obarray со всеми возможными дополнениями. В этом случае
можно предоставить функцию выполняющую дополнение
для заданной строки. Такая возможность называется
@dfn{запрограммированное завершение} (@dfn{programmed completion}).
Emacs использует запрограммированное авто-дополнение когда
авто-завершает имена файлов (@pxref{File Name Completion}).

@c   Sometimes it is not possible or convenient to create an alist or
@c an obarray containing all the intended possible completions ahead
@c of time.  In such a case, you can supply your own function to compute
@c the completion of a given string.  This is called @dfn{programmed
@c completion}.  Emacs uses programmed completion when completing file
@c names (@pxref{File Name Completion}), among many other cases.

  Для использования данной возможности, нужно передать функцию в
качестве аргумента @var{collection} в @code{completing-read}.
Функция @code{completing-read} передаст эту функцию в @code{try-completion}
и @code{all-completions}, и другие базовые функции для построения
дополнения.

@c   To use this feature, pass a function as the @var{collection}
@c argument to @code{completing-read}.  The function
@c @code{completing-read} arranges to pass your completion function along
@c to @code{try-completion}, @code{all-completions}, and other basic
@c completion functions, which will then let your function do all
@c the work.

  Функция дополнения должна принимать три аргумента:
  @c The completion function should accept three arguments:

@itemize @bullet
@item
Строка для которой нужно построить дополнение.
@c The string to be completed.

@item
Функция предикат, используемая для фильтрации возможных
дополнений или @code{nil}. Функция вызывается для каждого
возможного дополнения, и если предикат возвращает @code{nil}
дополнение игнорируется.

@c A predicate function with which to filter possible matches, or
@c @code{nil} if none.  The function should call the predicate for each
@c possible match, and ignore the match if the predicate returns
@c @code{nil}.

@item
Флаг определяющий тип дополнения. Флаг может принимать
одно из следующих значений.

@c A flag specifying the type of completion operation to perform.  This
@c flag may be one of the following values.

@table @code
@item nil
Определяет @code{try-completion} действие. Функция должна возвращать
@code{t} если заданная строка уникальна и есть полное совпадение;
если больше одного соответствия, функция должна возвращать наибольшую
общую подстроку для всех совпадений, если совпадений нет,
должно возвращаться @code{nil}.

@c This specifies a @code{try-completion} operation.  The function should
@c return @code{t} if the specified string is a unique and exact match;
@c if there is more than one match, it should return the common substring
@c of all matches (if the string is an exact match for one completion
@c alternative but also matches other longer alternatives, the return
@c value is the string); if there are no matches, it should return
@c @code{nil}.

@item t
Тип @code{all-completion}. Функция должна возвращать список всех возможных
дополнений для заданной строки.

@c This specifies an @code{all-completions} operation.  The function
@c should return a list of all possible completions of the specified
@c string.

@item lambda
@code{test-completion} действие. Функция должна вернуть @code{t} если
переданная строка полностью соответствует одной из
альтернатив дополнения; @code{nil} если это не так.

@c This specifies a @code{test-completion} operation.  The function
@c should return @code{t} if the specified string is an exact match for
@c some completion alternative; @code{nil} otherwise.

@item (boundaries . @var{suffix})
Операция @code{completion-bounadries}. Функция должна возвращать
@code{(boundaries @var{start} .  @var{end})}, где @var{start}
позиция начальной границы в заданной строке, @var{end} позиция конечной
границы в @var{suffix}.

@c This specifies a @code{completion-boundaries} operation.  The function
@c should return @code{(boundaries @var{start} . @var{end})}, where
@c @var{start} is the position of the beginning boundary in the specified
@c string, and @var{end} is the position of the end boundary in
@c @var{suffix}.

@item metadata
Определяет запрос на получение информации о состоянии текущего дополнения.
Возвращаемое значение должно иметь форму
@code{(metadata . @var{alist})}, где @var{alist} alist,
с элементами описанными ниже.

@c This specifies a request for information about the state of the
@c current completion.  The return value should have the form
@c @code{(metadata . @var{alist})}, where @var{alist} is an alist whose
@c elements are described below.
@end table

@noindent
Если флаг имеет другое значение, функция дополнения должна возвращать
@code{nil}.

@c If the flag has any other value, the completion function should return
@c @code{nil}.
@end itemize

Ниже список ключей metadata которые функция дополнения может
вернуть на вызов с флагом @code{metatdata}:

@c The following is a list of metadata entries that a completion function
@c may return in response to a @code{metadata} flag argument:

@table @code
@item category
Значение должно быть символом описывающим вид текста,
который дополняется. Если символ соответствует одному
из ключей @code{completion-category-overrides}, обычное
поведение дополнения переопределяется. @xref{Completion Variables}.

@c The value should be a symbol describing what kind of text the
@c completion function is trying to complete.  If the symbol matches one
@c of the keys in @code{completion-category-overrides}, the usual
@c completion behavior is overridden.  @xref{Completion Variables}.

@item annotation-function
Значение должно быть функцией для @dfn{annotating} дополнения. Функция
должна принимать один аргумент, @var{string}, который может быть
возможным дополнением. Функция должна возвращать строку, которая
будет отображаться после строки @var{string} дополнения в буфере
@file{*Completions*}.

@c The value should be a function for @dfn{annotating} completions.  The
@c function should take one argument, @var{string}, which is a possible
@c completion.  It should return a string, which is displayed after the
@c completion @var{string} in the @file{*Completions*} buffer.

@item display-sort-function
Значение должно быть функцией для сортировки дополнений. Функция должна
принимать один аргумент, список строк дополнений, и возвращать
отсортированный список строк. Функция может изменять переданный
список (работать деструктивно).

@c The value should be a function for sorting completions.  The function
@c should take one argument, a list of completion strings, and return a
@c sorted list of completion strings.  It is allowed to alter the input
@c list destructively.

@item cycle-sort-function
Значение должно быть функцией для сортировки дополнений, когда
@code{completion-cycle-threshold} не-@code{nil} и пользователь
переключается между возможными дополнениями @xref{Completion Options,,, emacs, The GNU Emacs Manual}.
Аргументом функции является список, а возвращается значение
как в @code{display-sort-function}.

@c The value should be a function for sorting completions, when
@c @code{completion-cycle-threshold} is non-@code{nil} and the user is
@c cycling through completion alternatives.  @xref{Completion Options,,,
@c emacs, The GNU Emacs Manual}.  Its argument list and return value are
@c the same as for @code{display-sort-function}.
@end table

@defun completion-table-dynamic function &optional switch-buffer
Функция предоставляет удобный способ написать функцию, работающую
как запрограммированное авто-дополнение. Аргумент @var{function} должен
быть функцией принимающей один строковый аргумент, и возвращающей
alist возможных дополнений. Функция может игнорировать аргумент и
возвращать весь список возможных дополнений. Можно рассматривать
@code{completion-table-dynamic} как преобразователь между данным
интерфейсом и интерфейсом функций запрограммированного авто-дополнения.

@c This function is a convenient way to write a function that can act as
@c a programmed completion function.  The argument @var{function} should be
@c a function that takes one argument, a string, and returns an alist of
@c possible completions of it.  It is allowed to ignore the argument and
@c return a full list of all possible completions.  You can think of
@c @code{completion-table-dynamic} as a transducer between that interface
@c and the interface for programmed completion functions.

Если не обязательный аргумент @var{switch-buffer} не-@code{nil},
и дополнение выполняется в мини-буфере, @var{function} должна
вызываться с текущим буферов установленным в буфера из которого
был вызван мини-буфер.

@c If the optional argument @var{switch-buffer} is non-@code{nil}, and
@c completion is performed in the minibuffer, @var{function} will be
@c called with current buffer set to the buffer from which the minibuffer
@c was entered.
@end defun

@defun completion-table-with-cache function &optional ignore-case
Данная функция является оберткой для @code{completion-table-dynamic},
которая сохраняет последнюю пару аргумент-результат. То есть, повторный
поиск дополнения для одних и тех же аргументов будет использовать
сохраненное значение, и дополнение будет строится только один раз.
Данная функция может быть полезна, когда медленная операция, например
выполняемую с вызовом внешнего процесса.

@c This is a wrapper for @code{completion-table-dynamic} that saves the
@c last argument-result pair.  This means that multiple lookups with the
@c same argument only need to call @var{function} once.  This can be useful
@c when a slow operation is involved, such as calling an external process.
@end defun

@node Completion in Buffers
@subsection Дополнение в Обычных Буферах
@c @subsection Completion in Ordinary Buffers
@cindex inline completion

@findex completion-at-point
  Хотя дополнение обычно выполняется в мини-буфере, возможности
дополнения могут использоваться для текста в обычных Emacs
буферах. В многих основных режимах, дополнение выполняется
с помощью нажатия @kbd{C-M-i} или @kbd{M-@key{TAB}}, на которых
назначена команда @code{completion-at-point}. @xref{Symbol Completion,,, emacs, The GNU
Emacs Manual}. Данная команда использует переменную перехватчика
@code{copmletion-at-point-functions}:

@c   Although completion is usually done in the minibuffer, the
@c completion facility can also be used on the text in ordinary Emacs
@c buffers.  In many major modes, in-buffer completion is performed by
@c the @kbd{C-M-i} or @kbd{M-@key{TAB}} command, bound to
@c @code{completion-at-point}.  @xref{Symbol Completion,,, emacs, The GNU
@c Emacs Manual}.  This command uses the abnormal hook variable
@c @code{completion-at-point-functions}:

@defvar completion-at-point-functions
Значение этого перехватчика должно быть списком функций, которые
используются для вычисления таблицы дополнения для текста возле курсора.
Значение может быть использовано для создания таблиц дополнения
специфических для некоторых основных режимов. (@pxref{Major Mode Conventions}).

@c The value of this abnormal hook should be a list of functions, which
@c are used to compute a completion table for completing the text at
@c point.  It can be used by major modes to provide mode-specific
@c completion tables (@pxref{Major Mode Conventions}).

Когда запускается @code{completion-at-point}, она вызывает функции
в списке по одной, без аргументов. Каждая функция должна
вернуть @code{nil} если не может построить таблицу дополнения
для текст у курсора, либо список в форме:

@c When the command @code{completion-at-point} runs, it calls the
@c functions in the list one by one, without any argument.  Each function
@c should return @code{nil} if it is unable to produce a completion table
@c for the text at point.  Otherwise it should return a list of the form

@example
(@var{start} @var{end} @var{collection} . @var{props})
@end example

@noindent
@var{start} и @var{end} отделяют текст для дополнения, который
должен содержать точку. @var{collection} является таблицей
дополнения для этого текста, в форме пригодной для передачи
вторым аргументов в @code{try-comletion} (@pxref{Basic Completion});
возможные дополнения будут строиться по этой таблицы обычным способом,
использую стили дополнения @code{completion-styles}
(@pxref{Completion Variables}). @var{props} список свойств с дополнительной
информацией, любое из свойств в @code{completion-extra-properties}
are recognized (@pxref{Completion Variables}), как и следующие:

@c @var{start} and @var{end} delimit the text to complete (which should
@c enclose point).  @var{collection} is a completion table for completing
@c that text, in a form suitable for passing as the second argument to
@c @code{try-completion} (@pxref{Basic Completion}); completion
@c alternatives will be generated from this completion table in the usual
@c way, via the completion styles defined in @code{completion-styles}
@c (@pxref{Completion Variables}).  @var{props} is a property list for
@c additional information; any of the properties in
@c @code{completion-extra-properties} are recognized (@pxref{Completion
@c Variables}), as well as the following additional ones:

@table @code
@item :predicate
Значение должно быть предикатом, которому должны удовлетворять
возможные дополнения.
@c The value should be a predicate that completion candidates need to
@c satisfy.

@item :exclusive
Если значение @code{no}, @code{completion-at-point} переходит
к следующей функции в @code{completion-at-point-functions} если
в таблице дополнений для текущей нет дополнения, иначе будет
сообщение не возможности дополнения.

@c If the value is @code{no}, then if the completion table fails to match
@c the text at point, @code{completion-at-point} moves on to the
@c next function in @code{completion-at-point-functions} instead of
@c reporting a completion failure.
@end table

Предоставление функции для @var{collection} рекомендуется в случае
если генерировать список дополнений дорого (в плане вычислений). Emacs
может вызывать функции @code{completion-at-point-functions} много
раз, но следить за значением @var{collection} только для
некоторых из этих вызовов. Если предоставить функцию для @var{collection},
Emacs сможет отложить генерацию дополнений пока оно не понадобится.
Можно использовать @var{completion-table-dynamic} для создания
функции обертки:

@c Supplying a function for @var{collection} is strongly recommended if
@c generating the list of completions is an expensive operation.  Emacs
@c may internally call functions in @code{completion-at-point-functions}
@c many times, but care about the value of @var{collection} for only some
@c of these calls.  By supplying a function for @var{collection}, Emacs
@c can defer generating completions until necessary.  You can use
@c @var{completion-table-dynamic} to create a wrapper function:

@smallexample
;; Avoid this pattern.
(let ((beg ...) (end ...) (my-completions (my-make-completions)))
  (list beg end my-completions))

;; Use this instead.
(let ((beg ...) (end ...))
  (list beg
        end
        (completion-table-dynamic
          (lambda (_)
            (my-make-completions)))))
@end smallexample

Функция в @code{completion-at-point-functions} может возвращать
функцию вместо списка как описано выше. В этом случае,
возвращаемая функция, вызывается без аргументов, и полностью
отвечает за построение дополнения. Не рекомендуется использовать
данную особенность, так как она предназначена для перевода старого
кода к использованию @code{completion-at-point}.

@c A function in @code{completion-at-point-functions} may also return a
@c function instead of a list as described above.  In that case, that
@c returned function is called, with no argument, and it is entirely
@c responsible for performing the completion.  We discourage this usage;
@c it is intended to help convert old code to using
@c @code{completion-at-point}.

Первая функция в @code{completion-at-point-functions} которая возвращает
не-@code{nil} значение используется @code{completion-at-point}. Остальные
функции не вызываются. Исключением является ситуация, когда
задано @code{:exclusive}, как описано выше.

@c The first function in @code{completion-at-point-functions} to return a
@c non-@code{nil} value is used by @code{completion-at-point}.  The
@c remaining functions are not called.  The exception to this is when
@c there is an @code{:exclusive} specification, as described above.
@end defvar

  Следующая функция предоставляет удобный способ построить
дополнение для произвольной части текста в Emacs буфере:

@c   The following function provides a convenient way to perform
@c completion on an arbitrary stretch of text in an Emacs buffer:

@defun completion-in-region start end collection &optional predicate
Функция строит дополнения для текста в текущем буфере находящимся между
@var{start} и @var{end}, используя @var{collection}. Аргумент
@var{collection} используется так же как в @code{try-complection}
(@pxref{Basic Completion}).

@c This function completes the text in the current buffer between the
@c positions @var{start} and @var{end}, using @var{collection}.  The
@c argument @var{collection} has the same meaning as in
@c @code{try-completion} (@pxref{Basic Completion}).

Функция вставляет дополнение для текста в текущий буфер. В отличие
от @code{completing-read} (@pxref{Minibuffer Completion}), функция не
активирует мини-буфер.

@c This function inserts the completion text directly into the current
@c buffer.  Unlike @code{completing-read} (@pxref{Minibuffer
@c Completion}), it does not activate the minibuffer.

Чтобы функция работала курсор должен быть между @var{start} и
@var{end}.

@c For this function to work, point must be somewhere between @var{start}
@c and @var{end}.
@end defun


@node Yes-or-No Queries
@section Запросы Yes-or-No
@c @section Yes-or-No Queries
@cindex asking the user questions
@cindex querying the user
@cindex yes-or-no questions

  Данный раздел описывает функции используемые для задания пользователю
yes-or-no вопросов. (да-или-нет). Ответ на запрос функции @code{y-o-n-p} может
быть дан одним символом; что полезно, когда случайный не верный ответ
не будет иметь серьезных последствий. Запрос функции @code{yes-or-no-p}
можно использовать для более серьезных вопросов, так как он требует
ввода трех или четырех символов.

@c   This section describes functions used to ask the user a yes-or-no
@c question.  The function @code{y-or-n-p} can be answered with a single
@c character; it is useful for questions where an inadvertent wrong answer
@c will not have serious consequences.  @code{yes-or-no-p} is suitable for
@c more momentous questions, since it requires three or four characters to
@c answer.

   Если какие-то из этих функций вызываются из команды используемой мышь,
точнее если @code{last-nonmenu-event} (@pxref{Command Loop Info}) @code{nil}
или список---тогда будет использовано всплывающее диалоговое окно для
задания вопроса. Иначе, будет использоваться запрос, для ответа с клавиатуры.
Можно явно задать способ задания вопроса задав переменную
@code{last-nonmenu-event} в коде содержащем вызов вопроса.

@c    If either of these functions is called in a command that was invoked
@c using the mouse---more precisely, if @code{last-nonmenu-event}
@c (@pxref{Command Loop Info}) is either @code{nil} or a list---then it
@c uses a dialog box or pop-up menu to ask the question.  Otherwise, it
@c uses keyboard input.  You can force use either of the mouse or of keyboard
@c input by binding @code{last-nonmenu-event} to a suitable value around
@c the call.

  Строго говоря, @code{yes-or-no-p} использует мини-буфер, а
@code{y-or-n-p}; но все же стоит их описывать вместе.

@c   Strictly speaking, @code{yes-or-no-p} uses the minibuffer and
@c @code{y-or-n-p} does not; but it seems best to describe them together.

@defun y-or-n-p prompt
Функция задает пользователю вопрос и ожидает ввода в эхо
область. Функция возвращает @code{t} если пользователь вводит @kbd{y},
@code{nil} если пользователь вводит @kbd{n}. Так же функция принимает @key{SPC}
в значении yes(да), и @key{DEL} в значении no(нет). Так же
принимаются @kbd{C-]} для выхода, как @kbd{C-g}, так как запрос
выглядит как мини-буфер и пользователь может попытаться для выхода
использовать эту комбинацию. Ответом является один символ, @key{RET}
вводить не нужно. Символы верхнего и нижнего регистра рассматриваются
одинаково.

@c This function asks the user a question, expecting input in the echo
@c area.  It returns @code{t} if the user types @kbd{y}, @code{nil} if the
@c user types @kbd{n}.  This function also accepts @key{SPC} to mean yes
@c and @key{DEL} to mean no.  It accepts @kbd{C-]} to quit, like
@c @kbd{C-g}, because the question might look like a minibuffer and for
@c that reason the user might try to use @kbd{C-]} to get out.  The answer
@c is a single character, with no @key{RET} needed to terminate it.  Upper
@c and lower case are equivalent.

Под ``заданием вопроса'' понимается печать @var{prompt} (запроса)
в эхо области, и следующей за ним строкой @w{@samp{(y or n)}}. Если
ввод не один из символов (@kbd{y}, @kbd{n}, @kbd{@key{SPC}}, @kbd{@key{DEL}} или
комбинации для выхода), функция будет отвечать @samp{Please answer y or n.}
(пожалуйста ответьте y или n), и повторять вопрос.

@c ``Asking the question'' means printing @var{prompt} in the echo area,
@c followed by the string @w{@samp{(y or n) }}.  If the input is not one of
@c the expected answers (@kbd{y}, @kbd{n}, @kbd{@key{SPC}},
@c @kbd{@key{DEL}}, or something that quits), the function responds
@c @samp{Please answer y or n.}, and repeats the request.

Функция на самом деле не использует мини-буфер, так как не нужно
редактировать ответ. Используется эхо-область
(@pxref{The Echo Area}), которая использует ту же часть
экрана, что и мини-буфер. Курсор перемещается в эхо-область
на момент задания вопроса.

@c This function does not actually use the minibuffer, since it does not
@c allow editing of the answer.  It actually uses the echo area (@pxref{The
@c Echo Area}), which uses the same screen space as the minibuffer.  The
@c cursor moves to the echo area while the question is being asked.

Ответ, и то что он значит, как и @samp{y} и @samp{n}, не зашиты,
и могут быть изменены, заданием раскладки @code{query-replace-map}
(@pxref{Search and Replace}). В частности если пользователь
задает специальные ответы @code{recenter}, @code{scroll-up},
@code{scroll-other-window-down} (связанные соответственно с
@kbd{C-l}, @kbd{C-v}, @kbd{M-v}, @kbd{C-M-v} и @kbd{C-M-S-v} в
@code{query-replace-map}), функция выполнит специальное действие
центрирования или скролирования, и потом повторит запрос.

@c The answers and their meanings, even @samp{y} and @samp{n}, are not
@c hardwired, and are specified by the keymap @code{query-replace-map}
@c (@pxref{Search and Replace}).  In particular, if the user enters the
@c special responses @code{recenter}, @code{scroll-up},
@c @code{scroll-down}, @code{scroll-other-window}, or
@c @code{scroll-other-window-down} (respectively bound to @kbd{C-l},
@c @kbd{C-v}, @kbd{M-v}, @kbd{C-M-v} and @kbd{C-M-S-v} in
@c @code{query-replace-map}), this function performs the specified window
@c recentering or scrolling operation, and poses the question again.

@noindent
При показе последовательности строк в эхо области, только
одна показывается на экране.

@c We show successive lines of echo area messages, but only one actually
@c appears on the screen at a time.
@end defun

@defun y-or-n-p-with-timeout prompt seconds default
Функция аналогична @code{y-or-n-p}, но если пользователь
не отвечает за @var{seconds}, функция прекращает ожидание и возвращает
@var{default}. Функция устанавливает таймер; см. @ref{Timer}.
Аргумент @var{seconds} должен быть числом.

@c Like @code{y-or-n-p}, except that if the user fails to answer within
@c @var{seconds} seconds, this function stops waiting and returns
@c @var{default}.  It works by setting up a timer; see @ref{Timers}.
@c The argument @var{seconds} should be a number.
@end defun

@defun yes-or-no-p prompt
Функция задает пользователю вопрос, ожидая ввода в мини-буфере.
Функция возвращает @code{t}, если пользователь вводит: @samp{yes},
@code{nil}, если пользователь вводит @samp{no}. Пользователь должен
нажать @key{RET} по окончании ввода ответа. Регистр символов
значения не имеет.

@c This function asks the user a question, expecting input in the
@c minibuffer.  It returns @code{t} if the user enters @samp{yes},
@c @code{nil} if the user types @samp{no}.  The user must type @key{RET} to
@c finalize the response.  Upper and lower case are equivalent.

@code{yes-or-no-p} сначала отображает запрос @var{prompt}, потом
@w{@samp{(yes or no)}}. Пользователь должен ввести один из этих ответом,
иначе функция выведет @samp{Please answer yes or no.} и повторит запрос.

@c @code{yes-or-no-p} starts by displaying @var{prompt} in the echo area,
@c followed by @w{@samp{(yes or no) }}.  The user must type one of the
@c expected responses; otherwise, the function responds @samp{Please answer
@c yes or no.}, waits about two seconds and repeats the request.

@code{yes-or-no-p} требует больше действий от пользователя, чем
@code{y-or-n-p} и может использоваться для принятия более важных
решений.

@c @code{yes-or-no-p} requires more work from the user than
@c @code{y-or-n-p} and is appropriate for more crucial decisions.

@c Here is an example:

Примеры:

@smallexample
@group
(yes-or-no-p "Do you really want to remove everything? ")

;; @r{After evaluation of the preceding expression,}
;;   @r{the following prompt appears,}
;;   @r{with an empty minibuffer:}
@end group

@group
---------- Buffer: minibuffer ----------
Do you really want to remove everything? (yes or no)
---------- Buffer: minibuffer ----------
@end group
@end smallexample

@noindent
Если пользователь введет @kbd{y @key{RET}}, запрос будет повторен, так для
данной функции это не принимаемый вариант ответа.

@c If the user first types @kbd{y @key{RET}}, which is invalid because this
@c function demands the entire word @samp{yes}, it responds by displaying
@c these prompts, with a brief pause between them:

@smallexample
@group
---------- Buffer: minibuffer ----------
Please answer yes or no.
Do you really want to remove everything? (yes or no)
---------- Buffer: minibuffer ----------
@end group
@end smallexample
@end defun

@node Multiple Queries
@section Задание Множества Y-or-N Вопросов
@c @section Asking Multiple Y-or-N Questions
@cindex multiple yes-or-no questions

  В случае если нужно задать последовательность вопросов вида
``Сохранить текущий буфер?`` под одному для каждого буфера, стоит
использовать функцию @code{map-y-or-n-p} для задания множества вопросов,
вместо задания каждого вопроса по отдельности. Данная функция предоставляет
пользователю такие удобные возможности, как сразу ответить на всю
группу вопросов.

@c   When you have a series of similar questions to ask, such as ``Do you
@c want to save this buffer?'' for each buffer in turn, you should use
@c @code{map-y-or-n-p} to ask the collection of questions, rather than
@c asking each question individually.  This gives the user certain
@c convenient facilities such as the ability to answer the whole series at
@c once.

@defun map-y-or-n-p prompter actor list &optional help action-alist no-cursor-in-echo-area
Функция задает пользователю последовательность вопросов,
выполняя считывание из эхо области по одному символу для каждого вопроса.

@c This function asks the user a series of questions, reading a
@c single-character answer in the echo area for each one.

Значение @var{list} задает объекты о которых будут задаваться вопросы.
Значением должен быть список объектов или функция генератор. Функция
должна вызываться без аргументов, и при вызове возвращать следующий
объект, либо @code{nil}, если больше спрашивать не о чем.

@c The value of @var{list} specifies the objects to ask questions about.
@c It should be either a list of objects or a generator function.  If it is
@c a function, it should expect no arguments, and should return either the
@c next object to ask about, or @code{nil}, meaning to stop asking questions.

Аргумент @var{prompter} определяет способ задания вопроса. Если
@var{prompter} строка, текст вопроса строится следующим образом:

@c The argument @var{prompter} specifies how to ask each question.  If
@c @var{prompter} is a string, the question text is computed like this:

@example
(format @var{prompter} @var{object})
@end example

@noindent
где @var{object} очередной объект, для вопроса (задается параметром @var{list}).
@c where @var{object} is the next object to ask about (as obtained from
@c @var{list}).

Если значение не строка, @var{prompter} должно быть функцией одного
аргумента (следующий объект о котором спрашивается) и должна возвращать
текст вопроса. Если значение строка, тогда она будет показана
пользователю в качестве вопроса. Если значение функции @code{t},
то действие выполняется на объектом и у пользователя ничего не спрашивается,
если значение @code{nil}, то действие не выполняется и у пользователя тоже
ничего не спрашивается.

@c If not a string, @var{prompter} should be a function of one argument
@c (the next object to ask about) and should return the question text.  If
@c the value is a string, that is the question to ask the user.  The
@c function can also return @code{t}, meaning do act on this object (and
@c don't ask the user), or @code{nil}, meaning ignore this object (and don't
@c ask the user).

Аргумент @var{actor} определяет реакции на ответы пользователя. Значением
должна быть функция от одного аргумента, которая вызывается для каждого
ответа для которого, пользователь сказал да (yes). Аргументом функции
является объект полученный от @var{list}.

@c The argument @var{actor} says how to act on the answers that the user
@c gives.  It should be a function of one argument, and it is called with
@c each object that the user says yes for.  Its argument is always an
@c object obtained from @var{list}.

Если задан аргумент @var{help}, он должен быть списком в форме:
@c If the argument @var{help} is given, it should be a list of this form:

@example
(@var{singular} @var{plural} @var{action})
@end example

@noindent
Где @var{singular} строка содержащая существительное в единственном
числе описывающее объекты с которыми выполняются действия, @var{plural}
соответствующее существительное во множественном числе, и @var{action}
переходный глагол, описывающий что @var{actor} делает.

@c where @var{singular} is a string containing a singular noun that
@c describes the objects conceptually being acted on, @var{plural} is the
@c corresponding plural noun, and @var{action} is a transitive verb
@c describing what @var{actor} does.

Если не задавать @var{help}, по умолчанию будет использоваться
@code{("object" "objects" "act on")}.

@c If you don't specify @var{help}, the default is @code{("object"
@c "objects" "act on")}.

Каждый раз при задании вопроса, пользователь может ввести
@kbd{y}, @kbd{Y}, @key{SPC} в качестве подтверждения действия,
@kbd{n}, @kbd{N}, @key{DEL} в качестве отказа от действия;
@kbd{!} для выполнения действия для всех следующих объектов;
@key{ESC} или @key{q} для отказа от всех следующих действий;
@kbd{.} (period) для действия с текущим объектом и выхода;
@kbd{C-h} для получения помощи. Такие же ответы принимает
@code{query-replace}. Раскладка для @code{query-replace-map}
определяет свои значения для @code{map-y-or-n-p}, как и
для @code{query-replace}; см. @ref{Search and Replace}.

@c Each time a question is asked, the user may enter @kbd{y}, @kbd{Y}, or
@c @key{SPC} to act on that object; @kbd{n}, @kbd{N}, or @key{DEL} to skip
@c that object; @kbd{!} to act on all following objects; @key{ESC} or
@c @kbd{q} to exit (skip all following objects); @kbd{.} (period) to act on
@c the current object and then exit; or @kbd{C-h} to get help.  These are
@c the same answers that @code{query-replace} accepts.  The keymap
@c @code{query-replace-map} defines their meaning for @code{map-y-or-n-p}
@c as well as for @code{query-replace}; see @ref{Search and Replace}.

Можно использовать @var{action-list} для задания дополнительных
вариантов ответа. Значением является alist (ассоциативный список)
в форме @code{(@var{char} @var{function} @var{help})}, каждый элемент
которого задает один дополнительный вариант ответа. @code{char} символ
ответа; @var{function} функция от одного аргумента (объект для действия из @var{list});
@var{help} строка.

@c You can use @var{action-alist} to specify additional possible answers
@c and what they mean.  It is an alist of elements of the form
@c @code{(@var{char} @var{function} @var{help})}, each of which defines one
@c additional answer.  In this element, @var{char} is a character (the
@c answer); @var{function} is a function of one argument (an object from
@c @var{list}); @var{help} is a string.

При вводе пользователем @var{char}, @code{map-y-or-n-p} вызывает
функцию @var{function}. Если функция возвращает не-@code{nil}, считается
что над объектом выполнено действие, и @code{map-y-or-n-p} переходит
к следующему объекту @var{list}. Если возвращается @code{nil}, запрос
повторяется для этого же объекта.

@c When the user responds with @var{char}, @code{map-y-or-n-p} calls
@c @var{function}.  If it returns non-@code{nil}, the object is considered
@c acted upon, and @code{map-y-or-n-p} advances to the next object in
@c @var{list}.  If it returns @code{nil}, the prompt is repeated for the
@c same object.

Как правило @code{map-y-or-n-p} задает значение для @code{cursor-in-echo-area}
при выполнении запроса. Но если @var{no-cursor-in-echo-area} не-@code{nil},
значение не задается.

@c Normally, @code{map-y-or-n-p} binds @code{cursor-in-echo-area} while
@c prompting.  But if @var{no-cursor-in-echo-area} is non-@code{nil}, it
@c does not do that.

Если @code{map-y-or-n-p} вызывается командой мыши (@code{last-nonmenu-event} (@pxref{Command Loop Info}))
@code{nil} или список---тогда используется диалоговое окно или
всплывающее меню для задания вопроса. В этом случае ввод с клавиатуры
не используется. Можно принудительно задать @code{last-nonmenu-event}
явно определив способ ввода.

@c If @code{map-y-or-n-p} is called in a command that was invoked using the
@c mouse---more precisely, if @code{last-nonmenu-event} (@pxref{Command
@c Loop Info}) is either @code{nil} or a list---then it uses a dialog box
@c or pop-up menu to ask the question.  In this case, it does not use
@c keyboard input or the echo area.  You can force use either of the mouse or
@c of keyboard input by binding @code{last-nonmenu-event} to a suitable
@c value around the call.

@code{map-y-or-n-p}  возвращает количество объектов для которых
было выполнено действие.

@c The return value of @code{map-y-or-n-p} is the number of objects acted on.
@end defun
@c FIXME  An example of this would be more useful than all the
@c preceding examples of simple things.

@node Reading a Password
@section Ввод Паролей
@c @section Reading a Password
@cindex passwords, reading

  Для чтения пароля (например для передачи в другую программу)
предназначена функция @code{read-passwd}.

@c   To read a password to pass to another program, you can use the
@c function @code{read-passwd}.

@defun read-passwd prompt &optional confirm default
Функция считывает пароль, запрашивая его с вопросом @var{prompt}.
При вводе пароль не показывается в эхо области, вместо этого
печатаются @samp{.} для каждого символа пароля. Вместо @samp{.} можно
задать другой символ задав символ переменной @code{read-hide-char}.

@c This function reads a password, prompting with @var{prompt}.  It does
@c not echo the password as the user types it; instead, it echoes
@c @samp{.}  for each character in the password.  If you want to apply
@c another character to hide the password, let-bind the variable
@c @code{read-hide-char} with that character.

Если @var{confirm} не-@code{nil}, требует ввода пароля дважды и оба
раза он должен быть одинаковым. Если они не совпали пользователю нужно
вводить пароль дальше, пока не будет введено два одинаковых пароля.

@c The optional argument @var{confirm}, if non-@code{nil}, says to read the
@c password twice and insist it must be the same both times.  If it isn't
@c the same, the user has to type it over and over until the last two
@c times match.

Не обязательный аргумент @var{defalt} задает пароль по умолчанию, который
будет возвращен если пользователь введет пустую строку. Если @var{default}
@code{nil} и пользователь ничего не ввел @code{read-passwd} вернет пустую
строку.

@c The optional argument @var{default} specifies the default password to
@c return if the user enters empty input.  If @var{default} is @code{nil},
@c then @code{read-passwd} returns the null string in that case.
@end defun

@node Minibuffer Commands
@section Команды Мини-буфера
@c @section Minibuffer Commands

  Раздел описывает некоторые важные команды используемые при
работе с мини-буфером.

@c   This section describes some commands meant for use in the
@c minibuffer.

@deffn Command exit-minibuffer
Команда выхода из активного мини-буфера. Как правило привязывается
к какой-то кнопке в локальной раскладке.

@c This command exits the active minibuffer.  It is normally bound to
@c keys in minibuffer local keymaps.
@end deffn

@deffn Command self-insert-and-exit
Команда выполняет выход из активного мини-буфера после вставки
последнего символа введенного с клавиатуры (находится в @code{last-command-event};
@pxref{Command Loop Info}).

@c This command exits the active minibuffer after inserting the last
@c character typed on the keyboard (found in @code{last-command-event};
@c @pxref{Command Loop Info}).
@end deffn

@deffn Command previous-history-element n
Команда заменяет содержимое мини-буфера значением @var{n} элемента истории
(считая от более нового к более старому).

@c This command replaces the minibuffer contents with the value of the
@c @var{n}th previous (older) history element.
@end deffn

@deffn Command next-history-element n
Команда заменяет содержимое мини-буфера значением @code{n} элементом
истории считая от текущей позиции к более новым.

@c This command replaces the minibuffer contents with the value of the
@c @var{n}th more recent history element.
@end deffn

@deffn Command previous-matching-history-element pattern n
Команда заменяет содержимое мини-буфера значением @var{n}
элемента (считая от нового к старому), который удовлетворяет
регулярному выражению @var{pattern}.

@c This command replaces the minibuffer contents with the value of the
@c @var{n}th previous (older) history element that matches @var{pattern} (a
@c regular expression).
@end deffn

@deffn Command next-matching-history-element pattern n
Команда заменяет содержимое мини-буфера значением @var{n} элемента
считаю от текущего к более новым элементам истории удовлетворяющего
регулярному выражения @var{pattern}.

@c This command replaces the minibuffer contents with the value of the
@c @var{n}th next (newer) history element that matches @var{pattern} (a
@c regular expression).
@end deffn

@deffn Command previous-complete-history-element n
Команда заменяет содержимое мини-буфера значением @var{n} элемента
считая от новых к старым которые дополняют содержимое уже введенного
текста мини-буфера.
This command replaces the minibuffer contents with the value of the
@var{n}th previous (older) history element that completes the current
contents of the minibuffer before the point.
@end deffn

@deffn Command next-complete-history-element n
Команда заменяет содержимое мини-буфера значением @var{n} элемента
считая от текущего элемента истории к более новым элемента,
которые дополняют содержимое уже введенного
текста мини-буфера.
@end deffn


@node Minibuffer Windows
@section Окна Мини-буфера
@c @section Minibuffer Windows
@cindex minibuffer windows

Функции в данном разделе предоставляют доступ к и выделение окон мини-буфера,
проверяет активность окон и управляют изменением размеров.

@c These functions access and select minibuffer windows, test whether they
@c are active and control how they get resized.

@defun active-minibuffer-window
Функция возвращает текущее активное окно мини-буфера, или
@code{nil} если такого нет.

@c This function returns the currently active minibuffer window, or
@c @code{nil} if there is none.
@end defun

@defun minibuffer-window &optional frame
@anchor{Definition of minibuffer-window}
Функция возвращает окно мини-буфера используемое для фрейма @var{frame}.
Если @var{frame} @code{nil}, используется текущий фрейм. Стоит отметить,
что окно мини-буфера используемое фреймом должно быть часть этого
фрейма---фрейм, который не имеет своего мини-буфера использует окно
мини-буфера другого фрейма.

@c This function returns the minibuffer window used for frame @var{frame}.
@c If @var{frame} is @code{nil}, that stands for the current frame.  Note
@c that the minibuffer window used by a frame need not be part of that
@c frame---a frame that has no minibuffer of its own necessarily uses some
@c other frame's minibuffer window.
@end defun

@defun set-minibuffer-window window
Функция задает @var{window} в качестве окна мини-буфера.
Данная функция нужна, когда нужно отобразить текст в окне мини-буфера
без использования обычных команд мини-буфера. Для стандартных команд
запроса данных через мини-буфер команда не нужна, так как все такие
команды начинаются с выбора окна мини-буфера соответствующего
текущему фрейму.

@c This function specifies @var{window} as the minibuffer window to use.
@c This affects where the minibuffer is displayed if you put text in it
@c without invoking the usual minibuffer commands.  It has no effect on
@c the usual minibuffer input functions because they all start by
@c choosing the minibuffer window according to the current frame.
@end defun

@c Emacs 19 feature
@defun window-minibuffer-p &optional window
Функция возвращает не-@code{nil} если @var{window} окно мини-буфера.

@c This function returns non-@code{nil} if @var{window} is a minibuffer
@c window.
По умолчанию @var{window} выбранное окно.
@c @var{window} defaults to the selected window.
@end defun

Не верно определять является ли окно окном мини-буфера сравнивая
его со значением @code{(minibuffer-window)}, потому что если
фреймов несколько окон мини-буфера тоже может быть несколько.

@c It is not correct to determine whether a given window is a minibuffer by
@c comparing it with the result of @code{(minibuffer-window)}, because
@c there can be more than one minibuffer window if there is more than one
@c frame.

@defun minibuffer-window-active-p window
Функция возвращает не-@code{nil} если @var{window} текущее
активное окно мини-буфера.
@c This function returns non-@code{nil} if @var{window} is the currently
@c active minibuffer window.
@end defun

Следующие два параметра определяют будет ли окно мини-буфера
автоматически изменять размер и насколько большим оно может стать.

@c The following two options control whether minibuffer windows are resized
@c automatically and how large they can get in the process.

@defopt resize-mini-windows
Параметр определяет будет ли окно мини-буфера автоматически
изменять размер. Значение по умолчанию @code{grow-only}, подразумевает
что мини-буфер будет автоматически расширяться, чтобы вместить отображаемый
текст и сжиматься до 1 строки, когда мини-буфер становится пустым.
Если значение @var{t}, Emacs будет расширять окно по высоте.
Если значение @code{nil}, размер автоматически не будет изменяться.
В случае @code{nil} размер может быть изменен соответствующими
командами (@pxref{Resizing Windows}) явно.

@c This option specifies whether minibuffer windows are resized
@c automatically.  The default value is @code{grow-only}, which means that
@c a minibuffer window by default expands automatically to accommodate the
@c text it displays and shrinks back to one line as soon as the minibuffer
@c gets empty.  If the value is @code{t}, Emacs will always try to fit the
@c height of a minibuffer window to the text it displays (with a minimum of
@c one line).  If the value is @code{nil}, a minibuffer window never
@c changes size automatically.  In that case the window resizing commands
@c (@pxref{Resizing Windows}) can be used to adjust its height.
@end defopt

@defopt max-mini-window-height
Параметр определяет максимальную высоту до который автоматически
может расшириться окно мини-буфера. Значение с плавающей точкой,
задает часть относительно размера фрейма, целое значение задает
максимальное количество строк. Значение по умолчанию 0.25.

@c This option provides a maximum height for resizing minibuffer windows
@c automatically.  A floating-point number specifies a fraction of the
@c frame's height; an integer specifies the maximum number of lines.  The
@c default value is 0.25.
@end defopt


@node Minibuffer Contents
@section Содержимое Мини-буфера
@c @section Minibuffer Contents
@cindex access minibuffer contents
@cindex minibuffer contents, accessing

  Функции для обращения к запросу и содержимому мини-буфера.
  @c These functions access the minibuffer prompt and contents.

@defun minibuffer-prompt
Функция возвращает строку запроса текущего активного мини-буфера.
Если активного мини-буфера нет, возвращается @code{nil}.

@c This function returns the prompt string of the currently active
@c minibuffer.  If no minibuffer is active, it returns @code{nil}.
@end defun

@defun minibuffer-prompt-end
Функция возвращает позицию конца запроса, если
мини-буфер активен. Иначе возвращается минимальная
корректная позиция буфера.

@c This function returns the current
@c position of the end of the minibuffer prompt, if a minibuffer is
@c current.  Otherwise, it returns the minimum valid buffer position.
@end defun

@defun minibuffer-prompt-width
Функция возвращает текущую ширину отображения запроса, если мини-буфер
активен. Иначе возвращается 0.

@c This function returns the current display-width of the minibuffer
@c prompt, if a minibuffer is current.  Otherwise, it returns zero.
@end defun

@defun minibuffer-contents
Функция возвращает содержимое мини-буфера доступное для редактирования
(в него входит все кроме запроса) в виде строки, если мини-буфер активен.
Иначе возвращается все содержимое текущего буфера.

@c This function returns the editable
@c contents of the minibuffer (that is, everything except the prompt) as
@c a string, if a minibuffer is current.  Otherwise, it returns the
@c entire contents of the current buffer.
@end defun

@defun minibuffer-contents-no-properties
Функция аналогична @code{minibuffer-contents}, за исключением того, что
не копирует текстовые свойства, только символы. @xref{Text Properties}.

@c This is like @code{minibuffer-contents}, except that it does not copy text
@c properties, just the characters themselves.  @xref{Text Properties}.
@end defun

@deffn Command delete-minibuffer-contents
Команда стирает все кроме запроса из мини-буфера, если мини-буфер
активный. Иначе стирается все содержимое текущего буфера.

@c This command erases the editable contents of the minibuffer (that is,
@c everything except the prompt), if a minibuffer is current.  Otherwise,
@c it erases the entire current buffer.
@end deffn

@node Recursive Mini
@section Рекурсивные Мини-буферы
@c @section Recursive Minibuffers
@cindex recursive minibuffers

Функции и переменные для работы с рекурсивными мини-буферами
(@pxref{Recursive Editing}).
@c   These functions and variables deal with recursive minibuffers
@c (@pxref{Recursive Editing}):

@defun minibuffer-depth
Функция возвращает не отрицательное число, определяющее
текущую глубину активации. Если мини-буфер не активен, возвращается 0.
@c This function returns the current depth of activations of the
@c minibuffer, a nonnegative integer.  If no minibuffers are active, it
@c returns zero.
@end defun

@defopt enable-recursive-minibuffers
Если значение данное переменной не-@code{nil}, можно выполнить
команды использующие мини-буфер такие как @code{find-file},
даже если мини-буфер уже активен. Такой вызов создает
еще один уровень рекурсивного редактирования для нового мини-буфера.
Мини-буферы других уровней редактирования не видны, пока пользователь
работает с одним из них.

@c If this variable is non-@code{nil}, you can invoke commands (such as
@c @code{find-file}) that use minibuffers even while the minibuffer window
@c is active.  Such invocation produces a recursive editing level for a new
@c minibuffer.  The outer-level minibuffer is invisible while you are
@c editing the inner one.

Если переменная @code{nil}, нельзя запустить еще один мини-буфер
пока активен текущий, даже переключившись в другое окно.

@c If this variable is @code{nil}, you cannot invoke minibuffer
@c commands when the minibuffer window is active, not even if you switch to
@c another window to do it.
@end defopt

@c Emacs 19 feature
Если символ команды имеет свойство @code{enable-recursive-minibuffers}
не-@code{nil}, тогда команда может использовать мини-буфер, даже
если будет запущена из мини-буфера. Данное свойство может быть задано
для команды при задании interactive формы (нужно задать
@code{enable-recursive-minibuffers} в @code{t}) (@pxref{Using Interactive}).
Например, так делается в @code{next-matching-history-element}.

@c If a command name has a property @code{enable-recursive-minibuffers}
@c that is non-@code{nil}, then the command can use the minibuffer to read
@c arguments even if it is invoked from the minibuffer.  A command can
@c also achieve this by binding @code{enable-recursive-minibuffers}
@c to @code{t} in the interactive declaration (@pxref{Using Interactive}).
@c The minibuffer command @code{next-matching-history-element} (normally
@c @kbd{M-s} in the minibuffer) does the latter.

@node Minibuffer Misc
@section Мини-буферы Дополнительно
@c @section Minibuffer Miscellany

@defun minibufferp &optional buffer-or-name
Функция возвращает не-@code{nil}, если @var{buffer-or-name}
мини-буфер. Если @var{buffer-or-name} не задано, проверяется текущий буфер.

@c This function returns non-@code{nil} if @var{buffer-or-name} is a
@c minibuffer.  If @var{buffer-or-name} is omitted, it tests the current
@c buffer.
@end defun

@defvar minibuffer-setup-hook
Обыкновенный перехватчик запускаемый при входе в мини-буфер. @xref{Hooks}.
@c This is a normal hook that is run whenever the minibuffer is entered.
@c @xref{Hooks}.
@end defvar

@defvar minibuffer-exit-hook
Обыкновенный перехватчик запускаемый при выходе из мини-буфера. @xref{Hooks}.
@c This is a normal hook that is run whenever the minibuffer is exited.
@c @xref{Hooks}.
@end defvar

@defvar minibuffer-help-form
@anchor{Definition of minibuffer-help-form}
Текущее значение данной переменной используется для локального
задания @code{help-form} в мини-буфере (@pxref{Help Functions}).

@c The current value of this variable is used to rebind @code{help-form}
@c locally inside the minibuffer (@pxref{Help Functions}).
@end defvar

@defvar minibuffer-scroll-window
@anchor{Definition of minibuffer-scroll-window}
Если значение данное переменной не-@code{nil}, оно должно
быть окном. Функция @code{scroll-other-window} будет прокручивать
именно это окно.

@c If the value of this variable is non-@code{nil}, it should be a window
@c object.  When the function @code{scroll-other-window} is called in the
@c minibuffer, it scrolls this window.
@end defvar

@defun minibuffer-selected-window
Функция возвращает окно, которое было выделено при входе в мини-буфер.
Если выбранное окно не окно мини-буфера, возвращается @code{nil}.

@c This function returns the window that was selected when the
@c minibuffer was entered.  If selected window is not a minibuffer
@c window, it returns @code{nil}.
@end defun

@defopt max-mini-window-height
Переменная определяет максимальную высоту до которой может
расширяться окно мини-буфера. Если значение число с плавающей точкой,
то оно соответствует части относительно высоты фрейма. Если значение целое,
то оно определяет максимальное количество строк.

@c This variable specifies the maximum height for resizing minibuffer
@c windows.  If a float, it specifies a fraction of the height of the
@c frame.  If an integer, it specifies a number of lines.
@end defopt

@vindex minibuffer-message-timeout
@defun minibuffer-message string &rest args
Функция временно отображает @var{string} в конце текста мини-буфера.
Временно означает в течении нескольких секунд или до следующего
события ввода. Количество секунда задается переменной
@code{minibuffer-message-timeout} (по умолчанию 2). Если @var{args}
не-@code{nil}, выводимое сообщение получается применением
@code{format-string} к @var{string} и @var{args}. @xref{Formatting Strings}.

@c This function displays @var{string} temporarily at the end of the
@c minibuffer text, for a few seconds, or until the next input event
@c arrives, whichever comes first.  The variable
@c @code{minibuffer-message-timeout} specifies the number of seconds to
@c wait in the absence of input.  It defaults to 2.  If @var{args} is
@c non-@code{nil}, the actual message is obtained by passing @var{string}
@c and @var{args} through @code{format-message}.  @xref{Formatting Strings}.
@end defun

@deffn Command minibuffer-inactive-mode
Основной режим используемый в интерактивных мини-буферах. Используется
раскладка @code{minibuffer-inactive-mode-map}. Может быть полезна
в случае мини-буфера в отдельном фрейме. @xref{Minibuffers And Frames}.

@c This is the major mode used in inactive minibuffers.  It uses
@c keymap @code{minibuffer-inactive-mode-map}.  This can be useful
@c if the minibuffer is in a separate frame.  @xref{Minibuffers and Frames}.
@end deffn
