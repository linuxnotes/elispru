@c -*- mode: texinfo; coding: utf-8 -*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1995, 1998-2017 Free Software Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Display
@chapter Emacs Дисплей
@c @chapter Emacs Display

  Данная глава описывает разные функции связанные с дисплеем(display, отображением), который
Emacs предоставляет пользователю.
@c   This chapter describes a number of features related to the display
@c that Emacs presents to the user.

@menu
* Refresh Screen::      Очистка экрана и перерисовка всего что на него выводится.
* Forcing Redisplay::   Принудительная перерисовка.
* Truncation::          Свертывание и оборачивание длинных строк текста.
* The Echo Area::       Отображение сообщений в нижней части экрана.
* Warnings::            Отображение предупреждений для пользователя.
* Invisible Text::      Скрывание части текста в буфере.
* Selective Display::   Скрывание части текста в буфере (старый способ).
* Temporary Displays::  Автоматически исчезающие дисплеи.
* Overlays::            Использование overlays, для скрывания части буфера.
* Size of Displayed Text::  Насколько большой отображаемый текст.
* Line Height::         Управление высотой строк.
* Faces::               Faces(начертания, шрифты) определяют графический стиль
                        для символов текста, гарнитур, цветов и т.д.
* Fringes::             Управления границами окна.
* Scroll Bars::         Упровление полосами прокрутки.
* Window Dividers::     Визуальное разделение окон.
* Display Property::    Включение специальных функций отображения.
* Images::              Отображение изображений в буферах Emacs.
* Xwidgets::            Отображение родных виджетов (native widgets) в буферах Emacs.
* Buttons::             Добавление кликабельных кнопок в буферы Emacs.
* Abstract Display::    Виджеты Emacs для Коллекций Объектов.
* Blinking::            Как Emacs показывает соответствующие открывающие скобки.
* Character Display::   Отображение отдельных символов в Emacs.
* Beeping::             Звуковые сигналы для пользователя.
* Window Systems::      Какая оконная система будет использоваться.
* Tooltips::            Отображение подсказок в Emacs.
* Bidirectional Display:: Отображение двунаправленных текстов, таких как
                            Арабский(Arabic) и Фарси(Farsi).
@end menu

@c @menu
@c * Refresh Screen::      Clearing the screen and redrawing everything on it.
@c * Forcing Redisplay::   Forcing redisplay.
@c * Truncation::          Folding or wrapping long text lines.
@c * The Echo Area::       Displaying messages at the bottom of the screen.
@c * Warnings::            Displaying warning messages for the user.
@c * Invisible Text::      Hiding part of the buffer text.
@c * Selective Display::   Hiding part of the buffer text (the old way).
@c * Temporary Displays::  Displays that go away automatically.
@c * Overlays::            Use overlays to highlight parts of the buffer.
@c * Size of Displayed Text::  How large displayed text is.
@c * Line Height::         Controlling the height of lines.
@c * Faces::               A face defines a graphics style for text characters:
@c                           font, colors, etc.
@c * Fringes::             Controlling window fringes.
@c * Scroll Bars::         Controlling scroll bars.
@c * Window Dividers::     Separating windows visually.
@c * Display Property::    Enabling special display features.
@c * Images::              Displaying images in Emacs buffers.
@c * Xwidgets::            Displaying native widgets in Emacs buffers.
@c * Buttons::             Adding clickable buttons to Emacs buffers.
@c * Abstract Display::    Emacs's Widget for Object Collections.
@c * Blinking::            How Emacs shows the matching open parenthesis.
@c * Character Display::   How Emacs displays individual characters.
@c * Beeping::             Audible signal to the user.
@c * Window Systems::      Which window system is being used.
@c * Tooltips::            Tooltip display in Emacs.
@c * Bidirectional Display:: Display of bidirectional scripts, such as
@c                              Arabic and Farsi.
@c @end menu

@node Refresh Screen
@section Очистка Экрана
@c @section Refreshing the Screen
@cindex refresh the screen
@cindex screen refresh

  Функция @code{redraw-frame} очищает и заново отрисовывает все содержимой
заданного фрейма (@pxref{Frames}). Действие полезно, если изображение
повреждено.

@c   The function @code{redraw-frame} clears and redisplays the entire
@c contents of a given frame (@pxref{Frames}).  This is useful if the
@c screen is corrupted.

@defun redraw-frame &optional frame
Функция очищает и заного отображает фрейм @var{frame}. Если @var{frame}
пропущено или nil, перерисовывается выбранный фрейм.

@c This function clears and redisplays frame @var{frame}.  If @var{frame}
@c is omitted or nil, it redraws the selected frame.
@end defun

  Еще более мощная функция @code{redraw-display}:
  @c Even more powerful is @code{redraw-display}:

@deffn Command redraw-display
Функция очищает и перерисовывает все видимые фреймы.
@c This function clears and redisplays all visible frames.
@end deffn

  В Emacs, обработка пользовательского ввода имеет приоритет над перерисовкой.
Если вызвать эту функцию когда есть пользовательский ввод, перерисовка не будет
выполнена сразу, а будет отложена и выполнена после того, как будет обработан
весь пользовательский ввод.

@c   In Emacs, processing user input takes priority over redisplay.  If
@c you call these functions when input is available, they don't redisplay
@c immediately, but the requested redisplay does happen
@c eventually---after all the input has been processed.

  На текстовых терминалах, приостановка и возобновление
(suspend and resume) Emacs, как правило обновляет содержимое экрана.
Некоторые эмуляторы терминала,
записывают содержимание для дисплей-ориентированных программ, таких
как Emacs и для обычного последовательного отображения. В случае использования
такого терминала, возможно появится желание блокировать перерисовку при
возобновлении.

@c   On text terminals, suspending and resuming Emacs normally also
@c refreshes the screen.  Some terminal emulators record separate
@c contents for display-oriented programs such as Emacs and for ordinary
@c sequential display.  If you are using such a terminal, you might want
@c to inhibit the redisplay on resumption.

@defopt no-redraw-on-reenter
@cindex suspend (cf. @code{no-redraw-on-reenter})
@cindex resume (cf. @code{no-redraw-on-reenter})
Переменная контролирует будет ли Emacs перерисовывать весь экран после
приостановки и восстановления. Если значение не-@code{nil}, перерисовка
выполнения не будет, если значение @code{nil}, то будет. Значение
по умолчанию @code{nil}.

@c This variable controls whether Emacs redraws the entire screen after it
@c has been suspended and resumed.  Non-@code{nil} means there is no need
@c to redraw, @code{nil} means redrawing is needed.  The default is @code{nil}.
@end defopt

@node Forcing Redisplay

@section Принудительная Перерисовка
@c @section Forcing Redisplay
@cindex forcing redisplay

  Как правило Emacs пытается выполнить перерисовку экрана во время
ожидания ввода. Следующие функции позволяют запросить немедленную
перерисовку, внутри Lisp кода, без ожидания ввода.

@c   Emacs normally tries to redisplay the screen whenever it waits for
@c input.  With the following function, you can request an immediate
@c attempt to redisplay, in the middle of Lisp code, without actually
@c waiting for input.

@defun redisplay &optional force
Функция пыатется немедленно выполнить перерисовку. Если не обязательный аргумент
@var{force}, не-@code{nil}, будет выполнена принудительная перерисовка, вместо
отложенное, если есть ожидающий обработки ввод.

@c This function tries immediately to redisplay.  The optional argument
@c @var{force}, if non-@code{nil}, forces the redisplay to be performed,
@c instead of being preempted if input is pending.

Функция возращает @code{t} если была выполнена попытка перерисовки, и
@code{nil} если нет. Значение @code{t} не означает, что перерисовка
была выполнена полностью, она могла быть отложена поступившим вводом.

@c The function returns @code{t} if it actually tried to redisplay, and
@c @code{nil} otherwise.  A value of @code{t} does not mean that
@c redisplay proceeded to completion; it could have been preempted by
@c newly arriving input.
@end defun

  Хотя @code{redisplay} пытается немедленно выполнить перерисовку,
функция не изменяет того, как Emacs решает какую часть фрейма перерисовывать.
В отличие от @code{redisplay} следующая функция задает отложенную перерисовку
определенных окон (как если бы в них изменилось все содержимое), но
не пытается немедленно выполнить перерисовку.

@c   Although @code{redisplay} tries immediately to redisplay, it does
@c not change how Emacs decides which parts of its frame(s) to redisplay.
@c By contrast, the following function adds certain windows to the
@c pending redisplay work (as if their contents had completely changed),
@c but does not immediately try to perform redisplay.

@defun force-window-update &optional object
Функция указывает выполнить перерисовку некоторым или всем окнам
при следующей перерисовке, выполняемой Emacs. Если @var{object} окно,
оно будет обновлено. Если @var{object} буфер или имя буфера, будут обновлены
все окна отображающие этот буфер. Если @var{object} @code{nil} (или не задано),
все окна будут обновлены.

@c This function forces some or all windows to be updated the next time
@c Emacs does a redisplay.  If @var{object} is a window, that window is
@c to be updated.  If @var{object} is a buffer or buffer name, all
@c windows displaying that buffer are to be updated.  If @var{object} is
@c @code{nil} (or omitted), all windows are to be updated.

функция не выполняет немедленную перерисовку;
This function does not do a redisplay immediately; Emacs does that as
it waits for input, or when the function @code{redisplay} is called.
@end defun

@defvar pre-redisplay-function
Функция запускается непосредственно перед перерисовкой. Функция вызывается
с одним аргументом, задающим множество окон, которые будут перерисованы.
Множетсво может быть @code{nil}, в этом случае подразумевается только
выделенное окно, или @code{t}, тогда будут обновлены все окна.

@c A function run just before redisplay.  It is called with one argument,
@c the set of windows to be redisplayed.  The set can be @code{nil},
@c meaning only the selected window, or @code{t}, meaning all the
@c windows.
@end defvar

@defvar pre-redisplay-functions
Данный перехватчик запускается непосредственно перед перерисовкой.
Он вызывается один раз в каждом окно которое перерисовывается, при этом
@code{current-buffer} устанавливается в буфер отображаемый в окне.

@c This hook is run just before redisplay.  It is called once in each
@c window that is about to be redisplayed, with @code{current-buffer} set
@c to the buffer displayed in that window.
@end defvar

@node Truncation
@section Сокращения
@c @section Truncation
@cindex line wrapping
@cindex line truncation
@cindex continuation lines
@cindex @samp{$} in display
@cindex @samp{\} in display

  Если строка текста выходит за правую границу окна, Emacs может @dfn{продолжить}
(@dfn{continue}) строку (продолжить ее отображение на следующей строке экрана), или
@dfn{сократить} (@dfn{truncate}) (ограничить выводом в одной строке экрана).
Дополнительные строки используемые дял отображения длинных текстовых
строк называются @dfn{продолжения} (@dfn{continuation}). Продолжения
не тоже самое что заполнения (filling); продолжения относятся только
к отображению на экране и не являются частью содержимого буфера. Разрыв
строки выполняется точно у правой границы окна, а не у границы слова.
@xref{Filling}.
(Прим. под скоращением подразумевается, что отображается только часть строки
помещаемая по ширине в окно, остальная часть не отображается, но если
сместить курсор, можно увидеть остальной текст).

@c   When a line of text extends beyond the right edge of a window, Emacs
@c can @dfn{continue} the line (make it wrap to the next screen
@c line), or @dfn{truncate} the line (limit it to one screen line).  The
@c additional screen lines used to display a long text line are called
@c @dfn{continuation} lines.  Continuation is not the same as filling;
@c continuation happens on the screen only, not in the buffer contents,
@c and it breaks a line precisely at the right margin, not at a word
@c boundary.  @xref{Filling}.

   На графическом дисплее, маленькие изображения стрелок в полосе границы окна
указывают на сокращения и продолжения строки (@pxref{Fringes}). В текстовых
терминалах, @samp{$} в самой правой колонке окна указывает на сокращение;
@samp{\} в самой правой колонке указывает на продолжение. (Таблица отображения
позволяет задать другие символы; @pxref{Display Tables}).

@c    On a graphical display, tiny arrow images in the window fringes
@c indicate truncated and continued lines (@pxref{Fringes}).  On a text
@c terminal, a @samp{$} in the rightmost column of the window indicates
@c truncation; a @samp{\} on the rightmost column indicates a line that
@c wraps.  (The display table can specify alternate characters to use
@c for this; @pxref{Display Tables}).

@defopt truncate-lines
Если данная локальная для буфера переменная не-@code{nil}, строки
которые выходят за правую границу окна будут сокращаться, иначе продолжаться.
В качестве особого исключения, переменная @code{truncate-partial-width-windows}
имеет более высокий приоритет в окнах @dfn{окна не полной ширины} (@dfn{partial-width})
(т.е. окнах которые не занимают всю ширину фрейма).

@c If this buffer-local variable is non-@code{nil}, lines that extend
@c beyond the right edge of the window are truncated; otherwise, they are
@c continued.  As a special exception, the variable
@c @code{truncate-partial-width-windows} takes precedence in
@c @dfn{partial-width} windows (i.e., windows that do not occupy the
@c entire frame width).
@end defopt

@defopt truncate-partial-width-windows
@cindex partial-width windows
Переменная контролиует сокращение строк в @dfn{частичной-ширины}
@dfn{partial-width} окнах.
Окно является partial-width окном, если оно не занимает всю
ширину фрейма (@pxref{Splitting Windows}). Если значение @code{nil},
сокращение строк определяется переменной @code{truncate-lines}
(см. выше). Если значение целое @var{n}, строки будут сокращаться,
если partial-width окно имеет меньше чем @var{n} колонок, игнорируя значение
@code{truncate-lines}; если partial-width окно имеет @var{n} или более
колонок, сокращение строк будет определяться переменной @code{truncate-lines}.
Для любого другого не-@code{nil} значения, строки будут сокращаться в
в не зависимости от значения @code{truncate-lines}.

@c This variable controls line truncation in @dfn{partial-width} windows.
@c A partial-width window is one that does not occupy the entire frame
@c width (@pxref{Splitting Windows}).  If the value is @code{nil}, line
@c truncation is determined by the variable @code{truncate-lines} (see
@c above).  If the value is an integer @var{n}, lines are truncated if
@c the partial-width window has fewer than @var{n} columns, regardless of
@c the value of @code{truncate-lines}; if the partial-width window has
@c @var{n} or more columns, line truncation is determined by
@c @code{truncate-lines}.  For any other non-@code{nil} value, lines are
@c truncated in every partial-width window, regardless of the value of
@c @code{truncate-lines}.
@end defopt

  Когда в окне используется горизонтальная прокрутка (@pxref{Horizonal Scrolling}),
используется сокращение строк.

@c   When horizontal scrolling (@pxref{Horizontal Scrolling}) is in use in
@c a window, that forces truncation.

@defvar wrap-prefix
Локальная для буфера переменная, если значение не-@code{nil},
оно определяет @dfn{wrap prefix} (@dfn{префикс переноса}),
который будет отображаться в начале каждой строки продолжения.
(Если строка сокращена, @code{wrap-prefix} использоваться не будет.)
Значение может быть строкой или изображением (@pxref{Other Display Specs}),
частью пробела, как задается с помощью свойств отображения, таких как @code{:width}
@code{:align-to} (@pxref{Specified Space}). Значение будет интерпретироваться
так же как текстовое свойство @code{display}. @xref{Display Property}.

@c If this buffer-local variable is non-@code{nil}, it defines a
@c @dfn{wrap prefix} which Emacs displays at the start of every
@c continuation line.  (If lines are truncated, @code{wrap-prefix} is
@c never used.)  Its value may be a string or an image (@pxref{Other
@c Display Specs}), or a stretch of whitespace such as specified by the
@c @code{:width} or @code{:align-to} display properties (@pxref{Specified
@c Space}).  The value is interpreted in the same way as a @code{display}
@c text property.  @xref{Display Property}.

Префикс переноса так же может быть задан для регионов текста, используя
текстовое свойство @code{wrap-prefix} или свойство оверлея. Данные свойства
имеет приоритет по отношению к переменной @code{wrap-prefix}.
@xref{Special Properties}.

@c A wrap prefix may also be specified for regions of text, using the
@c @code{wrap-prefix} text or overlay property.  This takes precedence
@c over the @code{wrap-prefix} variable.  @xref{Special Properties}.
@end defvar

@defvar line-prefix
Если данная локальная для буфера переменная не-@code{nil}, она
определяет @dfn{префикс строки} (@dfn{line prefix}), который Emacs
отображает в начале каждой не-продолжающейся строки. Значение может быть
строкой или изображением (@pxref{Other Display Specs}), или частью пробела,
как задается с помощью свойств отображения, таких как @code{:width}
@code{:align-to} (@pxref{Specified Space}). Значение будет интерпретироваться
так же как текстовое свойство @code{display}. @xref{Display Property}.

@c If this buffer-local variable is non-@code{nil}, it defines a
@c @dfn{line prefix} which Emacs displays at the start of every
@c non-continuation line.  Its value may be a string or an image
@c (@pxref{Other Display Specs}), or a stretch of whitespace such as
@c specified by the @code{:width} or @code{:align-to} display properties
@c (@pxref{Specified Space}).  The value is interpreted in the same way
@c as a @code{display} text property.  @xref{Display Property}.

Префикс строки так же может быть задан для регионов текста, используя
текстовое свойство @code{wrap-prefix} или свойство оверлея. Данные свойства
имеет приоритет по отношению к переменной @code{дшту-prefix}.
@xref{Special Properties}.

@c A line prefix may also be specified for regions of text using the
@c @code{line-prefix} text or overlay property.  This takes precedence
@c over the @code{line-prefix} variable.  @xref{Special Properties}.
@end defvar

@ignore
  If your buffer contains only very short lines, you might find it
advisable to set @code{cache-long-scans} to @code{nil}.

@defvar cache-long-scans
If this variable is non-@code{nil} (the default), various indentation
and motion functions, and Emacs redisplay, cache the results of
scanning the buffer, and consult the cache to avoid rescanning regions
of the buffer unless they are modified.

Turning off the cache speeds up processing of short lines somewhat.

This variable is automatically buffer-local in every buffer.
@end defvar
@end ignore

@node The Echo Area
@section Эхо обсласть
@c @section The Echo Area
@cindex error display
@cindex echo area

@c FIXME: Why not use @xref{Minibuffers} directly?  --xfq
  @dfn{эхо область} (@dfn{echo area}) используется для отображения сообщений об
ошибках (@pxref{Errors}), сообщений созданных с помощью примитива @code{message},
и для повторения(отображения) нажатий клавиш. Эхо область не тоже
самое, что мини-буффер, не смотря на то, что фактически мини-буффер
появляется (если активен) там же, где и эхо область. @xref{Minibuffer,, The Minibuffer,
emacs, The GNU Emacs Manual}.

@c   The @dfn{echo area} is used for displaying error messages
@c (@pxref{Errors}), for messages made with the @code{message} primitive,
@c and for echoing keystrokes.  It is not the same as the minibuffer,
@c despite the fact that the minibuffer appears (when active) in the same
@c place on the screen as the echo area.  @xref{Minibuffer,, The
@c Minibuffer, emacs, The GNU Emacs Manual}.

  Отдельно от функций описанных в данном разделе, Lisp объекты
можно печатать в эхо области путем задания @code{t} в качестве
потока вывода. @xref{Output Streams}.

@c   Apart from the functions documented in this section, you can print
@c Lisp objects to the echo area by specifying @code{t} as the output
@c stream.  @xref{Output Streams}.

@menu
* Displaying Messages:: Явное отображение текста в эхо области.
* Progress::            Показ прогресса выполнения длительной операции.
* Logging Messages::    Вывод сообщения в эхо область является простым видом журнала
                              для пользователя.
* Echo Area Customization:: Управление эхо областью.
@end menu

@c @menu
@c * Displaying Messages:: Explicitly displaying text in the echo area.
@c * Progress::            Informing user about progress of a long operation.
@c * Logging Messages::    Echo area messages are logged for the user.
@c * Echo Area Customization:: Controlling the echo area.
@c @end menu

@node Displaying Messages
@subsection Отображение сообщений в Эхо Области
@c @subsection Displaying Messages in the Echo Area
@cindex display message in echo area

  Данный раздел описывает стандартные функции для отображения сообщений
в эхо области.

@c   This section describes the standard functions for displaying
@c messages in the echo area.

@defun message format-string &rest arguments
Функция отображает сообщение в эхо области. @var{format-string}
строка формата, @var{arguments} объекты для подстановки согласно
строке формата, так же как это делается в функции @code{format-message}
(@pxref{Formatting Strings}). Полученная после форматирования строка отображается
в эхо области. Если отображаемая строка имеет тексовое свойство @code{face},
строка отображается с заданными шрифтами (@pxref{Faces}).
Так же выводимая строка добавляется в буфер @file{*Messages*}, но уже без
текстовых свойств (@pxref{Logging Messages}).

@c This function displays a message in the echo area.
@c @var{format-string} is a format string, and @var{arguments} are the
@c objects for its format specifications, like in the @code{format-message}
@c function (@pxref{Formatting Strings}).  The resulting formatted string
@c is displayed in the echo area; if it contains @code{face} text
@c properties, it is displayed with the specified faces (@pxref{Faces}).
@c The string is also added to the @file{*Messages*} buffer, but without
@c text properties (@pxref{Logging Messages}).

Переменная @code{text-quoting-style} определяет какие кавычки генерируются;
@xref{Keys in Documentation}. Вызов использющий формат вроде
@t{"Missing `%s'"} обратной кавычкой и апострофом, обычно приводит
к генерации сообщения вида @t{"Missing ‘foo’}, с соответствующим
закругленными кавысками. Вызовом формата аналогичного
@t{"Missing '%s'"}, только с апострофами, как правило приводит к
генерации сообщения аналогичного @t{"Missing ’foo’"}, только с закрывающими
закругленными кавычками, что является сравнительно редким стилем
в Английском.

@c The @code{text-quoting-style} variable controls what quotes are
@c generated; @xref{Keys in Documentation}.  A call using a format like
@c @t{"Missing `%s'"} with grave accents and apostrophes typically
@c generates a message like @t{"Missing ‘foo’"} with matching curved
@c quotes.  In contrast, a call using a format like @t{"Missing '%s'"}
@c with only apostrophes typically generates a message like @t{"Missing
@c ’foo’"} with only closing curved quotes, an unusual style in English.

В пакетном(batch) режиме сообщения печатаются в стандартный
потом ошибок (после сообщения выполняется перевод строки).

@c In batch mode, the message is printed to the standard error stream,
@c followed by a newline.

Когда @code{inhibit-message} не-@code{nil}, сообщения в эхо области показываться
не будут, но сохранения в журнала сообщений в @smap{*Messages*} продолжится.

@c When @code{inhibit-message} is non-@code{nil}, no message will be displayed
@c in the echo area, it will only be logged to @samp{*Messages*}.

Если @var{format-string} @code{nil}, или пустая строка, @code{message}
просто очистит эхо область; и в случае если эхо область была
автоматически расширена, то она возвращается к своему обычному размеру.
Если есть активный мини-буфер, выполняется немедленное возвращение
содержимого мини-буфера.

@c If @var{format-string} is @code{nil} or the empty string,
@c @code{message} clears the echo area; if the echo area has been
@c expanded automatically, this brings it back to its normal size.  If
@c the minibuffer is active, this brings the minibuffer contents back
@c onto the screen immediately.

@example
@group
(message "Reverting `%s'..." (buffer-name))
 @print{} Reverting ‘subr.el’...
@result{} "Reverting ‘subr.el’..."
@end group

@group
---------- Echo Area ----------
Reverting ‘subr.el’...
---------- Echo Area ----------
@end group
@end example

Чтобы автоматически показать сообщение в эхо области или в поднимаемом
буфере (pop-buffer), зависит от размера, стоит использовать функцию
@code{display-message-or-buffer} (см.ниже).

@c To automatically display a message in the echo area or in a pop-buffer,
@c depending on its size, use @code{display-message-or-buffer} (see below).

@strong{Внимание}: если нужно использовать свою строку сообщения
дословно, просто запись @code{(message @var{string}} может не сработать,
так как если строка содержит символы @samp{%}, @samp{`} @samp{'}
она может быть отформатирована не так как нужно. Для такого
случая стоит использовать запись @code{(message "%s" @var{string})}.

@c @strong{Warning:} If you want to use your own string as a message
@c verbatim, don't just write @code{(message @var{string})}.  If
@c @var{string} contains @samp{%}, @samp{`}, or @samp{'} it may be
@c reformatted, with undesirable results.  Instead, use @code{(message
@c "%s" @var{string})}.
@end defun

@defvar inhibit-message
Когда переменная не-@code{nil}, @var{message} и связанные функции не будут
использовать Эхо область для отображения сообщений.

@c When this variable is non-@code{nil}, @code{message} and related functions
@c will not use the Echo Area to display messages.
@end defvar

@defmac with-temp-message message &rest body
Макрос отображает временно сообщение в эхо области, пока выполняется
@var{body}. То есть выполняется отображение @var{message}, выполняется
тело @var{body}, после чего востанавливается предыдущее значение в
эхо области и возвращается значени последней формы в @var{body}.

@c This construct displays a message in the echo area temporarily, during
@c the execution of @var{body}.  It displays @var{message}, executes
@c @var{body}, then returns the value of the last body form while restoring
@c the previous echo area contents.
@end defmac

@defun message-or-box format-string &rest arguments
Функция отображает сообщение аналогично @code{message}, но отобразить
его может в диалоговом окне вместо эхо области. Если функция вызывается
в команде которая вызвана по события мыши---точнее, если @code{last-nonmenu-event}
(@pxref{Command Loop Info} @code{nil} или список---тогда используется
диалоговое окно или всплывающее меню для отображения сообщения. Иначе,
используется эхо область. (Критерий такой же как используется в @code{y-or-n-p}
для аналогичного решения, см. @ref{Yes-or-No Queries}.)

@c This function displays a message like @code{message}, but may display it
@c in a dialog box instead of the echo area.  If this function is called in
@c a command that was invoked using the mouse---more precisely, if
@c @code{last-nonmenu-event} (@pxref{Command Loop Info}) is either
@c @code{nil} or a list---then it uses a dialog box or pop-up menu to
@c display the message.  Otherwise, it uses the echo area.  (This is the
@c same criterion that @code{y-or-n-p} uses to make a similar decision; see
@c @ref{Yes-or-No Queries}.)

Можно явно указать, какой вид диалога использовать, задав
@code{last-nonmenu-event} соответствующее значение, перед вызовом.

@c You can force use of the mouse or of the echo area by binding
@c @code{last-nonmenu-event} to a suitable value around the call.
@end defun

@defun message-box format-string &rest arguments
@anchor{message-box}
Функция показывает сообщения аналогично @code{message}, но использует
диалоговое окно (или всплывающее меню), если это возможно.
Если показ диалогового окна не возможен, из-за того, что не поддерживается
терминалом, тогда @code{message-box} использует эхо область, как
@code{message}.

@c This function displays a message like @code{message}, but uses a dialog
@c box (or a pop-up menu) whenever that is possible.  If it is impossible
@c to use a dialog box or pop-up menu, because the terminal does not
@c support them, then @code{message-box} uses the echo area, like
@c @code{message}.
@end defun

@defun display-message-or-buffer message &optional buffer-name action frame
Функция отображает сообщение @var{message}, которое может быть строкой
или буфером. Если сообщение короче чем максимальная высота эхо области,
что задано в @code{max-mini-window-height}, сообщение отображается в эхо
области, используя @var{message}. Иначе используется @code{display-buffer}
для показа сообщения во всплывающем буфере.

@c This function displays the message @var{message}, which may be either a
@c string or a buffer.  If it is shorter than the maximum height of the
@c echo area, as defined by @code{max-mini-window-height}, it is displayed
@c in the echo area, using @code{message}.  Otherwise,
@c @code{display-buffer} is used to show it in a pop-up buffer.

Функция возвращает строку если сообщение показывается в эхо
области, или окно используемое для отображения буфера.

@c Returns either the string shown in the echo area, or when a pop-up
@c buffer is used, the window used to display it.

Если @var{message} строка, тогда не обязательный аргумент @var{buffer-name}
используется как имя буфера в котором будет отображаться сообщения
если оно не помещается в эхо область, по умолчанию используется
@file{*Message*}. В случае если @var{message} строка и она показывается
в эхо области, параметр не указывает не то, что содержимое все равно должно быть
вставленно в буфер.

@c If @var{message} is a string, then the optional argument
@c @var{buffer-name} is the name of the buffer used to display it when a
@c pop-up buffer is used, defaulting to @file{*Message*}.  In the case
@c where @var{message} is a string and displayed in the echo area, it is
@c not specified whether the contents are inserted into the buffer anyway.

Не обязательный аргумент @var{action} и @var{frame}, означают тоже
что и в @code{display-buffer}, и используются только если
выполняется отображение в буфере.

@c The optional arguments @var{action} and @var{frame} are as for
@c @code{display-buffer}, and only used if a buffer is displayed.
@end defun

@defun current-message
Функция возвращает текущее соощение, которое отображается в эхо
области, или @code{nil} если в эхо области ничего не отображается.

@c This function returns the message currently being displayed in the
@c echo area, or @code{nil} if there is none.
@end defun

@node Progress
@subsection Отображение Прогресса Операции
@c @subsection Reporting Operation Progress
@cindex progress reporting

  Когда операция требует некоторого времени для завершения, правильно
показывать пользователю, что идет прогресс. Это позволяет пользователю
оценить оставшееся время и явно увидеть, что Emacs занят работой, а не
завис. @dfn{progress reporter} (@dfn{индикатор прогресса}) предоставляет
удобный способ показать прогресс.

@c   When an operation can take a while to finish, you should inform the
@c user about the progress it makes.  This way the user can estimate
@c remaining time and clearly see that Emacs is busy working, not hung.
@c A convenient way to do this is to use a @dfn{progress reporter}.

  Ниже рабочий пример, который однако не делает ничего полезного.
  Here is a working example that does nothing useful:

@smallexample
(let ((progress-reporter
       (make-progress-reporter "Collecting mana for Emacs..."
                               0  500)))
  (dotimes (k 500)
    (sit-for 0.01)
    (progress-reporter-update progress-reporter k))
  (progress-reporter-done progress-reporter))
@end smallexample

@defun make-progress-reporter message &optional min-value max-value current-value min-change min-time
Функция создает и возвращает объект индикатора прогресса, который
нужно использовать в качестве аргумент для других функций, описанных
ниже. Идея заключается в том, чтобы заранее вычислить как можно
больше данных, чтобы индикатор прогресса был очень быстрым.

@c This function creates and returns a progress reporter object, which
@c you will use as an argument for the other functions listed below.  The
@c idea is to precompute as much data as possible to make progress
@c reporting very fast.

Когда индикатор прогресса впоследствеии используется, он отображает
сообщение @var{message} в эхо области, за которым показывает процент
выполнения. @var{message} обрабатывается как строка. Если нужно
чтобы @var{message} зависело например, от имени файла, можно использовать
@code{format-message} перед вызовом функции.

@c When this progress reporter is subsequently used, it will display
@c @var{message} in the echo area, followed by progress percentage.
@c @var{message} is treated as a simple string.  If you need it to depend
@c on a filename, for instance, use @code{format-message} before calling this
@c function.

Аргументы @var{min-value} и @var{max-value} должны быть числами
означающими начальное и конечное состояние операции. Например, для
операции, которая выполняет сканирование буфера, стоит установить
использовать значения @code{point-min} и @code{point-max} соответственно.
@var{max-value} должно быть больше чем @var{min-value}.

@c The arguments @var{min-value} and @var{max-value} should be numbers
@c standing for the starting and final states of the operation.  For
@c instance, an operation that scans a buffer should set these to the
@c results of @code{point-min} and @code{point-max} correspondingly.
@c @var{max-value} should be greater than @var{min-value}.

Кроме того можно установить @var{min-value} и @var{max-value} в
@code{nil}. В этом случае, индикатор прогресса не показывает
процент выполнения, а показывает ``вертушку'' (``spinner''), который
проворачивает полоску при каждом обновлении индикатора прогресса.

@c Alternatively, you can set @var{min-value} and @var{max-value} to
@c @code{nil}.  In that case, the progress reporter does not report
@c process percentages; it instead displays a ``spinner'' that rotates a
@c notch each time you update the progress reporter.

Если @var{min-value} и @var{max-value} числа, можно задать числовое
значение @var{current-value}, начального состояния прогресса, иначе
будет использоваться @var{min-value}.

@c If @var{min-value} and @var{max-value} are numbers, you can give the
@c argument @var{current-value} a numerical value specifying the initial
@c progress; if omitted, this defaults to @var{min-value}.

Оставшиеся аргументы управляют скоростью обновления эхо области.
Индикатор прогресса будет ждать минимум @var{min-change} процентов выполнения
операции перед показом следующего сообщения, по умолчанию
используется один процент. @var{min-time} задает минимальное время в секундах
между последовательными выводами информации; по умолчанию используется
0.2 секунды. (На некоторых операционных системах, индикатор прогресса
может обрабатывать дробные числа интервала с разной точностью).

@c The remaining arguments control the rate of echo area updates.  The
@c progress reporter will wait for at least @var{min-change} more
@c percents of the operation to be completed before printing next
@c message; the default is one percent.  @var{min-time} specifies the
@c minimum time in seconds to pass between successive prints; the default
@c is 0.2 seconds.  (On some operating systems, the progress reporter may
@c handle fractions of seconds with varying precision).

Функция вызывает @code{progress-reporter-update}, поэтому первое сообщение выводится
сразу.

@c This function calls @code{progress-reporter-update}, so the first
@c message is printed immediately.
@end defun

@defun progress-reporter-update reporter &optional value
Функция выполняет основную работу индикатора прогресса операции.
Функция отображает сообщение индикатора @var{reporter}, за которым
показывает процент выполнения заданный значением @var{value}. Если
процент 0, или достаточно близко к @var{min-change} и @var{min-time},
тогда он исключается из вывода.

@c This function does the main work of reporting progress of your
@c operation.  It displays the message of @var{reporter}, followed by
@c progress percentage determined by @var{value}.  If percentage is zero,
@c or close enough according to the @var{min-change} and @var{min-time}
@c arguments, then it is omitted from the output.

@var{reporter} должен быть результатом вызова @code{meka-progress-reporter}.
@var{value} задает текущее состояние операции и должно быть между
значениями @var{min-value} и @var{max_value} (включительно),
используемыми в соотвствующем вызове @code{make-progress-reporter}.
Например, если выполняется сканирование буфера,
тогда @var{value} должно быть результатом вызова @code{point}.

@c @var{reporter} must be the result of a call to
@c @code{make-progress-reporter}.  @var{value} specifies the current
@c state of your operation and must be between @var{min-value} and
@c @var{max-value} (inclusive) as passed to
@c @code{make-progress-reporter}.  For instance, if you scan a buffer,
@c then @var{value} should be the result of a call to @code{point}.

This function respects @var{min-change} and @var{min-time} as passed
to @code{make-progress-reporter} and so does not output new messages
on every invocation.  It is thus very fast and normally you should not
try to reduce the number of calls to it: resulting overhead will most
likely negate your effort.
@end defun

@defun progress-reporter-force-update reporter &optional value new-message
Функция аналогична @code{progress-reporter-update}, за исключением того, что
она безусловно печатает сообщение в эхо области.

@c This function is similar to @code{progress-reporter-update} except
@c that it prints a message in the echo area unconditionally.

Первые два аргумента имеют тоже значение, что и в
@code{progress-reporter-update}. Не обязательный @var{new-message}
позволяет изменить сообщение @var{reporter}. Так как данная функция
всегда обновляет эхо область, такое изменение сразу будет показано
пользователю.

@c The first two arguments have the same meaning as for
@c @code{progress-reporter-update}.  Optional @var{new-message} allows
@c you to change the message of the @var{reporter}.  Since this function
@c always updates the echo area, such a change will be immediately
@c presented to the user.
@end defun

@defun progress-reporter-done reporter
Функция должна вызываться когда завершается операция. Функция печатает
сообщения индикатора прогресса @var{reporter} за которым следует @samp{done}
в эхо области.

@c This function should be called when the operation is finished.  It
@c prints the message of @var{reporter} followed by word @samp{done} in the
@c echo area.

Нужно всегда вызывать эту функцию и не ждать что
@code{progress-reporter-update} напечатает @samp{100%}. Во первых,
такое может никогда не напечаться, для чего есть много причин.
Во вторях, @samp{done} является более явным.

@c You should always call this function and not hope for
@c @code{progress-reporter-update} to print @samp{100%}.  Firstly, it may
@c never print it, there are many good reasons for this not to happen.
@c Secondly, @samp{done} is more explicit.
@end defun

@defmac dotimes-with-progress-reporter (var count [result]) message body@dots{}
Удобный макрос, работающий аналогично @code{dotimes}, но
дополнительно сообщаяющий о прогрессе выполнения, используя выше-описанные
функции. Макрос позволяет сократить написание текста.

@c This is a convenience macro that works the same way as @code{dotimes}
@c does, but also reports loop progress using the functions described
@c above.  It allows you to save some typing.

Переписать пример в начале с помощью этого макроса можно следующим
образом:
@c You can rewrite the example in the beginning of this node using
@c this macro this way:

@example
(dotimes-with-progress-reporter
    (k 500)
    "Collecting some mana for Emacs..."
  (sit-for 0.01))
@end example
@end defmac

@node Logging Messages
@subsection Запись Сообщений в @file{*Messages*}
@c @subsection Logging Messages in @file{*Messages*}
@cindex logging echo-area messages

  Почти все соощения отображаемые в эхо области так же сохраняются в
буфере @file{*Messages*}, чтобы пользователь мог при необходимости
их посмотреть после показа. В буфер попадают все сообщения которые
выводятся с помощью @code{message}. По умолчанию, буфер только-для-чтения
и использует основной режим @code{messages-buffer-mode}. Ничто не мешает пользователю
удалить буфер @file{*Messages*}, тогда он будет заново создан при
следующем выводе сообщения. Любой Lisp код, которому требуется доступ
к буферу @file{*Messages*} напрямую и которому требуется гарантия, что
буфер существует должен использовать функцию @code{messages-buffer}.

@c   Almost all the messages displayed in the echo area are also recorded
@c in the @file{*Messages*} buffer so that the user can refer back to
@c them.  This includes all the messages that are output with
@c @code{message}.  By default, this buffer is read-only and uses the major
@c mode @code{messages-buffer-mode}.  Nothing prevents the user from
@c killing the @file{*Messages*} buffer, but the next display of a message
@c recreates it.  Any Lisp code that needs to access the
@c @file{*Messages*} buffer directly and wants to ensure that it exists
@c should use the function @code{messages-buffer}.

@defun messages-buffer
Функция возвращает буфер @file{*Messages*}. Если буфер не существует,
функция создает его, и активирует в нем основной режим @coe{messages-buffer-mode}.

@c This function returns the @file{*Messages*} buffer.  If it does not
@c exist, it creates it, and switches it to @code{messages-buffer-mode}.
@end defun

@defopt message-log-max
Переменная задает количество хранимым в @file{*Messages*} сообщений.
Если значение @code{t}, то ограничения нет. Если значение @code{nil},
то сохранения сообщений нет. Ниже пример того, как вывести сообщение, но
отключить его сохранения в буфер @file{*Messages*}:

@c This variable specifies how many lines to keep in the @file{*Messages*}
@c buffer.  The value @code{t} means there is no limit on how many lines to
@c keep.  The value @code{nil} disables message logging entirely.  Here's
@c how to display a message and prevent it from being logged:

@example
(let (message-log-max)
  (message @dots{}))
@end example
@end defopt

  Чтобы сделать @file{*Messages*} (прим. посколько данный файл содержит
сообщения выводитмые в эхо область, уместно его называть журналом или логом,
а функции функциями журналирования или лога (от logging)).
более удобным для пользователя,
функции записи объединяют одинаковые последовательные записи. Кроме того
в следующих двух случаях объединяются связанные последовательные сообщения:
вопрос и последующий ответ на него, и последовательнсоти сообщений прогресса.

@c   To make @file{*Messages*} more convenient for the user, the logging
@c facility combines successive identical messages.  It also combines
@c successive related messages for the sake of two cases: question
@c followed by answer, and a series of progress messages.

  Впрос с последующим ответом состоит из двух сообщений, как
например создаваемый функцией @code{y-or-n-p}: первое
@samp{@var{question}}, и второе @samp{@var{question}...@var{answer}}.
Поскольку первое сообщение не содержит информации, которой нет
во втором сообщении, при записи в файл @file{*Messages*} (журналирование, logging)
второго сообщения, первое сообщение удаляется из журнала.

@c   A question followed by an answer has two messages like the
@c ones produced by @code{y-or-n-p}: the first is @samp{@var{question}},
@c and the second is @samp{@var{question}...@var{answer}}.  The first
@c message conveys no additional information beyond what's in the second,
@c so logging the second message discards the first from the log.

  Последовательности сообщений програсса представляют собой последовательные
сообщения, как например при выполнении @code{make-progress-reporter}. Они имеют
форму @samp{@var{base}...@var{how-far}}, где @var{base} не меняется, в отличие
от @var{how-far}. Запись каждого следующего сообщения прогресса,
удаляет предыдущее, если они идут последовательно.

@c   A series of progress messages has successive messages like
@c those produced by @code{make-progress-reporter}.  They have the form
@c @samp{@var{base}...@var{how-far}}, where @var{base} is the same each
@c time, while @var{how-far} varies.  Logging each message in the series
@c discards the previous one, provided they are consecutive.

  Функции @code{make-progress-reporter} и @code{y-or-n-p}
не деляют ничего, чтобы работало комбинирование сообщений. Комбинирование
срабатывает как только записываются соощения, которые имеют
общий прфикс окончивающийся на @samp{...}.

@c   The functions @code{make-progress-reporter} and @code{y-or-n-p}
@c don't have to do anything special to activate the message log
@c combination feature.  It operates whenever two consecutive messages
@c are logged that share a common prefix ending in @samp{...}.

@node Echo Area Customization
@subsection Настройка Эхо Области
@c @subsection Echo Area Customization
@cindex echo area customization

  Следующие переменные управляют работой эхо области.
  @c These variables control details of how the echo area works.

@defvar cursor-in-echo-area
Переменная определяет где будет находится курсор, когда сообщение
отображается в эхо области. Если значение не-@code{nil}, тогда
курсор будет отображаться в конце сообщения. Иначе, курсор будет
оставаться в точке курсора---вне эхо области.

@c This variable controls where the cursor appears when a message is
@c displayed in the echo area.  If it is non-@code{nil}, then the cursor
@c appears at the end of the message.  Otherwise, the cursor appears at
@c point---not in the echo area at all.

Как правило значение, @code{nil}; Lisp программы могу устанавливают
значение в @code{t} на короткое время.

@c The value is normally @code{nil}; Lisp programs bind it to @code{t}
@c for brief periods of time.
@end defvar

@defvar echo-area-clear-hook
Обыкновенный перехватчик запускаемый, когда очищается эхо область---
при вызове @code{(message nil)} или по любой другой причине.

@c This normal hook is run whenever the echo area is cleared---either by
@c @code{(message nil)} or for any other reason.
@end defvar

@defopt echo-keystrokes
Переменная определяет как много времени должно пройти перед тем
как символы команды будут показаны в эхо области. Значение должно быть
числом, и задавать количество секунд, который выполняется ожидание перед
выводом в эхо область. Если пользователь вводит
префикс последовательность (такую как @kbd{C-x}) и потом ничего не вводит
заданное количество секунд, префикс последовательность будет отображена
в эхо области. (Если вывод в эхо начался, выводятся все подпоследовательности
для текущей последовательности).

@c This variable determines how much time should elapse before command
@c characters echo.  Its value must be a number, and specifies the
@c number of seconds to wait before echoing.  If the user types a prefix
@c key (such as @kbd{C-x}) and then delays this many seconds before
@c continuing, the prefix key is echoed in the echo area.  (Once echoing
@c begins in a key sequence, all subsequent characters in the same key
@c sequence are echoed immediately.)

Если значение ноль, команды не выводятся в эхо область.
@c If the value is zero, then command input is not echoed.
@end defopt

@defvar message-truncate-lines
Обычно, отображение длинных сообщений растягивает эхо область, так
чтобы отображалось все сообщение. Но если переменная @code{message-truncate-lines}
не-@code{nil}, эхо область не будет растягиваться, а сообщения будут
сокращаться, чтобы в ней уместиться.

@c Normally, displaying a long message resizes the echo area to display
@c the entire message.  But if the variable @code{message-truncate-lines}
@c is non-@code{nil}, the echo area does not resize, and the message is
@c truncated to fit it.
@end defvar

  Переменная @code{max-mini-window-height}, задает
максимальную высоту для окна мини-буфера, а так же влияет на
эхо область (которая является специальным окном мини-буфера;
@pxref{Minibuffer Misc}).

@c   The variable @code{max-mini-window-height}, which specifies the
@c maximum height for resizing minibuffer windows, also applies to the
@c echo area (which is really a special use of the minibuffer window;
@c @pxref{Minibuffer Misc}).

@node Warnings
@section Предупреждения
@c @section Reporting Warnings
@cindex warnings

  @dfn{Предупреждения} (@dfn{Warnings}) возможно программ информировать
пользователя о возможных проблемах, но при это продолжать работать.

@c   @dfn{Warnings} are a facility for a program to inform the user of a
@c possible problem, but continue running.

@menu
* Warning Basics::      Концепция предупреждений и функции о них сообщающие.
* Warning Variables::   Программные переменные для настройки предупреждений.
* Warning Options::     Пользовательские переменные для настройки предупреждений.
* Delayed Warnings::    Откладывание показа предупреждений до завершения команды.
@end menu

@c @menu
@c * Warning Basics::      Warnings concepts and functions to report them.
@c * Warning Variables::   Variables programs bind to customize their warnings.
@c * Warning Options::     Variables users set to control display of warnings.
@c * Delayed Warnings::    Deferring a warning until the end of a command.
@c @end menu

@node Warning Basics
@subsection Предупреждения Основное
@c @subsection Warning Basics
@cindex severity level

  Каждое предупреждение имеет текстовое сообщение, которое обьясняет
проблему для пользователя, и @dfn{уровень опасности} (@dfn{severity level})
который задается символом. Ниже перечислены возможные уровни опасности,
в порядке уменьшения опасности с их описанием:

@c   Every warning has a textual message, which explains the problem for
@c the user, and a @dfn{severity level} which is a symbol.  Here are the
@c possible severity levels, in order of decreasing severity, and their
@c meanings:

@table @code
@item :emergency
Проблема, которая серьезно ухудшит работу Emacs, если быстро не
уделить ей внимание.

@c A problem that will seriously impair Emacs operation soon
@c if you do not attend to it promptly.
@item :error
Сообщение о не верных данных или сотоянии, которые не верны.
@c A report of data or circumstances that are inherently wrong.
@item :warning
Сообщение о денных или ситуации, которые сами не по себе не являются
ошибочными, но вызывают подозрение, что проблема все-таки есть.
@c A report of data or circumstances that are not inherently wrong, but
@c raise suspicion of a possible problem.
@item :debug
Информационное сообощение, которое может быть полезно при отладке.
@c A report of information that may be useful if you are debugging.
@end table

  Когда программа обнаруживает не верные входные данные, она может
сигнализировать Lisp ошибку вызовом @code{errro} или @code{signal} или
дать предупреждение с уровнем опасности @code{:error}. Сигнализирование Lisp
ошибки самый простой способ, но он прерывает выполнение программы. Если нужно
продолжение работу, несмотря на плохие данные, тогда предупреждение с
уровнем опасности @code{:error} подходящий способ, чтобы сообщить пользователю
о проблеме. Например, байт компилятор Emacs Lisp может таким образом
сообщить о проблеме и продолжить компилировать другие функции.
(Если программа сигнализирует Lisp ошибку и потом обрабатывает ее
с помощью @code{condition-case}, пользователь не должен видеть
сообщение об ошибке, программа может показать сообщение
пользователю в виде предупреждения).

@c   When your program encounters invalid input data, it can either
@c signal a Lisp error by calling @code{error} or @code{signal} or report
@c a warning with severity @code{:error}.  Signaling a Lisp error is the
@c easiest thing to do, but it means the program cannot continue
@c processing.  If you want to take the trouble to implement a way to
@c continue processing despite the bad data, then reporting a warning of
@c severity @code{:error} is the right way to inform the user of the
@c problem.  For instance, the Emacs Lisp byte compiler can report an
@c error that way and continue compiling other functions.  (If the
@c program signals a Lisp error and then handles it with
@c @code{condition-case}, the user won't see the error message; it could
@c show the message to the user by reporting it as a warning.)

@c FIXME: Why use "(bytecomp)" instead of "'bytecomp" or simply
@c "bytecomp" here?  The parens are part of warning-type-format but
@c not part of the warning type. --xfq
@cindex warning type
  Каждое предупреждение имеет @dfn{тип предупреждения} (@dfn{warning type})
для их классификации. Тип является списком символов. Первый символ должен быть
группой настройки (custom group), которая используется для пользовательских
опций. Например, предупреждения байт компилятор используют тип предудупреждений
@code{(bytecomp)}. Так же можно задавать подкатегории, если нужно, указывая
больше символов в списке.

@c   Each warning has a @dfn{warning type} to classify it.  The type is a
@c list of symbols.  The first symbol should be the custom group that you
@c use for the program's user options.  For example, byte compiler
@c warnings use the warning type @code{(bytecomp)}.  You can also
@c subcategorize the warnings, if you wish, by using more symbols in the
@c list.

@defun display-warning type message &optional level buffer-name
Функция показывает предупреждение, где @var{message} сообщение,
а @var{type} тип предупреждения. @var{level} должен задавать
уровень опасности, по умолчанию используется @code{:warning}.

@c This function reports a warning, using @var{message} as the message
@c and @var{type} as the warning type.  @var{level} should be the
@c severity level, with @code{:warning} being the default.

Если @var{buffer-name} не-@code{nil}, то оно задает имя буфера, для
журналирования (logging) предупреждения. По умолчанию используется @file{*Warnings*}.

@c @var{buffer-name}, if non-@code{nil}, specifies the name of the buffer
@c for logging the warning.  By default, it is @file{*Warnings*}.
@end defun

@defun lwarn type level message &rest args
Функция отправляет предупреждения используя занчение @code{(format-message}
@var{message} @var{args}...)} в качестве сообщения в @file{*Warnings*}
буфер. В остальном функция эквивалентна @code{display-warning}.

@c This function reports a warning using the value of @code{(format-message
@c @var{message} @var{args}...)} as the message in the @file{*Warnings*}
@c buffer.  In other respects it is equivalent to @code{display-warning}.
@end defun

@defun warn message &rest args
Функция сообщает предупреждение используя значение @code{(format-message}
@var{message} @var{args}...)} в качестве сообщение, и @code{(emacs)} в качестве
типа, и @code{:warning} в качетсве уровня опасности. Функция предоставляется
для совместимости, и не рекомендуется к использования, потому что, стоит
указывать тип предупреждения нужно указывать более ясно.

@c This function reports a warning using the value of @code{(format-message
@c @var{message} @var{args}...)} as the message, @code{(emacs)} as the
@c type, and @code{:warning} as the severity level.  It exists for
@c compatibility only; we recommend not using it, because you should
@c specify a specific warning type.
@end defun

@node Warning Variables
@subsection Переменные Предупреждений
@c @subsection Warning Variables
@cindex warning variables

  Программы могут управлять сообщеним предупреждений задавая
значения переменным описанным в данном разделе.

@c   Programs can customize how their warnings appear by binding
@c the variables described in this section.

@defvar warning-levels
Список определяет значение и порядок уровней опасности предупреждений.
Каждый элемент определяет один уровень опасности,
и считается, что они упорядочены в порядке уменьшения опасности.

@c This list defines the meaning and severity order of the warning
@c severity levels.  Each element defines one severity level,
@c and they are arranged in order of decreasing severity.

Каждый элемент имеет форму @code{(@var{level} @var{strig} @var{function})},
где @var{level} уровень опасности, а @var{string} текстовое описание
уровня опасности. В @var{string} нужно использовать @samp{%s} в месте,
где должен указываться уровень опасности, или не использоваться @samp{%s}
если уровень опасности указывать не нужно.

@c Each element has the form @code{(@var{level} @var{string}
@c @var{function})}, where @var{level} is the severity level it defines.
@c @var{string} specifies the textual description of this level.
@c @var{string} should use @samp{%s} to specify where to put the warning
@c type information, or it can omit the @samp{%s} so as not to include
@c that information.

Не обязательный параметр @var{function}, если не-@code{nil}, функция
которая должна вызываеться, чтобы привлечь внимание пользователя.

@c The optional @var{function}, if non-@code{nil}, is a function to call
@c with no arguments, to get the user's attention.

Как правило эту переменную изменять не нужно.
@c Normally you should not change the value of this variable.
@end defvar

@defvar warning-prefix-function
Если не-@code{nil}, то переменная должна хранить функцию, которая
используется для генерации текста префикса для предупреждения. Программы
назначают данной переменной подходящие функции. @code{display-warning} вызывает
эту функцию с буфером предупреждений в качестве текущего, и функция может выполнять
в него вставку текста. Этот текст, становится началом сообщения предупреждения.

@c If non-@code{nil}, the value is a function to generate prefix text for
@c warnings.  Programs can bind the variable to a suitable function.
@c @code{display-warning} calls this function with the warnings buffer
@c current, and the function can insert text in it.  That text becomes
@c the beginning of the warning message.

Функция вызывается с двумя аргументами, уровнем опасности и записью
в @code{warning-levels}. Функция должна возвращать список, используемый в
качестве входного значения (значение не обязательно должно быть
членом @code{warning-levels}). При конструировании значения, функция
может изменить уровень опасности, или задать другой обработчик для
уровня опасности.

@c The function is called with two arguments, the severity level and its
@c entry in @code{warning-levels}.  It should return a list to use as the
@c entry (this value need not be an actual member of
@c @code{warning-levels}).  By constructing this value, the function can
@c change the severity of the warning, or specify different handling for
@c a given severity level.

Если значение переменной @code{nil}, тогда никакая функция не вызывается.
@c If the variable's value is @code{nil} then there is no function
@c to call.
@end defvar

@defvar warning-series
Программы устанавливают переменную в @code{t}, чтобы указать,
что следующее предупреждение начинает последовательность. Когда
несколько предупрежденией формируют последовательность, то,
точка курсора остается на первом предупреждении последовательности,
а не перемещается на каждое следующее. Последовательность заканчивается,
когда @code{warning-series} снова становится @code{nil} (когда
заканичивается действие локального связывания).

@c Programs can bind this variable to @code{t} to say that the next
@c warning should begin a series.  When several warnings form a series,
@c that means to leave point on the first warning of the series, rather
@c than keep moving it for each warning so that it appears on the last one.
@c The series ends when the local binding is unbound and
@c @code{warning-series} becomes @code{nil} again.

Значение может быть символом с определением функции. В этом случае действие
аналогично @code{t}, но при этом следующее предупреждение дополнительно
вызывает указанную функцию с буфером предупреждений в качестве текущего.
Функция может вставлять текст, который будет служить заголовком для
последовательности предупреждений.

@c The value can also be a symbol with a function definition.  That is
@c equivalent to @code{t}, except that the next warning will also call
@c the function with no arguments with the warnings buffer current.  The
@c function can insert text which will serve as a header for the series
@c of warnings.

Когда последовательность началась, значение является макрером указывающим
на позицию в буфере, где начинается последовательность.

@c Once a series has begun, the value is a marker which points to the
@c buffer position in the warnings buffer of the start of the series.

Обычно значение @code{nil}, что подразумевает отдельную обработку
каждого предупреждения.

@c The variable's normal value is @code{nil}, which means to handle
@c each warning separately.
@end defvar

@defvar warning-fill-prefix
Если значение не-@code{nil}, оно задает префикс заполнения, используемый
для текста каждого предупреждения.

@c When this variable is non-@code{nil}, it specifies a fill prefix to
@c use for filling each warning's text.
@end defvar

@defvar warning-type-format
Переменная задает формат отображения типа предупреждения в сообщении
предупреждения. Результат форматирования типа включается в сообщение
задаваемое параметром string в соответствующей записи @code{warning-levels}.
По умолчанию используется значение @code{" (%s) "}. Если задать
значение @code{""}, тогда тип предупреждения не будет отображаться
в сообщении предупреждения.

@c This variable specifies the format for displaying the warning type
@c in the warning message.  The result of formatting the type this way
@c gets included in the message under the control of the string in the
@c entry in @code{warning-levels}.  The default value is @code{" (%s)"}.
@c If you bind it to @code{""} then the warning type won't appear at
@c all.
@end defvar

@node Warning Options
@subsection Настройки Предупреждений
@c @subsection Warning Options
@cindex warning options

  Переменные в данном разделе используются пользователями
для настройки показа предупреждений Lisp программами.

@c   These variables are used by users to control what happens
@c when a Lisp program reports a warning.

@defopt warning-minimum-level
Опция определяет минимульный уровень опасности, который должен быть
сразу показан пользователю. По умолчанию @code{:warning}, что означает
немедленный показ всех предупреждений за исключением предупреждений @code{:debug}.

@c This user option specifies the minimum severity level that should be
@c shown immediately to the user.  The default is @code{:warning}, which
@c means to immediately display all warnings except @code{:debug}
@c warnings.
@end defopt

@defopt warning-minimum-log-level
Опция определяет минимальный уровень опасности, который должен быть
сохранен в буфер с журналом предупреждений (warning logger buffer).
По умолчанию @code{:warning}, что означет, что будут журналиравться
все предупреждения, за исключением @code{:debug}.

@c This user option specifies the minimum severity level that should be
@c logged in the warnings buffer.  The default is @code{:warning}, which
@c means to log all warnings except @code{:debug} warnings.
@end defopt

@defopt warning-suppress-types
Список задает список типов предупреждений, которые не должна сразу показываться
пользователю. Каждый элемент списка должен быть
списком символов. Если его первые элементы соответсвуют первым
элементам типа предупреждения, тогда не выполняется немедленное
отображение предупреждения.

@c This list specifies which warning types should not be displayed
@c immediately for the user.  Each element of the list should be a list
@c of symbols.  If its elements match the first elements in a warning
@c type, then that warning is not displayed immediately.
@end defopt

@defopt warning-suppress-log-types
Список определяет, какие типы предупреждений не должны сохраняться
в буфер с журналом предупреждений. Каждый элемент в списке  должен быть списком
символов, если его первые элементы соответствуют первым элементам
предупреждения, тогда предупреждение не записывается в журнал.

@c This list specifies which warning types should not be logged in the
@c warnings buffer.  Each element of the list should be a list of
@c symbols.  If it matches the first few elements in a warning type, then
@c that warning is not logged.
@end defopt

@node Delayed Warnings
@subsection Отложенные Предупреждения
@c @subsection Delayed Warnings
@cindex delayed warnings

Иногда, нужно отложить показ предупреждений, до завершения команды. Для
этого можно использовать переменную @code{delayed-warnings-list}.

@c Sometimes, you may wish to avoid showing a warning while a command is
@c running, and only show it only after the end of the command.  You can
@c use the variable @code{delayed-warnings-list} for this.

@defvar delayed-warnings-list
Значение переменной является списком предупреждений, которые
будут показаны, после завершения текущей команды. Каждый элемент
должен быть списком

@c The value of this variable is a list of warnings to be displayed after
@c the current command has finished.  Each element must be a list

@smallexample
(@var{type} @var{message} [@var{level} [@var{buffer-name}]])
@end smallexample

@noindent
той же формы, и с теми же значениями аргументов, что список аргументов
@code{display-warning} (@pxref{Warning Basics}). Сразу после запуска
@code{post-command-hook} (@pxref{Command Overview}), командный цикл
Emacs отобразит все предупреждения заданные этой переменной,
после чего сбросит ее значение в @code{nil}.

@c with the same form, and the same meanings, as the argument list of
@c @code{display-warning} (@pxref{Warning Basics}).  Immediately after
@c running @code{post-command-hook} (@pxref{Command Overview}), the Emacs
@c command loop displays all the warnings specified by this variable,
@c then resets it to @code{nil}.
@end defvar

  Программы которым нужна более специфичная настройка механизма
отложенных предупреждений, могут изменить переменную
@code{delayed-warnings-hook}:

@c   Programs which need to further customize the delayed warnings
@c mechanism can change the variable @code{delayed-warnings-hook}:

@defvar delayed-warnings-hook
Обычновенный перехватчик который запускается командным циклом Emacs,
после @code{post-command-hook}, чтобы обработать и показать отложенные
предупреждения.

@c This is a normal hook which is run by the Emacs command loop, after
@c @code{post-command-hook}, in order to to process and display delayed
@c warnings.

По умолчанию это список с двумя функциями:
@c Its default value is a list of two functions:

@smallexample
(collapse-delayed-warnings display-delayed-warnings)
@end smallexample

@findex collapse-delayed-warnings
@findex display-delayed-warnings
@noindent
Функция @code{collapse-delayed-warnings} удаляет повтояющиеся
записи в @code{delayed-warnings-list}. Функция @code{display-delayed-warnings}
по очереди вызывает @code{display-warnings} для каждой из записей
в @code{delayed-warnings-list}, после чего устанавливает @code{delayed-warnings-list}
в @code{nil}.

@c The function @code{collapse-delayed-warnings} removes repeated entries
@c from @code{delayed-warnings-list}.  The function
@c @code{display-delayed-warnings} calls @code{display-warning} on each
@c of the entries in @code{delayed-warnings-list}, in turn, and then sets
@c @code{delayed-warnings-list} to @code{nil}.
@end defvar

@node Invisible Text
@section Невидимый Текст
@c @section Invisible Text

@cindex invisible text
Можно сделать символы @dfn{не видимыми}(@dfn{invisible}), то есть не отображаемыми
на экране, с помощью свойства @code{invisible}. Это может быть текстовое
свойство (@pxref{Text Properties}) или свойство оверлея (overlay) (@pxref{Overlays}).
При движении курсор частично игнорирует не видимые символы;  если командный
цикл находит точку внутри не видимого текста, точку курсора перемещается
к видимому тексту.

@c You can make characters @dfn{invisible}, so that they do not appear on
@c the screen, with the @code{invisible} property.  This can be either a
@c text property (@pxref{Text Properties}) or an overlay property
@c (@pxref{Overlays}).  Cursor motion also partly ignores these
@c characters; if the command loop finds that point is inside a range of
@c invisible text after a command, it relocates point to the other side
@c of the text.

В простейшем случае, любое не-@code{nil} значение свойства @code{invisible}
делает символы не видимыми. Это поведение по умолчанию---если не менять
значение @code{buffer-invisible-spec}, определяющую как работает
свойство @code{invisible}. Как правило нужно использоваться @code{t}
в качестве значения свойства @code{invisible} если не планируется задавать
@code{buffer-invisibility-spec}.

@c In the simplest case, any non-@code{nil} @code{invisible} property makes
@c a character invisible.  This is the default case---if you don't alter
@c the default value of @code{buffer-invisibility-spec}, this is how the
@c @code{invisible} property works.  You should normally use @code{t}
@c as the value of the @code{invisible} property if you don't plan
@c to set @code{buffer-invisibility-spec} yourself.

В более общем случае, можно использовать переменную
@code{buffer-invisibility-spec} для контроля какое значение свойства @code{invisible}
делает текст не видимым. Таким образом можно выделить разные подмножества
текста, задав им разные значения свойства @code{invisible}, после
чего потом можно делать разные подмножества видимыми и не видимыми изменяя
значение @code{buffer-invisibility-spec}.

@c More generally, you can use the variable @code{buffer-invisibility-spec}
@c to control which values of the @code{invisible} property make text
@c invisible.  This permits you to classify the text into different subsets
@c in advance, by giving them different @code{invisible} values, and
@c subsequently make various subsets visible or invisible by changing the
@c value of @code{buffer-invisibility-spec}.

Управление видимостью с помощью @code{buffer-invisibility-spec}
особенно полезно в программах показывающих список записей в базе данных.
Это позволяет реализовать удобные команды фильтрации показывающие
только часть записей базы. Установка данной переменной очень быстра, гораздо
быстрее, чем обойти весь текст и изменить нужные свойства.

@c Controlling visibility with @code{buffer-invisibility-spec} is
@c especially useful in a program to display the list of entries in a
@c database.  It permits the implementation of convenient filtering
@c commands to view just a part of the entries in the database.  Setting
@c this variable is very fast, much faster than scanning all the text in
@c the buffer looking for properties to change.

@defvar buffer-invisibility-spec
Переменная определяет какой вид свойства @code{invisible}, делает
символы не видимыми. Установка данной переменной делает ее локальной
для буфера.

@c This variable specifies which kinds of @code{invisible} properties
@c actually make a character invisible.  Setting this variable makes it
@c buffer-local.

@table @asis
@item @code{t}
Символ невидим если свойство @code{invisible} не-@code{nil}.
Это поведение по умолчанию.

@c A character is invisible if its @code{invisible} property is
@c non-@code{nil}.  This is the default.

@item a list
Каждый элемент списка задает критерий для невидимости; если свойство
@code{invisible} символа соответствует одному из критериев, символ
будет невидим. Список может иметь два вида элементов:

@c Each element of the list specifies a criterion for invisibility; if a
@c character's @code{invisible} property fits any one of these criteria,
@c the character is invisible.  The list can have two kinds of elements:

@table @code
@item @var{atom}
Символ невидим если значение свойства @code{invisible} @var{atom} или
если список, то @var{atom} является элементом списка; сравнение выполняется
с помощью @code{eq}.

@c A character is invisible if its @code{invisible} property value is
@c @var{atom} or if it is a list with @var{atom} as a member; comparison
@c is done with @code{eq}.

@item (@var{atom} . t)
Символ невидим если значение свойства @code{invisible} @var{atom} или
если список, то @var{atom} элемент этого списка; сравнение выполняется
с помощью @code{eq}. Более того, последовательность таких символов
отображается как эллипсис.

@c A character is invisible if its @code{invisible} property value is
@c @var{atom} or if it is a list with @var{atom} as a member; comparison
@c is done with @code{eq}.  Moreover, a sequence of such characters
@c displays as an ellipsis.
@end table
@end table
@end defvar

  Для добавления и удаления элементов в @code{buffer-invisibility-spec}
предусмотренны две следующие функции.

@c   Two functions are specifically provided for adding elements to
@c @code{buffer-invisibility-spec} and removing elements from it.

@defun add-to-invisibility-spec element
Функция добавляет элемент @var{element} в @code{buffer-invisibility-spec}.
Если @code{buffer-invisibility-spec} было @code{t}, оно становится списком,
@code{(t)}, поэтому текст, свойство @code{invisible} которого @code{t} остается
невидим.

@c This function adds the element @var{element} to
@c @code{buffer-invisibility-spec}.  If @code{buffer-invisibility-spec}
@c was @code{t}, it changes to a list, @code{(t)}, so that text whose
@c @code{invisible} property is @code{t} remains invisible.
@end defun

@defun remove-from-invisibility-spec element
Функция удаляет элемент @var{element} из @code{buffer-invisibility-spec}.
Если @var{element} не в списке, функция ничего не делает.

@c This removes the element @var{element} from
@c @code{buffer-invisibility-spec}.  This does nothing if @var{element}
@c is not in the list.
@end defun

  Соглашение для использования @code{buffer-invisibility-spec} состоит
в том, что основной режим должен использовать собственное имя режима в качестве
элемента @code{buffer-invisibility-spec} и в качестве значения @code{invisible}.

@c   A convention for use of @code{buffer-invisibility-spec} is that a
@c major mode should use the mode's own name as an element of
@c @code{buffer-invisibility-spec} and as the value of the
@c @code{invisible} property:

@example
;; @r{If you want to display an ellipsis:}
(add-to-invisibility-spec '(my-symbol . t))
;; @r{If you don't want ellipsis:}
(add-to-invisibility-spec 'my-symbol)

(overlay-put (make-overlay beginning end)
             'invisible 'my-symbol)

;; @r{When done with the invisibility:}
(remove-from-invisibility-spec '(my-symbol . t))
;; @r{Or respectively:}
(remove-from-invisibility-spec 'my-symbol)
@end example

  Можно проверить является ли текст невидимым используя следующую функцию:
  @c You can check for invisibility using the following function:

@defun invisible-p pos-or-prop
Если @var{pos-or-prop} является маркером или числом, функция возвращает
не-@code{nil} если текст в позиции невидим.

@c If @var{pos-or-prop} is a marker or number, this function returns a
@c non-@code{nil} value if the text at that position is invisible.

Если @var{pos-or-prop} любой другой вид Lisp объекта, которым принято
обозначать возможное значение свойство @code{invisible} текста или
оверлея. В этом случае, функция возвращает не-@code{nil}, если это
значение сделает текст невидимым, при текущем значении @code{buffer-invisibility-spec}.

@c If @var{pos-or-prop} is any other kind of Lisp object, that is taken
@c to mean a possible value of the @code{invisible} text or overlay
@c property.  In that case, this function returns a non-@code{nil} value
@c if that value would cause text to become invisible, based on the
@c current value of @code{buffer-invisibility-spec}.
@end defun

@vindex line-move-ignore-invisible
  Обчно, функциям которые работают с текстом или перемещают точку курсора
все равно является ли текст невидимым или нет, они обрабатывают невидимые и
видимые символы одинаково. Пользовательские команды перемещения
между строчками @code{next-line}, @code{previous-line}, игнорируют невидимые
переводы строки, если @code{line-move-ignore-invisible} не-@code{nil}
(по умолчанию), т.е. ведут себя так, буд-то невидимых переводов строк нет
в буфере, но только потому что, для них явно задано такое поведение.

@c   Ordinarily, functions that operate on text or move point do not care
@c whether the text is invisible, they process invisible characters and
@c visible characters alike.  The user-level line motion commands,
@c such as @code{next-line}, @code{previous-line}, ignore invisible
@c newlines if @code{line-move-ignore-invisible} is non-@code{nil} (the
@c default), i.e., behave like these invisible newlines didn't exist in
@c the buffer, but only because they are explicitly programmed to do so.

  Если команды оканчивается с точкой курсора внутри или на границе
невидимого текста, главный цикл редактирования перемещает точку курсора
на одну из границ невидимого текста. Emacs выбирает направление
перемещения, то же, что общее движение курсора в команде; если
есть неоднозначности, предпочитается позиция, где вставка
символа, не будет наследовать свойство @code{invisible}. Кроме того,
если текст не замене на эллиписис и команда только перемещается внутри
невидимого текста, точка курсора перемещается на дополнительный символ,
чтобы попытаться отразит движение команды, через движение курсора.

@c   If a command ends with point inside or at the boundary of
@c invisible text, the main editing loop relocates point to one of the
@c two ends of the invisible text.  Emacs chooses the direction of
@c relocation so that it is the same as the overall movement direction of
@c the command; if in doubt, it prefers a position where an inserted char
@c would not inherit the @code{invisible} property.  Additionally, if the
@c text is not replaced by an ellipsis and the command only moved within
@c the invisible text, then point is moved one extra character so as to
@c try and reflect the command's movement by a visible movement of the
@c cursor.

  Таким образом, если команда перемещает точку курсора назад, в невидимую
область (с обычном прилипанием), Emacs переместит точку курсора в начало
невидимой области. Если команда перемещает точку курсора вперед в невидимую
область, Emacs переместит точку курсора вперед до первого видимого символа,
который идет за невидимой областью и потом еще на один символ.

@c   Thus, if the command moved point back to an invisible range (with the usual
@c stickiness), Emacs moves point back to the beginning of that range.  If the
@c command moved point forward into an invisible range, Emacs moves point forward
@c to the first visible character that follows the invisible text and then forward
@c one more character.

  Такая @dfn{корректировка} (@dfn{adjustments}), точки курсора остающейся
внутри невидимого текста может быть отключена установкой
@code{disable-point-adjustment} в не-@code{nil}. @xref{Adjusting Point}.

@c   These @dfn{adjustments} of point that ended up in the middle of
@c invisible text can be disabled by setting @code{disable-point-adjustment}
@c to a non-@code{nil} value.  @xref{Adjusting Point}.

  Инкрментальный поиск может делать невидимые оверлеи (overlays)
видимыми временно или постоянно, когда соответствие находится внутри
невидимого текста. Чтобы включить данную опцию, оверлей (overlay) должен
иместь свойство @code{isearch-open-invisible} не-@code{nil}. Значением
свойства должна быть функция, вызываемая с оверлеем (overlay) в качестве
аргумента. Функция должна далать оверлей видимым; и используется когда
соответствие находится внутри оверлея по окончании поиска.

@c   Incremental search can make invisible overlays visible temporarily
@c and/or permanently when a match includes invisible text.  To enable
@c this, the overlay should have a non-@code{nil}
@c @code{isearch-open-invisible} property.  The property value should be a
@c function to be called with the overlay as an argument.  This function
@c should make the overlay visible permanently; it is used when the match
@c overlaps the overlay on exit from the search.

  При поиске, такие оверлеи (overlays) временно делаются видимыми
временным изменением их свойств invisible(невидимый) и intangible(нематериальный).
Если нужно, чтобы это было сделано по другому для какого-то аверлея, нужно
задать свойство @code{isearch-open-invisible-temporary}, где указать функцию.
Функция будет вызываеться с двумя аргументами, первым будет оверлей (overlay), а
вторым @code{nil}, чтобы сделать оверлей(overlay) видимым, или @code{t}
чтобы снова его сделать невидимым.

@c   During the search, such overlays are made temporarily visible by
@c temporarily modifying their invisible and intangible properties.  If you
@c want this to be done differently for a certain overlay, give it an
@c @code{isearch-open-invisible-temporary} property which is a function.
@c The function is called with two arguments: the first is the overlay, and
@c the second is @code{nil} to make the overlay visible, or @code{t} to
@c make it invisible again.

@node Selective Display
@section Выборочное Отображение
@c @section Selective Display
@c @cindex selective display   Duplicates selective-display

  @dfn{Выборочное отображение} относится к паре связанных функций
позволяющих скрывать некоторые строки на экране.
@c   @dfn{Selective display} refers to a pair of related features for
@c hiding certain lines on the screen.

@cindex explicit selective display
  Первый вариант, явного выборочного отображения, был разработан для использования
в Lisp программе: в нем контроль за видимыми строками выполняется изменением
текста. Данный вид скрытия сейчас считается устаревим; так как этого
же эффекта можно добиться использованием свойства @code{invisible} (@pxref{Invisible Text}).

@c   The first variant, explicit selective display, was designed for use in a Lisp
@c program: it controls which lines are hidden by altering the text.  This kind of
@c hiding is now obsolete; instead you can get the same effect with the
@c @code{invisible} property (@pxref{Invisible Text}).

  При втором способе, решение о том, какие строки стоит скрывать
основывается на отступах. Данный вариант разработан как функция
уровня пользователя.

@c   In the second variant, the choice of lines to hide is made
@c automatically based on indentation.  This variant is designed to be a
@c user-level feature.

  Пользователь явно упралвяет выбором отображения путем замены
символа новой строки (control-j) на возврат каретки (carriage return) (control-m).
Текст который шел за символом новой строки будет скрыт. Строго говоря,
этот текст временно перестает быть строкой, так как только символы
новой строки разделяют строки, а текст после возврата каретки теперь станоится
частью предыдущей строки.

@c   The way you control explicit selective display is by replacing a
@c newline (control-j) with a carriage return (control-m).  The text that
@c was formerly a line following that newline is now hidden.  Strictly
@c speaking, it is temporarily no longer a line at all, since only
@c newlines can separate lines; it is now part of the previous line.

  Выборочное отображение напрямую не влияет на команды редактирования.
Например, @kbd{C-f} (@code{forward-char}) перемещает точку курсора
в скрытый текст. Но, замена символа новой строки на возврат каретки
влияет на некоторые команды редактирования. Например, @code{next-line}
пропускает спрятанные строки, так как ищет только
до перевода строки. Режимы, которые используют выборочное отображение
так же могут определять команды, которые учитывают только символы
новой строки, или принимают во внимение, что части текста скрыты.

@c   Selective display does not directly affect editing commands.  For
@c example, @kbd{C-f} (@code{forward-char}) moves point unhesitatingly
@c into hidden text.  However, the replacement of newline characters with
@c carriage return characters affects some editing commands.  For
@c example, @code{next-line} skips hidden lines, since it searches only
@c for newlines.  Modes that use selective display can also define
@c commands that take account of the newlines, or that control which
@c parts of the text are hidden.

  При записи буфера с выборочным отображением в файл, все символы
control-m (перевода каретки) выводятся как символы новой строки. В результате,
если прочитать текст из файла, ничего скрыто не будет. Выборочное
отображение работает только внутри Emacs.

@c   When you write a selectively displayed buffer into a file, all the
@c control-m's are output as newlines.  This means that when you next read
@c in the file, it looks OK, with nothing hidden.  The selective display
@c effect is seen only within Emacs.

@defvar selective-display
Локальная для буфера переменная включающая выборочное отображение, что
означает, что строки, или части строк могут быть скрыты.

@c This buffer-local variable enables selective display.  This means that
@c lines, or portions of lines, may be made hidden.

@itemize @bullet
@item
Если значение @code{selective-display} @code{t}, тогда символ control-m
является меткой начала скрытого текста; и текст после control-m и до
конца строки не отображается. Это явное выборочное отображение.

@c If the value of @code{selective-display} is @code{t}, then the character
@c control-m marks the start of hidden text; the control-m, and the rest
@c of the line following it, are not displayed.  This is explicit selective
@c display.

@item
Если значение @code{selective-display} положительное целое, тогда
строки, которые начинаются с более чем указанное количество отступов не
отображаются.

@c If the value of @code{selective-display} is a positive integer, then
@c lines that start with more than that many columns of indentation are not
@c displayed.
@end itemize
Когда часть буфера скрыта, команды для вертикального перемещения
работают, так буд-то эта часть буфера отсутствует, позволяя
команде @code{next-line} пропустить любое количество скрытых
строк. Но, команды перемещения по символам (такие как @code{forward-char})
не пропускают скрытые участки, и возможно вставить или удалить текст
в скрытой части.

@c When some portion of a buffer is hidden, the vertical movement
@c commands operate as if that portion did not exist, allowing a single
@c @code{next-line} command to skip any number of hidden lines.
@c However, character movement commands (such as @code{forward-char}) do
@c not skip the hidden portion, and it is possible (if tricky) to insert
@c or delete text in an hidden portion.

В примере ниже, показывается @emph{отображение}  буфера @code{foo},
в котором делается изменение значения @code{selective-display}. @emph{содержимое}
буфера при этом не изменяется, а отображение меняется.

@c In the examples below, we show the @emph{display appearance} of the
@c buffer @code{foo}, which changes with the value of
@c @code{selective-display}.  The @emph{contents} of the buffer do not
@c change.

@example
@group
(setq selective-display nil)
     @result{} nil

---------- Buffer: foo ----------
1 on this column
 2on this column
  3n this column
  3n this column
 2on this column
1 on this column
---------- Buffer: foo ----------
@end group

@group
(setq selective-display 2)
     @result{} 2

---------- Buffer: foo ----------
1 on this column
 2on this column
 2on this column
1 on this column
---------- Buffer: foo ----------
@end group
@end example
@end defvar

@defopt selective-display-ellipses
Если данная локальная для буфера переменная не-@code{nil}, Emacs
отображает @samp{@dots{}} в конце строки, за которой следует скрытый текст.
Пример ниже, продолжение предыдущего.

@c If this buffer-local variable is non-@code{nil}, then Emacs displays
@c @samp{@dots{}} at the end of a line that is followed by hidden text.
@c This example is a continuation of the previous one.

@example
@group
(setq selective-display-ellipses t)
     @result{} t

---------- Buffer: foo ----------
1 on this column
 2on this column ...
 2on this column
1 on this column
---------- Buffer: foo ----------
@end group
@end example

Можно использовать таблицу отображения задания другого текста
в качестве эллипсисов вместо (@samp{dots{}}). @xref{Display Tables}.

@c You can use a display table to substitute other text for the ellipsis
@c (@samp{@dots{}}).  @xref{Display Tables}.
@end defopt

@node Temporary Displays
@section Временное Отображение
@c @section Temporary Displays
@cindex temporary display
@cindex temporary buffer display

  Временное отображение используется Lisp программами, чтобы поместить
вывод в буфер и предоставить пользователю для чтения, но не для редактирования.
Многие команды помощи используют данную возможность. (функцию)

@c   Temporary displays are used by Lisp programs to put output into a
@c buffer and then present it to the user for perusal rather than for
@c editing.  Many help commands use this feature.

@defmac with-output-to-temp-buffer buffer-name body@dots{}
Функция выполняет форму в @var{body} при этом вывод производимый в @var{body}
помещается в буфер с именем @var{buffer-name} (создается при необходимости)
для которого устанавливается режим Help (Help mode). (См. схожую форму
@code{with-temp-buffer-window} ниже.) В завершении, буфер отображается в
каком-то окне, но это окно не выделяется.

@c This function executes the forms in @var{body} while arranging to insert
@c any output they print into the buffer named @var{buffer-name}, which is
@c first created if necessary, and put into Help mode.  (See the similar
@c form @code{with-temp-buffer-window} below.)  Finally, the buffer is
@c displayed in some window, but that window is not selected.

Если формы в @var{body} не изменяют основной режим в буфере вывода,
то в завершении @var{body} буфер остается в режиме Help (Help mode),
то @code{with-output-to-temp-buffer} делает буфер только для чтения, и
сканирует на наличие функции и имена переменных, чтобы сделать
их кликабельными перекрестными ссылками. @xref{Docstring hyperlinks, , Tips
for Documentation Strings}, в частности пункт о ссылках в строках документации.

@c If the forms in @var{body} do not change the major mode in the output
@c buffer, so that it is still Help mode at the end of their execution,
@c then @code{with-output-to-temp-buffer} makes this buffer read-only at
@c the end, and also scans it for function and variable names to make them
@c into clickable cross-references.  @xref{Docstring hyperlinks, , Tips for
@c Documentation Strings}, in particular the item on hyperlinks in
@c documentation strings, for more details.

Строка @var{buffer-name} задает временный буфер, который уже должен существовать.
Аргумент должен быть строкой, буфером быть не может. Сначала буфер очищается
(без вопросов), и помечается как не измененный после @code{with-output-to-temp-buffer}.

@c The string @var{buffer-name} specifies the temporary buffer, which need
@c not already exist.  The argument must be a string, not a buffer.  The
@c buffer is erased initially (with no questions asked), and it is marked
@c as unmodified after @code{with-output-to-temp-buffer} exits.

@code{with-output-to-temp-buffer} связывает @code{standard-output}
с временным буфером, когда вычисляет форму в @var{body}. Вывод
использующий  Lisp функции для вывода внутри @var{body} будут выводить
данные в @var{buffer-name} (но screen display и сообщения эхо области
не затрагиваются, хотя они и являются ``выводом'' в общем смысле).
@xref{Output Functions}.

@c @code{with-output-to-temp-buffer} binds @code{standard-output} to the
@c temporary buffer, then it evaluates the forms in @var{body}.  Output
@c using the Lisp output functions within @var{body} goes by default to
@c that buffer (but screen display and messages in the echo area, although
@c they are ``output'' in the general sense of the word, are not affected).
@c @xref{Output Functions}.

Некоторые перехватчики способны настраивать поведение
данной конструкции; они перечислены ниже.

@c Several hooks are available for customizing the behavior
@c of this construct; they are listed below.

Возвращается значение крайней формы в @var{body}.
@c The value of the last form in @var{body} is returned.

@example
@group
---------- Buffer: foo ----------
 This is the contents of foo.
---------- Buffer: foo ----------
@end group

@group
(with-output-to-temp-buffer "foo"
    (print 20)
    (print standard-output))
@result{} #<buffer foo>

---------- Buffer: foo ----------

20

#<buffer foo>

---------- Buffer: foo ----------
@end group
@end example
@end defmac

@defopt temp-buffer-show-function
Если переменная не-@code{nil}, @code{with-output-to-temp-buffer}
вызывает ее в качестве функции для отображения вспомогательного буфера помощи
(help buffer). Функция вызывается с одним аргументом, буфером, который
она должна отобразить.

@c If this variable is non-@code{nil}, @code{with-output-to-temp-buffer}
@c calls it as a function to do the job of displaying a help buffer.  The
@c function gets one argument, which is the buffer it should display.

Хорошо если функция будет вызывать @code{temp-buffer-show-hook},
как это делает @code{with-output-to-temp-buffer}, внутри
@code{save-selected-window} с выбранными окном и буфером.

@c It is a good idea for this function to run @code{temp-buffer-show-hook}
@c just as @code{with-output-to-temp-buffer} normally would, inside of
@c @code{save-selected-window} and with the chosen window and buffer
@c selected.
@end defopt

@defvar temp-buffer-setup-hook
Обыкновенный перехватчик запускаемый @code{with-output-to-temp-buffer}
перед вычислением @var{body}. При запуске, временный буфер является текущим.
Перехватчик как правило устанавливается вместе с функцией переводящей
буфер в режим Help (Help mode).

@c This normal hook is run by @code{with-output-to-temp-buffer} before
@c evaluating @var{body}.  When the hook runs, the temporary buffer is
@c current.  This hook is normally set up with a function to put the
@c buffer in Help mode.
@end defvar

@defvar temp-buffer-show-hook
Обыкновенный перехватчик запускаемый @code{with-output-temp-buffer}
после отображения временного буфера. Когда перехватчик запускается, временный
буфер является текущим, и отображающее его окно выбранным.

@c This normal hook is run by @code{with-output-to-temp-buffer} after
@c displaying the temporary buffer.  When the hook runs, the temporary buffer
@c is current, and the window it was displayed in is selected.
@end defvar

@defmac with-temp-buffer-window buffer-or-name action quit-function body@dots{}
Макрос аналогичен @code{with-output-to-temp-buffer}. Он так же
пока выполняет @var{body} организует вывод в буфер @var{buffer-or-name} и
отображает этот буфер в каком-то окне. Но в отличие от @code{with-output-to-temp-buffer},
макрос не выполняет автоматическое переключение буфера в Help режим (Help mode).

@c This macro is similar to @code{with-output-to-temp-buffer}.  Like that
@c construct, it executes @var{body} while arranging to insert any output
@c it prints into the buffer named @var{buffer-or-name} and displays that
@c buffer in some window.  Unlike @code{with-output-to-temp-buffer},
@c however, it does not automatically switch that buffer to Help mode.

Аргумент @var{buffer-or-name} задает временный буфер. Значением параметра
может буть уже существующий буфер, или имя буфера, который будет создан,
если буфера с таким именем еще нет. Буфер помечается как не измененный
и переключается в режим только для чтения при завершении @code{with-temp-buffer-window}.

@c The argument @var{buffer-or-name} specifies the temporary buffer.  It
@c can be either a buffer, which must already exist, or a string, in which
@c case a buffer of that name is created, if necessary.  The buffer is
@c marked as unmodified and read-only when @code{with-temp-buffer-window}
@c exits.

Макрос не вызывает @code{temp-buffer-show-function}. Вместо этого,
он передает аргумент @var{action} в @code{display-buffer}
(@pxref{Choosing Window}) чтобы отобразить буфер.

@c This macro does not call @code{temp-buffer-show-function}.  Rather, it
@c passes the @var{action} argument to @code{display-buffer}
@c (@pxref{Choosing Window}) in order to display the buffer.

Если не задан аргумент @var{quit-function}, то возвращается значение
крайней формы @var{body}. Иначе вызывается @var{quit-function} с
двумя аргументами: окном отображающим буфер и результатом
@var{body}. И результатом выполнения макроса становится результат @var{quit-function}.

@c The value of the last form in @var{body} is returned, unless the
@c argument @var{quit-function} is specified.  In that case, it is called
@c with two arguments: the window showing the buffer and the result of
@c @var{body}.  The final return value is then whatever @var{quit-function}
@c returns.

@vindex temp-buffer-window-setup-hook
@vindex temp-buffer-window-show-hook
Макрос использует обыкновенный перехватчик @code{temp-buffer-window-setup-hook}
и @code{temp-buffer-window-show-hook}, в местах аналогичных соответствующим
перехватчикам в @code{with-output-to-temp-buffer}.

@c This macro uses the normal hooks @code{temp-buffer-window-setup-hook}
@c and @code{temp-buffer-window-show-hook} in place of the analogous hooks
@c run by @code{with-output-to-temp-buffer}.
@end defmac

Две следующих конструкции сильно похожи на @code{with-temp-buffer-window},
но все таки отличается как описано ниже:

@c The two constructs described next are mostly identical to
@c @code{with-temp-buffer-window} but differ from it as specified:

@defmac with-current-buffer-window buffer-or-name action quit-function &rest body
Макрос аналогичен @code{with-temp-buffer-window}, но при этом делает
@var{buffer-or-name} текущим при выполнении @var{body}.

@c This macro is like @code{with-temp-buffer-window} but unlike that makes
@c the buffer specified by @var{buffer-or-name} current for running
@c @var{body}.
@end defmac

@defmac with-displayed-buffer-window buffer-or-name action quit-function &rest body
Макрос аналогичен @code{with-current-buffer-window}, но отображает
@var{buffer-or-name} @emph{до} запуска @var{body}.

@c This macro is like @code{with-current-buffer-window} but unlike that
@c displays the buffer specified by @var{buffer-or-name} @emph{before}
@c running @var{body}.
@end defmac

Окно показывающее временный буфер может быть растянуто до размера буфера
при использовании слеюущего режима:

@c A window showing a temporary buffer can be fit to the size of that
@c buffer using the following mode:

@defopt temp-buffer-resize-mode
Если данный дополнительный режим активен, окно показывающее временный
буфера будет автоматически изменять размер, чтобы внего поместилось
содержимое буфера.

@c When this minor mode is enabled, windows showing a temporary buffer are
@c automatically resized to fit their buffer's contents.

Окно изменяет размер если и только если оно было специально создано для
буфера. В частности, окна которые раньше показывали другие буфер
на масштабируются. По умолчанию, режим использут @code{fit-window-to-buffer}
(@pxref{Resizing Windows}) для масштабирования. Можно задать и другие
функции с помощью опций настройки @code{temp-buffer-max-height} и
@code{temp-buffer-max-width}.

@c A window is resized if and only if it has been specially created for the
@c buffer.  In particular, windows that have shown another buffer before
@c are not resized.  By default, this mode uses @code{fit-window-to-buffer}
@c (@pxref{Resizing Windows}) for resizing.  You can specify a different
@c function by customizing the options @code{temp-buffer-max-height} and
@c @code{temp-buffer-max-width} below.
@end defopt

@defopt temp-buffer-max-height
Опция определяет максимальную высоту (в строках) окна
отображающего временный буфер, когда активен режим @code{temp-buffer-resize-mode}.
Значением может быть функция, которая будет вызываться для выбора высоты
буфера. Функция получает один аргумент, буфер, и должна возвращать
положительное целое число. При вызове функции окно, размер которого
будет изменен является выделенным.

@c This option specifies the maximum height (in lines) of a window
@c displaying a temporary buffer when @code{temp-buffer-resize-mode} is
@c enabled.  It can also be a function to be called to choose the height
@c for such a buffer.  It gets one argument, the buffer, and should return
@c a positive integer.  At the time the function is called, the window to
@c be resized is selected.
@end defopt

@defopt temp-buffer-max-width
Опция определяет максимальную ширину окна (в колонках),
отображающего временный буфер, когда активен режим @code{temp-buffer-resize-mode}.
Значением может быть функция, которая будет вызываться для выбора высоты
буфера. Функция получает один аргумент, буфер, и должна возвращать
положительное целое число. При вызове функции окно, размер которого
будет изменен является выделенным.

@c This option specifies the maximum width of a window (in columns)
@c displaying a temporary buffer when @code{temp-buffer-resize-mode} is
@c enabled.  It can also be a function to be called to choose the width for
@c such a buffer.  It gets one argument, the buffer, and should return a
@c positive integer.  At the time the function is called, the window to be
@c resized is selected.
@end defopt

Следующая функция использует текущий буфер для временного отображения:
@c The following function uses the current buffer for temporal display:

@defun momentary-string-display string position &optional char message
Функция сразу отображает @var{string} в текущем буфере в позии
@var{position}. Функция не оказывает влияения на список отмены
(undo list) и на статус изменения буфера.

@c This function momentarily displays @var{string} in the current buffer at
@c @var{position}.  It has no effect on the undo list or on the buffer's
@c modification status.

Отображение остается до следующего события ввода. Если следующее
событие ввода @var{char}, @code{momentary-string-display} его игнорирует
и выходит. Иначе, событие остается буферизованным для последующей
обработки. Таким образом, ввод @var{char} просто удаляет временно
отображаемую функцией строку, а ввод (скажем) @kbd{C-f} будет удалять
врменно отображаемую функцией строку и позднее (предположительно) переместит
точку курсора вперед. Аргумент @var{char} по умолчанию пробел.

@c The momentary display remains until the next input event.  If the next
@c input event is @var{char}, @code{momentary-string-display} ignores it
@c and returns.  Otherwise, that event remains buffered for subsequent use
@c as input.  Thus, typing @var{char} will simply remove the string from
@c the display, while typing (say) @kbd{C-f} will remove the string from
@c the display and later (presumably) move point forward.  The argument
@c @var{char} is a space by default.

Возвращаемое значение @code{momentary-string-display} не имеет смысла.
@c The return value of @code{momentary-string-display} is not meaningful.

Если строка @var{string} не содержит управляющих символов, того го же
эффекта можно добиться более общим способом создав (и потом удалив)
оверлей (overlay) со свойством @code{before-string}.
@xref{Overlay Properties}.

@c If the string @var{string} does not contain control characters, you can
@c do the same job in a more general way by creating (and then subsequently
@c deleting) an overlay with a @code{before-string} property.
@c @xref{Overlay Properties}.

Если @var{message} не-@code{nil}, оно будет отображено в эхо
области, пока @var{string} отображается в буфере. Если @var{message} @code{nil},
показыавется сообщение по умолчанию указывающая что нужно ввести @var{char}
для продолжения.

@c If @var{message} is non-@code{nil}, it is displayed in the echo area
@c while @var{string} is displayed in the buffer.  If it is @code{nil}, a
@c default message says to type @var{char} to continue.

В примере, точка курсора изначально указывает на начало второй строки:

@c In this example, point is initially located at the beginning of the
@c second line:

@example
@group
---------- Buffer: foo ----------
This is the contents of foo.
@point{}Second line.
---------- Buffer: foo ----------
@end group

@group
(momentary-string-display
  "**** Important Message! ****"
  (point) ?\r
  "Type RET when done reading")
@result{} t
@end group

@group
---------- Buffer: foo ----------
This is the contents of foo.
**** Important Message! ****Second line.
---------- Buffer: foo ----------

---------- Echo Area ----------
Type RET when done reading
---------- Echo Area ----------
@end group
@end example
@end defun

@node Overlays
@section Оверлеи (Overlays)
@c @section Overlays
@cindex overlays
@c FIXME: mention intervals in this section?

@dfn{овелеи} (@dfn{overlays}) можно использовать, чтобы изменить вид текста
в буфере на экране. Оверлей (overlay) объект, который принадлежит определенному буферу,
и имеет заданные начало и конец. Так же оверлей (overlay) содержит свойства,
значение которых можно получить и установить; что повлияет на вид текста
который содержится в оверлее(overlay).

@c You can use @dfn{overlays} to alter the appearance of a buffer's text on
@c the screen, for the sake of presentation features.  An overlay is an
@c object that belongs to a particular buffer, and has a specified
@c beginning and end.  It also has properties that you can examine and set;
@c these affect the display of the text within the overlay.

@cindex scalability of overlays
@cindex overlays, scalability
Визульно эффект от применения оверлея (overlay) будет такой же как
от соответствующего текстового свойства (@pxref{Text Properties}).
Но, в результате разной реализации, оверлеи (overlay) как правило
не масштабируются хорошо (многие операции требуют времени пропорционального
количеству оверлеев в буфере). Если нужно повлиять на вид большого количества
частей текста в буфере, рекомендуется использовать текстовые свойства.

@c The visual effect of an overlay is the same as of the corresponding
@c text property (@pxref{Text Properties}).  However, due to a different
@c implementation, overlays generally don't scale well (many operations
@c take a time that is proportional to the number of overlays in the
@c buffer).  If you need to affect the visual appearance of many portions
@c in the buffer, we recommend using text properties.

Оверлей (overlay, наложение) использует маркеры, чтобы хранить
начало и конец; таким образом, при редактировании текста буфера,
начало и конец оверлея (overlay) смещаются аналогично маркерам.
При создании оверлея (overlay, наложения), можно задать должен
ли текст, вставляемый в начало, попадать внутрь или вне оверлея
(overlay, наложение), и так же можно задать для текста вставляемого
в конец оверлея(overlay).

@c An overlay uses markers to record its beginning and end; thus,
@c editing the text of the buffer adjusts the beginning and end of each
@c overlay so that it stays with the text.  When you create the overlay,
@c you can specify whether text inserted at the beginning should be
@c inside the overlay or outside, and likewise for the end of the overlay.

@menu
* Managing Overlays::   Создание и перемещение оверлеев (overlay, наложение).
* Overlay Properties::  Как читать и устанавливать свойства.
                          Как свойства влияют на отображение.
* Finding Overlays::    Поиск оверлеев (overlays).
@end menu

@c @menu
@c * Managing Overlays::   Creating and moving overlays.
@c * Overlay Properties::  How to read and set properties.
@c                           What properties do to the screen display.
@c * Finding Overlays::    Searching for overlays.
@c @end menu

@node Managing Overlays
@subsection Управление Оверлеями (Overlays)
@c @subsection Managing Overlays
@cindex managing overlays
@cindex overlays, managing

  Данный раздел описывает функции для создания, удаления и перемещения
оверлеев (overlays), и получения их содержимого. Изменения оверлеев (overlays)
не сохраняются в списке отмены буфера (buffer's undo list), так как
оверлеи (overlay) не являются частью содержимого буфера.

@c   This section describes the functions to create, delete and move
@c overlays, and to examine their contents.  Overlay changes are not
@c recorded in the buffer's undo list, since the overlays are not
@c part of the buffer's contents.

@defun overlayp object
Функция возвращает @code{t} если @var{object} является оверлеем (overlay).
@c This function returns @code{t} if @var{object} is an overlay.
@end defun

@defun make-overlay start end &optional buffer front-advance rear-advance
Функция создает и возвращает оверлей (overlay) который относится
к буферу @var{buffer} и имеет диапазон от @var{start} до @var{end}.
@var{start} и @var{end} должны задавать позиции в буфере; они могут
быть целыми или маркерами. Если @var{buffer} не задан, оверлей (overlay)
будет создан для текущего буфера.

@c This function creates and returns an overlay that belongs to
@c @var{buffer} and ranges from @var{start} to @var{end}.  Both @var{start}
@c and @var{end} must specify buffer positions; they may be integers or
@c markers.  If @var{buffer} is omitted, the overlay is created in the
@c current buffer.

@cindex empty overlay
@cindex overlay, empty
Оверлей (overlay) чьи @var{start} и @var{end} задают одну и туже
позицию называются @dfn{пустым} (@dfn{empty}). Не-пустой оверлей может
стать пустым если текст между @var{start} и @var{end} удален.
Когда оверлей становится пустым, по умолчанию он не удаляется, но
при помощи свойства @samp{evaporate} можно задать его удаление.
(@pxref{Overlay Properties, evaporate property}).

@c An overlay whose @var{start} and @var{end} specify the same buffer
@c position is known as @dfn{empty}.  A non-empty overlay can become
@c empty if the text between its @var{start} and @var{end} is deleted.
@c When that happens, the overlay is by default not deleted, but you can
@c cause it to be deleted by giving it the @samp{evaporate} property
@c (@pxref{Overlay Properties, evaporate property}).

Аргументы @var{front-advance} и @var{rear-advance} задают тип вставки
маркера для начала и конца оверлея (overlay) соответственно. @xref{Marker Insertion
Types}. Если они оба @code{nil}, по умолчанию, тогда оверлей (overlay)
расширяется для включения текста вставляемого в начало, но не текста
вставляемого в конце. Если @var{front-advance} не-@code{nil}, текст
втсавляемый в начало не включается в оверлей (overlay). Если @var{rear-advance}
не-@code{nil}, текст вставляемый в конце оверлея (overlay) включается
в оверлей.

@c The arguments @var{front-advance} and @var{rear-advance} specify the
@c marker insertion type for the start of the overlay and for the end of
@c the overlay, respectively.  @xref{Marker Insertion Types}.  If they
@c are both @code{nil}, the default, then the overlay extends to include
@c any text inserted at the beginning, but not text inserted at the end.
@c If @var{front-advance} is non-@code{nil}, text inserted at the
@c beginning of the overlay is excluded from the overlay.  If
@c @var{rear-advance} is non-@code{nil}, text inserted at the end of the
@c overlay is included in the overlay.
@end defun

@defun overlay-start overlay
Функция возвращает позицию в которой навинается оверлей @var{overlay},
в виде целого.

@c This function returns the position at which @var{overlay} starts,
@c as an integer.
@end defun

@defun overlay-end overlay
Функция возвращает позицию в которой заканчивается оверлей @var{overlay},
в виде целого.

@c This function returns the position at which @var{overlay} ends,
@c as an integer.
@end defun

@defun overlay-buffer overlay
Функция возвращает буфер к которому относится оверлей @var{overlay}.
Если оверлей @var{overlay} был удален возвращается @code{nil}.

@c This function returns the buffer that @var{overlay} belongs to.  It
@c returns @code{nil} if @var{overlay} has been deleted.
@end defun

@defun delete-overlay overlay
Функция удаляет @var{overlay}. Оверлей (overlay) продолжает существовать
как Lisp объект, и его список свойств остается не изменным, но он перестает
быть привязанным к буферу, и больше не оказывает эффекта на отображение.

@c This function deletes @var{overlay}.  The overlay continues to exist as
@c a Lisp object, and its property list is unchanged, but it ceases to be
@c attached to the buffer it belonged to, and ceases to have any effect on
@c display.

Удаленный оверлей (overlay) не отключается навсегда. Можно его снова
привязать к буферу, задав ему новую позицию при помощи @code{move-overlay}.

@c A deleted overlay is not permanently disconnected.  You can give it a
@c position in a buffer again by calling @code{move-overlay}.
@end defun

@defun move-overlay overlay start end &optional buffer
Функция перемещает оверлей @var{overlay} в @var{buffer}, и устанавливает
границы @var{start} и @var{end}. Оба аргумента @var{start} и @var{end}
должны задавать позицию в буфере; то есть быть целыми числами или маркерами.

@c This function moves @var{overlay} to @var{buffer}, and places its bounds
@c at @var{start} and @var{end}.  Both arguments @var{start} and @var{end}
@c must specify buffer positions; they may be integers or markers.

Если @var{buffer} не задан, @var{overlay} остается в том же буфере,
к которому был привязан; если при этом @var{overlay} является удаленным,
то приявязывается к текущему буферу.

@c If @var{buffer} is omitted, @var{overlay} stays in the same buffer it
@c was already associated with; if @var{overlay} was deleted, it goes into
@c the current buffer.

Возвращается @var{overlay}.
@c The return value is @var{overlay}.

Данная функция является единственным правильным способом изменения
границ оверлея. Не стоит изменять маркеры на границе оверлея вручную, так
как при этом не будут обновлены другие важдные структуры данных, и может
привести к потере оверлея.

@c This is the only valid way to change the endpoints of an overlay.  Do
@c not try modifying the markers in the overlay by hand, as that fails to
@c update other vital data structures and can cause some overlays to be
@c lost.
@end defun

@defun remove-overlays &optional start end name value
Функция удаляет все оверлеи между @var{start} и @var{end}, у
которых свойство @var{name} имеет значение @var{value}. Функция может переместить
границы оверлеев или разделить их.

@c This function removes all the overlays between @var{start} and
@c @var{end} whose property @var{name} has the value @var{value}.  It can
@c move the endpoints of the overlays in the region, or split them.

Если @var{name} не задано или @code{nil}, тогда будут удалены все оверлеи
в заданной области. Если @var{start} и/или @var{end} не заданы или @code{nil},
тогда будет использоваться начало и конец буфера соответственно. Следовательно,
@code{(remove-overlays)} удаляет все оверлеи в текущем буфере.

@c If @var{name} is omitted or @code{nil}, it means to delete all overlays in
@c the specified region.  If @var{start} and/or @var{end} are omitted or
@c @code{nil}, that means the beginning and end of the buffer respectively.
@c Therefore, @code{(remove-overlays)} removes all the overlays in the
@c current buffer.
@end defun

@defun copy-overlay overlay
Функция возвращает копию оверлея @var{overlay}. Копия имеет те же
границы и свойства, что и @var{overlay}. Но, маркеры вставки в начале
и конце оверлея имеют значения по умолчанию (@pxref{Marker Insertion Types}).

@c This function returns a copy of @var{overlay}.  The copy has the same
@c endpoints and properties as @var{overlay}.  However, the marker
@c insertion type for the start of the overlay and for the end of the
@c overlay are set to their default values (@pxref{Marker Insertion
@c Types}).
@end defun

  Несколько примеров:
  @c Here are some examples:

@example
;; @r{Create an overlay.}
(setq foo (make-overlay 1 10))
     @result{} #<overlay from 1 to 10 in display.texi>
(overlay-start foo)
     @result{} 1
(overlay-end foo)
     @result{} 10
(overlay-buffer foo)
     @result{} #<buffer display.texi>
;; @r{Give it a property we can check later.}
(overlay-put foo 'happy t)
     @result{} t
;; @r{Verify the property is present.}
(overlay-get foo 'happy)
     @result{} t
;; @r{Move the overlay.}
(move-overlay foo 5 20)
     @result{} #<overlay from 5 to 20 in display.texi>
(overlay-start foo)
     @result{} 5
(overlay-end foo)
     @result{} 20
;; @r{Delete the overlay.}
(delete-overlay foo)
     @result{} nil
;; @r{Verify it is deleted.}
foo
     @result{} #<overlay in no buffer>
;; @r{A deleted overlay has no position.}
(overlay-start foo)
     @result{} nil
(overlay-end foo)
     @result{} nil
(overlay-buffer foo)
     @result{} nil
;; @r{Undelete the overlay.}
(move-overlay foo 1 20)
     @result{} #<overlay from 1 to 20 in display.texi>
;; @r{Verify the results.}
(overlay-start foo)
     @result{} 1
(overlay-end foo)
     @result{} 20
(overlay-buffer foo)
     @result{} #<buffer display.texi>
;; @r{Moving and deleting the overlay does not change its properties.}
(overlay-get foo 'happy)
     @result{} t
@end example

  Emacs хранит оверлеи (overlays) для каждого буфера в двух списках,
поделнных относительно некоторой центральной позции. Один список
расширяется назад от центральной позиции, другой вперед относительно этой
же центральной позиции. Центральная позиция может быть в любом месте
буфера.

@c   Emacs stores the overlays of each buffer in two lists, divided
@c around an arbitrary center position.  One list extends backwards
@c through the buffer from that center position, and the other extends
@c forwards from that center position.  The center position can be anywhere
@c in the buffer.

@defun overlay-recenter pos
Функция центрирует оверлеи (overlays) текущего буфера, относительно
позиции @var{pos}. В результате поиск оверлеев (overlays) находящихся
рядом с @var{pos}, выполняется быстрее, и замедляется для позиций
находящихся дальше от @var{pos}.

@c This function recenters the overlays of the current buffer around
@c position @var{pos}.  That makes overlay lookup faster for positions
@c near @var{pos}, but slower for positions far away from @var{pos}.
@end defun

  Цикл который сканирует буфер вперед, создающий оверлеии, может
работать быстрее если сначала выполнить @code{(overlay-recenter (point-max))}.

@c   A loop that scans the buffer forwards, creating overlays, can run
@c faster if you do @code{(overlay-recenter (point-max))} first.

@node Overlay Properties
@subsection Свойства Оверлеев (Overlays)
@c @subsection Overlay Properties
@cindex overlay properties

  Свойства оверлея (overlay) аналогичны текстовым свойствам, и свойства
которые изменяют отображение символов могут быть в тексте или в оверлее. Но
в большинстве случаев они разные. @xref{Text Properties}, для сравнения.

@c   Overlay properties are like text properties in that the properties that
@c alter how a character is displayed can come from either source.  But in
@c most respects they are different.  @xref{Text Properties}, for comparison.

  Текстовые свойства считаются частью текста; оверлеи и их свойства
специально сделаны как не часть текста. Таким образом, копирование
текста между разным буферами и строками сохраняет текстовые свойства,
но не сохраняет оверлеи. Изменение текстовых свойств, помечает буфер
как измененный, в то время как перемещение оверлея или изменение его
свойств нет. В отличие от изменения текстовых свойств, изменение свойст
оверлеев не сохраняется в списке отмены буфера (undo list).

@c   Text properties are considered a part of the text; overlays and
@c their properties are specifically considered not to be part of the
@c text.  Thus, copying text between various buffers and strings
@c preserves text properties, but does not try to preserve overlays.
@c Changing a buffer's text properties marks the buffer as modified,
@c while moving an overlay or changing its properties does not.  Unlike
@c text property changes, overlay property changes are not recorded in
@c the buffer's undo list.

  Так как большее чем один оверлей может задавать значение свойства
для одного и того же символа, Emacs позволяет задать значение приоритета
для каждого оверлея. Значение приоритета позволяет решить, какой из
перекрывающихся оверлеев ``победит''.

@c   Since more than one overlay can specify a property value for the
@c same character, Emacs lets you specify a priority value of each
@c overlay.  The priority value is used to decide which of the
@c overlapping overlays will ``win''.

  Следующие функции считывают и устанавливают свойства оверлеев:
  @c These functions read and set the properties of an overlay:

@defun overlay-get overlay prop
Функция возвращает значение свойства @var{prop} для оверлея @var{overlay},
если задано. Если @var{overlay} не хранит значение для этого свойства, но
имеет свойство @code{category}, которое является символом, тогда
используется свойство @var{prop} этого символа. Иначе, возвращается
@code{nil}.

@c This function returns the value of property @var{prop} recorded in
@c @var{overlay}, if any.  If @var{overlay} does not record any value for
@c that property, but it does have a @code{category} property which is a
@c symbol, that symbol's @var{prop} property is used.  Otherwise, the value
@c is @code{nil}.
@end defun

@defun overlay-put overlay prop value
Функция устанавливает значение свойства @var{prop} для
оверлея @var{overlay} в @var{value}. Возвращается @var{value}.

@c This function sets the value of property @var{prop} recorded in
@c @var{overlay} to @var{value}.  It returns @var{value}.
@end defun

@defun overlay-properties overlay
Функция возвращает копию списка свойств оверлея @var{overlay}.
@c This returns a copy of the property list of @var{overlay}.
@end defun

  Функция @code{get-char-property} проверяет свойства оверлея и
текстовые свойства для заданного символа. @xref{Examining Properties}.

@c   See also the function @code{get-char-property} which checks both
@c overlay properties and text properties for a given character.
@c @xref{Examining Properties}.

  Многие свойства овелеев имеют специальные значения; ниже их
описание:

@c   Many overlay properties have special meanings; here is a table
@c of them:

@table @code
@item priority
@kindex priority @r{(overlay property)}
Значние данного свойства определяет приоритет оверлея.
Стоит использовать значения @code{nil} (или ноль), или положительное
целое. Любое другое значение будет иметь неопределенное
поведение.

@c This property's value determines the priority of the overlay.
@c If you want to specify a priority value, use either @code{nil}
@c (or zero), or a positive integer.  Any other value has undefined behavior.

Приоритет используется, когда два или более оверлеев накрывают
один символ и оба задают одно свойство, тогда используется
значение от того, чье значение приоритета больше.
(Для свойства @code{face}, значение в овелее с наибольшим приоритетом
не полностью перекрывает другие значения; напротив, атрибуты
шрифта переопределяют атрибуты шрифтов с низшим приоритетом свойства
@code{face}). Если два оверлея имеют одно и тоже значение приоритета, и один
вложен в другой, тогда приоритет внутреннего будет выше. Если не
один не вложен в другой, тогда нельзя с точностью сказать,
как оверлей будет иметь больший приоритет.

@c The priority matters when two or more overlays cover the same
@c character and both specify the same property; the one whose
@c @code{priority} value is larger overrides the other.  (For the
@c @code{face} property, the higher priority overlay's value does not
@c completely override the other value; instead, its face attributes
@c override the face attributes of the lower priority @code{face}
@c property.)  If two overlays have the same priority value, and one is
@c nested in the other, then the inner one will prevail over the outer
@c one.  If neither is nested in the other then you should not make
@c assumptions about which overlay will prevail.

В настоящее время, свойства оверлеев имеют приоритет над текстовыми свойствами.
@c Currently, all overlays take priority over text properties.

Стоит отметить, что Emacs иногда используется не-числовые значения
приоритета, для некоторых внутренних оверлеев, поэтому не стоит
вычислять арифметические выражения для приоритетов оверлеев,
(конечно если они не были явно созданны, с числовыми значениями). В частности,
оверлей используемый для показа региона использует значение
приоритета в форме @w{@code{(@var{primary}. @var{secondary})}}, где
значение @var{primary} используется как описано выше, и @var{secondary}
запасное значение, используемое, когда @var{primary} и отношений вложенности
не достаточно для определения приоритета между оверлеями (overlays). Но,
не рекомендуется создавать программы на Lisp, использующими
данную особенности реализации; если нужно поместить оверлеи
в порядке приоритета, стоит использовать аргумент @var{sorted}
для @code{overlay-at}. @xref{Finding Overlays}.

@c Note that Emacs sometimes uses non-numeric priority values for some of
@c its internal overlays, so do not try to do arithmetic on the priority
@c of an overlay (unless it is one that you created).  In particular, the
@c overlay used for showing the region uses a priority value of the form
@c @w{@code{(@var{primary} . @var{secondary})}}, where the @var{primary}
@c value is used as described above, and @var{secondary} is the fallback
@c value used when @var{primary} and the nesting considerations fail to
@c resolve the precedence between overlays.  However, you are advised not
@c to design Lisp programs based on this implementation detail; if you
@c need to put overlays in priority order, use the @var{sorted} argument
@c of @code{overlays-at}.  @xref{Finding Overlays}.

@item window
@kindex window @r{(overlay property)}
Если свойство @code{window} не-@code{nil}, тогда оверлей
применяется только к этому окну.

@c If the @code{window} property is non-@code{nil}, then the overlay
@c applies only on that window.

@item category
@kindex category @r{(overlay property)}
Если оверлей имеет свойство @code{category}, то оно зовется
@dfn{категорией} (@dfn{category}) оверлея. Значение должно быть
символом. Свойства символа служат значениями по умолчанию для свйоств
оверлея.

@c If an overlay has a @code{category} property, we call it the
@c @dfn{category} of the overlay.  It should be a symbol.  The properties
@c of the symbol serve as defaults for the properties of the overlay.

@item face
@kindex face @r{(overlay property)}
Свйоство контролирует внешний вид текста (стиль текста) (@pxref{Faces}).
Значением может быть:

@c This property controls the appearance of the text (@pxref{Faces}).
@c The value of the property can be the following:

@itemize @bullet
@item
Имя стиля (символ или строка).
@c A face name (a symbol or string).

@item
Анонимный стиль: список свойств в форме @code{(@var{keyword} @var{value} @dots{})},
где каждый @var{keyword} имя стиля аттрибута и @var{value} значение
для этого аттрибута.

@c An anonymous face: a property list of the form @code{(@var{keyword}
@c @var{value} @dots{})}, where each @var{keyword} is a face attribute
@c name and @var{value} is a value for that attribute.

@item
Список стилей. Каждый элемент списка должен быть именем стила или
анонимным стилем. Данный способ определяет стиль, который является
агрегатором аттрибутов всех перечисленных стилей. Стили в начале списка
имеют больший приоритет.

@c A list of faces.  Each list element should be either a face name or an
@c anonymous face.  This specifies a face which is an aggregate of the
@c attributes of each of the listed faces.  Faces occurring earlier in
@c the list have higher priority.

@item
cons ячейка в форме @code{(foreground-color . @var{color-name})}
или @code{(background-color . @var{color-name})}. Данный пункт, позволяет
задать цвета фона и текста, аналогично @code{(:foreground @var{color-name})}
или @code{(:background @var{color-name})}. Данная форма поддерживается
для обратной совместимости, и ее стоит избегать.

@c A cons cell of the form @code{(foreground-color . @var{color-name})}
@c or @code{(background-color . @var{color-name})}.  This specifies the
@c foreground or background color, similar to @code{(:foreground
@c @var{color-name})} or @code{(:background @var{color-name})}.  This
@c form is supported for backward compatibility only, and should be
@c avoided.
@end itemize

@item mouse-face
@kindex mouse-face @r{(overlay property)}
This property is used instead of @code{face} when the mouse is within
the range of the overlay.  However, Emacs ignores all face attributes
from this property that alter the text size (e.g., @code{:height},
@code{:weight}, and @code{:slant}).  Those attributes are always the
same as in the unhighlighted text.

@item display
@kindex display @r{(overlay property)}
Свойство активирует разные функции (features) которые изменяют
способ отображения текста. Например, текст может быть длинее
или короче, выше или ниже, шире или уже, или заменен на изображение.
@xref{Display Property}.

@c This property activates various features that change the
@c way text is displayed.  For example, it can make text appear taller
@c or shorter, higher or lower, wider or narrower, or replaced with an image.
@c @xref{Display Property}.

@item help-echo
@kindex help-echo @r{(overlay property)}
Если оверлей имеет заданное свойство @code{help-echo}, тогда при движении
мыши над текстов внутри оверлея, Emacs отображает строку помощи в
эхо области, или в во окне подсказки (tooltip window). Подробно
об этом можно почитать @ref{Text help-echo}.

@c If an overlay has a @code{help-echo} property, then when you move the
@c mouse onto the text in the overlay, Emacs displays a help string in the
@c echo area, or in the tooltip window.  For details see @ref{Text
@c help-echo}.

@item field
@kindex field @r{(overlay property)}
@c Copied from Special Properties.
Последовательные символы с одним и тем же значением свойства @code{field}
составляют @emph{поле} (@emph{field}). Некоторые функции движения, в том
числе и @code{forward-word} и @code{beginning-of-line} прекращают движение
на границе поле. @xref{Fields}.

@c Consecutive characters with the same @code{field} property constitute a
@c @emph{field}.  Some motion functions including @code{forward-word} and
@c @code{beginning-of-line} stop moving at a field boundary.
@c @xref{Fields}.

@item modification-hooks
@kindex modification-hooks @r{(overlay property)}
Данное свойство может содежрать список функций, которые будут вызываться
если изменяется либой символ или выполняется вставка строго внутри оверлея.

@c This property's value is a list of functions to be called if any
@c character within the overlay is changed or if text is inserted strictly
@c within the overlay.

Функции перехватчика вызываются до и после каждого изменения.
Если функция сохраняет получаемую информацию и сравнивает
примечания между вызовами, они могут точно определить, что
было изменено между вызовами.

@c The hook functions are called both before and after each change.
@c If the functions save the information they receive, and compare notes
@c between calls, they can determine exactly what change has been made
@c in the buffer text.

При вызове до изменения, каждая функция получает четыре аргумента: оверлей,
@code{nil}, и начало и конец изменяемого текста.

@c When called before a change, each function receives four arguments: the
@c overlay, @code{nil}, and the beginning and end of the text range to be
@c modified.

При вызове после изменения, каждая функция получает пять аргументов:
оверлей, @code{t}, начало и конец изменяемого текста, и длину текста
до изменения (который был вместо изменной части).
Для вставки, длина текста для изменения 0; для удаления, количество
удаляемых символов и при этом начало и конец области изменения совпадают).

@c When called after a change, each function receives five arguments: the
@c overlay, @code{t}, the beginning and end of the text range just
@c modified, and the length of the pre-change text replaced by that range.
@c (For an insertion, the pre-change length is zero; for a deletion, that
@c length is the number of characters deleted, and the post-change
@c beginning and end are equal.)

Если функции перехватчики изменяют буфер, они должны связывать @code{inhiit-modification-hooks}
с @code{t}, пока выполняется изменение, чтобы избежать
конфликтов с внутренними механизмами которые вызывают данные перехватчики.

@c If these functions modify the buffer, they should bind
@c @code{inhibit-modification-hooks} to @code{t} around doing so, to
@c avoid confusing the internal mechanism that calls these hooks.

Текстовые свойства так же поддерживают @code{modification-hooks},
но они несколько отличаются (@pxref{Special Properties}).

@c Text properties also support the @code{modification-hooks} property,
@c but the details are somewhat different (@pxref{Special Properties}).

@item insert-in-front-hooks
@kindex insert-in-front-hooks @r{(overlay property)}
Значением свойства может быть список функций, которые будут вызываться
перед и после вставки текста в начало оверлея. Вызов выполняется
аналогично функциям из @code{modification-hooks}.

@c This property's value is a list of functions to be called before and
@c after inserting text right at the beginning of the overlay.  The calling
@c conventions are the same as for the @code{modification-hooks} functions.

@item insert-behind-hooks
@kindex insert-behind-hooks @r{(overlay property)}
Значением свойства может быть список функций, которые будут вызываться
до и после вставки текста в конец оверлея. Вызов выполняется
аналогично функциям из @code{modification-hooks}.

@c This property's value is a list of functions to be called before and
@c after inserting text right at the end of the overlay.  The calling
@c conventions are the same as for the @code{modification-hooks} functions.

@item invisible
@kindex invisible @r{(overlay property)}
Свойство @code{invisible} может сделать текст в оверлеи невидимым,
то есть он не будет отображаться на экране. Подробности, @xref{Invisible Text}.

@c The @code{invisible} property can make the text in the overlay
@c invisible, which means that it does not appear on the screen.
@c @xref{Invisible Text}, for details.

@item intangible
@kindex intangible @r{(overlay property)}
Свойство @code{intagible} для оверлея работает как текстовое
свойство @code{intagible}. Свойство является устаревшим. Подробнее, @xref{Special
Properties}.

@c The @code{intangible} property on an overlay works just like the
@c @code{intangible} text property.  It is obsolete.  @xref{Special
@c Properties}, for details.

@item isearch-open-invisible
Свойство определяет что при последовательном поиске
невидимые оверлеи будут показываться постоянно, если совпадение попадает в невидимую часть.
@xref{Invisible Text}.

@c This property tells incremental search how to make an invisible overlay
@c visible, permanently, if the final match overlaps it.  @xref{Invisible
@c Text}.

@item isearch-open-invisible-temporary
Свойство указывает последовательному поиску временно показывать
невидимый оверлей, при поиске. @xref{Invisible Text}.

@c This property tells incremental search how to make an invisible overlay
@c visible, temporarily, during the search.  @xref{Invisible Text}.

@item before-string
@kindex before-string @r{(overlay property)}
Значением свойства является строка которая будет отображаться
в начале оверлея. Строка не становится частью буфера, только отображается
на экране.

@c This property's value is a string to add to the display at the beginning
@c of the overlay.  The string does not appear in the buffer in any
@c sense---only on the screen.

@item after-string
@kindex after-string @r{(overlay property)}
Значением свойства является строка, которая будет отображаться после
оверлея. Строка не становится частью буфера, только отображается
на экране.

@c This property's value is a string to add to the display at the end of
@c the overlay.  The string does not appear in the buffer in any
@c sense---only on the screen.

@item line-prefix
Свойство задает префикс, который будет отображаться
в начале каждой строки не являющейся продолжением. @xref{Truncation}.

@c This property specifies a display spec to prepend to each
@c non-continuation line at display-time.  @xref{Truncation}.

@item wrap-prefix
Свойство определяет строку, которая будет отображаться
пред каждой продолжающейся строкой. @xref{Truncation}.

@c This property specifies a display spec to prepend to each continuation
@c line at display-time.  @xref{Truncation}.

@item evaporate
@kindex evaporate @r{(overlay property)}
Если свойство не-@code{nil}, оверлей будет автоматически удален, если
станет пустым (т.е. если его длина станет ноль). Если задать пустому
оверлею (@pxref{Managing Overlays, empty overlay}) не-@code{nil}
для свойства @code{evaporate}, то он сразу будет удален. Если же
оверлей не имеет данного свойства, он не будет удален, если
будет удален текст между его границами.

@c If this property is non-@code{nil}, the overlay is deleted automatically
@c if it becomes empty (i.e., if its length becomes zero).  If you give
@c an empty overlay (@pxref{Managing Overlays, empty overlay}) a
@c non-@code{nil} @code{evaporate} property, that deletes it immediately.
@c Note that, unless an overlay has this property, it will not be deleted
@c when the text between its starting and ending positions is deleted
@c from the buffer.

@item keymap
@cindex keymap of character (and overlays)
@kindex keymap @r{(overlay property)}
Если свойство не-@code{nil}, оно задает раскладку для части текста. Данная раскладка
будет использоваться если символ после точки находится внутри
оверлея, и является более приоритетной по отношению к другим раскладкам.
@xref{Active Keymaps}.

@c If this property is non-@code{nil}, it specifies a keymap for a portion of the
@c text.  This keymap is used when the character after point is within the
@c overlay, and takes precedence over most other keymaps.  @xref{Active Keymaps}.

@item local-map
@kindex local-map @r{(overlay property)}
Свойство @code{local-map} аналогично @code{keymap}, но заменяет локальную
раскладку буфера, а не расширяет существующую. Отсюда так же следует,
что ее приоритет ниже, чем у раскладок дополнительных режимов.

@c The @code{local-map} property is similar to @code{keymap} but replaces the
@c buffer's local map rather than augmenting existing keymaps.  This also means it
@c has lower precedence than minor mode keymaps.
@end table

Свойства @code{keymap} и @code{local-map} не влияют на строки
отображаемые @code{before-string}, @code{after-string}, или
свойства @code{display}. Они соответствуют только щелчкам мыши и
другим событиям мыши выполняемых над строкой. Чтобы присвоить специальное событие
мыши для строки, нужно задать ей свойство @code{keymap} или @code{local-map}.
@xref{Special Properties}.

@c The @code{keymap} and @code{local-map} properties do not affect a
@c string displayed by the @code{before-string}, @code{after-string}, or
@c @code{display} properties.  This is only relevant for mouse clicks and
@c other mouse events that fall on the string, since point is never on
@c the string.  To bind special mouse events for the string, assign it a
@c @code{keymap} or @code{local-map} text property.  @xref{Special
@c Properties}.

@node Finding Overlays
@subsection Поиск Оверлеев (Overlays)
@c @subsection Searching for Overlays
@cindex searching for overlays
@cindex overlays, searching for

@defun overlays-at pos &optional sorted
Функция возвращает список всех оверлеев, к которым относится символ
в позиции @var{pos} текущего буфера. Если @var{sorted} не-@code{nil},
список будет упорядочен в порядке уменьшения приоритета, иначе в произвольном
порядке. Оверлей содержит @var{pos}, если начинается до и заканчивается
после @var{pos}.

@c This function returns a list of all the overlays that cover the character at
@c position @var{pos} in the current buffer.  If @var{sorted} is non-@code{nil},
@c the list is in decreasing order of priority, otherwise it is in no particular
@c order.  An overlay contains position @var{pos} if it begins at or before
@c @var{pos}, and ends after @var{pos}.

Пример использования: функция возвращает список оверлеев которые
задают свойство @var{prop} для символа в точке курсора:

@c To illustrate usage, here is a Lisp function that returns a list of the
@c overlays that specify property @var{prop} for the character at point:

@smallexample
(defun find-overlays-specifying (prop)
  (let ((overlays (overlays-at (point)))
        found)
    (while overlays
      (let ((overlay (car overlays)))
        (if (overlay-get overlay prop)
            (setq found (cons overlay found))))
      (setq overlays (cdr overlays)))
    found))
@end smallexample
@end defun

@defun overlays-in beg end
Функция возвращает список оверлеев, которые пересекаются с регионом
от @var{beg} до @var{end}. Оверлей пересекается в регионом, если
содержит один или более символов из него; пустые оверлеи
(@pxref{Managing Overlays, empty overlay}) пересекаются
с регионом если они в @var{beg}, строго между @var{beg} и @var{end},
или @var{end}, когда @var{end} обозначает позицию в конце буфера.

@c This function returns a list of the overlays that overlap the region
@c @var{beg} through @var{end}.  An overlay overlaps with a region if it
@c contains one or more characters in the region; empty overlays
@c (@pxref{Managing Overlays, empty overlay}) overlap if they are at
@c @var{beg}, strictly between @var{beg} and @var{end}, or at @var{end}
@c when @var{end} denotes the position at the end of the buffer.
@end defun

@defun next-overlay-change pos
Функция возвращает следующую  за @var{pos} позицию в буфере в которой начинается
или  заканчивается оверлей. Если такой точки нет, то возвращается
@code{(point-max)}.

@c This function returns the buffer position of the next beginning or end
@c of an overlay, after @var{pos}.  If there is none, it returns
@c @code{(point-max)}.
@end defun

@defun previous-overlay-change pos
Функция возвращает предыдущую перед @var{pos} позицию в буфере,
в которой находится начало или конец оверлея. Если оверлея нет, возвращается
@code{(point-min)}.

@c This function returns the buffer position of the previous beginning or
@c end of an overlay, before @var{pos}.  If there is none, it returns
@c @code{(point-min)}.
@end defun

  В качестве примера, приводится упрощенная (и не эффективная) версия
примитивной функции @code{next-single-char-property-change}
(@pxref{Property Search}). Функция выполняет поиск вперед
начиная с позиции @var{pos}, места где изменяется свойство @code{prop},
за счет оверлея или текстового свойства.

@c   As an example, here's a simplified (and inefficient) version of the
@c primitive function @code{next-single-char-property-change}
@c (@pxref{Property Search}).  It searches forward from position
@c @var{pos} for the next position where the value of a given property
@c @code{prop}, as obtained from either overlays or text properties,
@c changes.

@smallexample
(defun next-single-char-property-change (position prop)
  (save-excursion
    (goto-char position)
    (let ((propval (get-char-property (point) prop)))
      (while (and (not (eobp))
                  (eq (get-char-property (point) prop) propval))
        (goto-char (min (next-overlay-change (point))
                        (next-single-property-change (point) prop)))))
    (point)))
@end smallexample

@node Size of Displayed Text
@section Размер Отображаемого Текста
@c @section Size of Displayed Text
@cindex size of text on display
@cindex character width on display

Так как не все символы имеют одинаковую ширину, функции в данном
разделе позволяют определить ширину символа. Связанные функции
описаны в @ref{Primitive Indent}, и @ref{Screen Lines}.

@c Since not all characters have the same width, these functions let you
@c check the width of a character.  @xref{Primitive Indent}, and
@c @ref{Screen Lines}, for related functions.

@defun char-width char
Функция возвращает ширину в колонках символа @var{char}, если
он будет отображен в текущем буфере (т.е. принимая во внимание
таблицу отображения буфера, если есть; @pxref{Display
Tables}). Ширина символа табуляции (tab) как правило @code{tab-width}
(@pxref{Usual Display}).

@c This function returns the width in columns of the character
@c @var{char}, if it were displayed in the current buffer (i.e., taking
@c into account the buffer's display table, if any; @pxref{Display
@c Tables}).  The width of a tab character is usually @code{tab-width}
@c (@pxref{Usual Display}).
@end defun

@defun string-width string
Функция возвращает ширину в колонках строки @var{string},
если она будет отображена в текущем буфере и выбранном окне.

@c This function returns the width in columns of the string @var{string},
@c if it were displayed in the current buffer and the selected window.
@end defun

@defun truncate-string-to-width string width &optional start-column padding ellipsis
Функция возвращает часть строки @var{string}, которая поместится в ширину
@var{width}, в качестве новой строки.

@c This function returns the part of @var{string} that fits within
@c @var{width} columns, as a new string.

Если @var{string} имеет ширину меньше @var{width}, тогда
результат будет совпадать с исходной строкой. Если один
из символов занимающих несколько колонок в @var{string}
выходит за @var{width}, этот символ не включается в результат.
Таким образом, результат, может быть короче чем @var{width}, но не длиннее.

@c If @var{string} does not reach @var{width}, then the result ends where
@c @var{string} ends.  If one multi-column character in @var{string}
@c extends across the column @var{width}, that character is not included in
@c the result.  Thus, the result can fall short of @var{width} but cannot
@c go beyond it.

Не обязательный аргумент @var{start-column} задает начальную колонку.
Если значение не-@code{nil}, тогда первые @var{start-column} колонок
исключаются из значения. Если один из символов занимающих несколько
колонок в @var{string} выходит попадает в первые @var{start-column},
то он не включается в результат.

@c The optional argument @var{start-column} specifies the starting column.
@c If this is non-@code{nil}, then the first @var{start-column} columns of
@c the string are omitted from the value.  If one multi-column character in
@c @var{string} extends across the column @var{start-column}, that
@c character is not included.

Не обязательный аргумент @var{padding}, если не-@code{nil}, задает
символ заполнения добавляемый в начало и конец результирующей строки, чтобы
расширить ее до ширину @var{width}. Символ заполнения, используется в конце
если результат короче @var{width}. Символ используется в начале, если
один из символов занимающих несколько колонок выходит за @var{start-column}.

@c The optional argument @var{padding}, if non-@code{nil}, is a padding
@c character added at the beginning and end of the result string, to extend
@c it to exactly @var{width} columns.  The padding character is used at the
@c end of the result if it falls short of @var{width}.  It is also used at
@c the beginning of the result if one multi-column character in
@c @var{string} extends across the column @var{start-column}.

@vindex truncate-string-ellipsis
Если @var{ellipsis} не-@code{nil}, то должно быть строкой, которая
заменит конец @var{string} (включая символы заполнения, описанные выше),
если она выйдет за @var{width}, если отображаемая ширина @var{string}
не меньше или равна отображаемой ширине @var{ellipsis}. Если @var{ellipsis}
не-@code{nil} и не строка, то она означает значение переменной
@code{truncate-string-ellipsis}.

@c If @var{ellipsis} is non-@code{nil}, it should be a string which will
@c replace the end of @var{string} (including any padding) if it extends
@c beyond @var{width}, unless the display width of @var{string} is equal
@c to or less than the display width of @var{ellipsis}.  If
@c @var{ellipsis} is non-@code{nil} and not a string, it stands for
@c the value of the variable @code{truncate-string-ellipsis}.

@example
(truncate-string-to-width "\tab\t" 12 4)
     @result{} "ab"
(truncate-string-to-width "\tab\t" 12 4 ?\s)
     @result{} "    ab  "
@end example
@end defun

Следующая функция возвращает размер в пикселях текста, если он
будет отображен в текущем окне. Функция используется
функциями @code{fit-window-to-buffer} и @code{fit-frame-to-buffer}
(@pxref{Resizing Windows}), чтобы сделать окно точно соответствующим
размеру текста.

@c The following function returns the size in pixels of text as if it were
@c displayed in a given window.  This function is used by
@c @code{fit-window-to-buffer} and @code{fit-frame-to-buffer}
@c (@pxref{Resizing Windows}) to make a window exactly as large as the text
@c it contains.

@defun window-text-pixel-size &optional window from to x-limit y-limit mode-and-header-line
Функция возвращает размер текст буфера окна @var{window} в пикселях.
@var{window} должно быть живым окном, по умолчанию используется выбранное.
Возвращается значение в виде cons ячейки содержащей максимальную
ширину в пикселях среди всех строк и максимальную высоту для всех строк.

@c This function returns the size of the text of @var{window}'s buffer in
@c pixels.  @var{window} must be a live window and defaults to the selected
@c one.  The return value is a cons of the maximum pixel-width of any text
@c line and the maximum pixel-height of all text lines.

Не обязательный аргумент @var{from}, если не-@code{nil}, задает начальную
позицию в буфере и по умолчанию является минимальной доступной позицией
буфера. Если @var{from} @code{t}, используется минимальная позиция в буфере
не являющаяся символом новой строки. Не обязательный аргумент @var{to},
если не-@code{nil}, задает конечную рассматриваемую позицию в буфере, и по
умолчанию максимально доступная позиция буфера. Если @var{to} @var{t},
используется максимально доступная позиция в буфере не являющаяся символом
перевода строки.

@c The optional argument @var{from}, if non-@code{nil}, specifies the first
@c text position to consider and defaults to the minimum accessible
@c position of the buffer.  If @var{from} is @code{t}, it uses the minimum
@c accessible position that is not a newline character.  The optional
@c argument @var{to}, if non-@code{nil}, specifies the last text position
@c to consider and defaults to the maximum accessible position of the
@c buffer.  If @var{to} is @code{t}, it uses the maximum accessible
@c position that is not a newline character.

Не обязательный аргумент @var{x-limit}, если не-@code{nil}, задает
максимальную ширину в пикселях, которая может быть возвращена.
Если @var{x-limit} @code{nil} или не задано, будет использоваться
ширина в пикселях тела окна @var{window} (@pxref{Window Sizes});
что является полезным если пользователь не намеревается изменять
размеры окна @var{window}. Иначе, данный параметр должен задавать
максимально предполагаемую ширину тела окна @var{window}. Текст
x-координата, которого выходит за @var{x-limit} игнорируется. Поэтому
вычисление ширины длинных строк может занимать некоторое время;
хорошей идеей является задание данного аргумента минимально необходимым;
в особенности, если буфер может содержать длинные строки, которые
в любом случае будут обрезаны.

@c The optional argument @var{x-limit}, if non-@code{nil}, specifies the
@c maximum pixel-width that can be returned.  @var{x-limit} @code{nil} or
@c omitted, means to use the pixel-width of @var{window}'s body
@c (@pxref{Window Sizes}); this is useful when the caller does not intend
@c to change the width of @var{window}.  Otherwise, the caller should
@c specify here the maximum width @var{window}'s body may assume.  Text
@c whose x-coordinate is beyond @var{x-limit} is ignored.  Since
@c calculating the width of long lines can take some time, it's always a
@c good idea to make this argument as small as needed; in particular, if
@c the buffer might contain long lines that will be truncated anyway.

Не обязательный аргумент @var{y-limit}, если не-@code{nil}, задает
максимальную высоту в пикселях, которая может быть возвращена. Строки
текста чья y-координата выходит за @var{y-limit} игнорируются. Таким образом
вычисление высоты в пикселях для большого буфера может занимать какое-то
время, поэтому задание данного аргумента имеет смысл; в особенности,
если вызывающий не знает размера буфера.

@c The optional argument @var{y-limit}, if non-@code{nil}, specifies the
@c maximum pixel-height that can be returned.  Text lines whose
@c y-coordinate is beyond @var{y-limit} are ignored.  Since calculating the
@c pixel-height of a large buffer can take some time, it makes sense to
@c specify this argument; in particular, if the caller does not know the
@c size of the buffer.

Не обязательный аргумент @var{mode-and-header-line} в случае если
@code{nil} или не задан, то высота строки режима и
строки заголовка окна @var{window} не включаются в результат. Если значением
является символ @code{mode-line} или @code{header-line} включается только
высота строки режима или заголовка соответственно. Если значение аргумента @code{t},
то в результат включаются высота строки режима и строки заголовка, если
они есть.

@c The optional argument @var{mode-and-header-line} @code{nil} or omitted
@c means to not include the height of the mode- or header-line of
@c @var{window} in the return value.  If it is either the symbol
@c @code{mode-line} or @code{header-line}, include only the height of that
@c line, if present, in the return value.  If it is @code{t}, include the
@c height of both, if present, in the return value.
@end defun

@defun line-pixel-height
Функция возвращает высоту в пикселях строки на которой находится точка
курсора в выбранном окне. Значение включает отступы строки (@pxref{Line Height}).

@c This function returns the height in pixels of the line at point in the
@c selected window.  The value includes the line spacing of the line
@c (@pxref{Line Height}).
@end defun


@node Line Height
@section Высота Строки
@c @section Line Height
@cindex line height
@cindex height of a line

  Высота каждой отображаемой строки состоит из высоты содержимого и
высоты не обязательных отступов сверху и снизу строки.

@c   The total height of each display line consists of the height of the
@c contents of the line, plus optional additional vertical line spacing
@c above or below the display line.

  Высотой содержимого строки является максимальная высота среди
всех символов или изображений в отображении строки, включая конечный
символ перевода строки, если он есть. (Отображение продолжающейся строки
может не включать символ перевода строки.) Такая высота является
высотой по умолчанию, если не делалось чего-то для увеличения.
(В большинстве случаев, данная высота равна высоте шрифта используемого
по умолчанию для соответствующего фрейма, см. @ref{Frame Font})

@c   The height of the line contents is the maximum height of any character
@c or image on that display line, including the final newline if there is
@c one.  (A display line that is continued doesn't include a final
@c newline.)  That is the default line height, if you do nothing to specify
@c a greater height.  (In the most common case, this equals the height of
@c the corresponding frame's default font, see @ref{Frame Font}.)

  Есть несколько способов явно задать большую высоту строки, путем
явного задания высоты строки, или задав вертикальные отступы. Но,
в не зависимости от способа, фактическая высота строки не может быть
меньше высоты по умолчанию.

@c   There are several ways to explicitly specify a larger line height,
@c either by specifying an absolute height for the display line, or by
@c specifying vertical space.  However, no matter what you specify, the
@c actual line height can never be less than the default.

@kindex line-height @r{(text property)}
  Перевод строки может иметь свойство текста @code{line-height} или
свойство задаваемое через оверлей управляющее высотой отображения
строки заканчивающейся данным переводом строки.

@c   A newline can have a @code{line-height} text or overlay property
@c that controls the total height of the display line ending in that
@c newline.

  Если значение свойства @code{t}, символ перевода строки не оказывает
эффекта на высоту строку---высота определяется только отображаемым содержимым.
Свойство @code{line-spacing}, описанное ниже, игнорируется в этом случае.
Такой поведение полезно при вставке небольших изображений (или
частей изображений) без добавления пустых областей между изображениями.

@c   If the property value is @code{t}, the newline character has no
@c effect on the displayed height of the line---the visible contents
@c alone determine the height.  The @code{line-spacing} property,
@c described below, is also ignored in this case.  This is useful for
@c tiling small images (or image slices) without adding blank areas
@c between the images.

  Если значением свойства является список в форме @code{(@var{height} @var{total})},
тогда дополнительные пробелы добавляются @emph{снизу} отображаемой строки.
Сначала Emacs использует @var{height} в качестве высоты для задания
дополнительного отступа @emph{сверху} строки, потом добавляет достаточное
количество отступа @emph{снизу} строки, чтобы высота строки была @var{total}.
В данном случае, игнорируется любое значение свойства @code{line-spacing} для
символа перевода строки.

@c   If the property value is a list of the form @code{(@var{height}
@c @var{total})}, that adds extra space @emph{below} the display line.
@c First Emacs uses @var{height} as a height spec to control extra space
@c @emph{above} the line; then it adds enough space @emph{below} the line
@c to bring the total line height up to @var{total}.  In this case, any
@c value of @code{line-spacing} property for the newline is ignored.

@cindex height spec
  Любое другое значение свойства является заданием высоты, которая
преобразуется в число---определяющее высоту строки. Есть несколько
способов задать высоту; ниже таблица с описанием преобразования разных
значений к числу:

@c   Any other kind of property value is a height spec, which translates
@c into a number---the specified line height.  There are several ways to
@c write a height spec; here's how each of them translates into a number:

@table @code
@item @var{integer}
Если высота задает положительное целое, высота будет равна этому числу.
@c If the height spec is a positive integer, the height value is that integer.
@item @var{float}
Если значение число с плавающей точкой, @var{float}, определяет
множитель относительно высоты строки по умолчанию.
@c If the height spec is a float, @var{float}, the numeric height value
@c is @var{float} times the frame's default line height.
@item (@var{face} . @var{ratio})
Высота может быть задана в виде cons ячейки шрифта и коэффициента,
в этом случае будет использоваться @var{ratio} часть относительно
высоты @var{face}. @var{ratio} может быть любым числом, или
@code{nil}, что эквивалентно значению 1. Если @var{face} @code{t},
используется текущий шрифт.
@c If the height spec is a cons of the format shown, the numeric height
@c is @var{ratio} times the height of face @var{face}.  @var{ratio} can
@c be any type of number, or @code{nil} which means a ratio of 1.
@c If @var{face} is @code{t}, it refers to the current face.
@item (nil . @var{ratio})
Если высота задается в виде cons ячейки, с первым элементом nil,
то @var{ratio} задает коэффициент для содержимого строки.
@c If the height spec is a cons of the format shown, the numeric height
@c is @var{ratio} times the height of the contents of the line.
@end table

  Таким образом, любое корректное задание высоты определяет высоту в
пикселях. Если высота содержимого меньше этой высоты Emacs, добавит
дополнительный вертикальный отступ над строкой для получения требуемой
высоты.

@c   Thus, any valid height spec determines the height in pixels, one way
@c or another.  If the line contents' height is less than that, Emacs
@c adds extra vertical space above the line to achieve the specified
@c total height.

  Если не задавать свойство @code{line-height}, высота будет определяться
как высота содержимого плюс межстрочный интервал. Ниже описано,
как можно задать межстрочный интервал для разных частей текста.

@c   If you don't specify the @code{line-height} property, the line's
@c height consists of the contents' height plus the line spacing.
@c There are several ways to specify the line spacing for different
@c parts of Emacs text.

  На графическом терминале, можно задать межстрочный интервал для
все строк фрейма, используя параметр фрейма @code{linep-spacing}
(@pxref{Layout Parameters}). Но, если значение по умолчанию
@code{line-spacing} не-@code{nil}, оно перезаписывает параметр
@code{line-spacing} фрейма. Число с плавающей точкой задает
отступ относительно высоты строки по умолчанию.

@c   On graphical terminals, you can specify the line spacing for all
@c lines in a frame, using the @code{line-spacing} frame parameter
@c (@pxref{Layout Parameters}).  However, if the default value of
@c @code{line-spacing} is non-@code{nil}, it overrides the
@c frame's @code{line-spacing} parameter.  An integer specifies the
@c number of pixels put below lines.  A floating-point number specifies
@c the spacing relative to the frame's default line height.

@vindex line-spacing
  Можно задать межстрочный интервал для всех строк в буфере, с помощью
локальной для буфера переменной @code{line-spacing}. Целое число,
определяет количество пикселей добавляемых ниже строки. Число с плавающей
точкой определяет отступ относительно высоты строки фрейма по умолчанию.
Данное значение переопределяет межстрочный интервал заданный для фрейма.

@c   You can specify the line spacing for all lines in a buffer via the
@c buffer-local @code{line-spacing} variable.  An integer specifies
@c the number of pixels put below lines.  A floating-point number
@c specifies the spacing relative to the default frame line height.  This
@c overrides line spacings specified for the frame.

@kindex line-spacing @r{(text property)}
  В итоге, новая строка может иметь текстовое свойство @code{line-spacing}
или свойство оверлея, которое может увеличить межстрочный интервал и
локальную для буфера переменную @code{line-spacing}: если значение больше
чем значение по умолчанию для буфера и фрейма, тогда используется
большее значение.

@c   Finally, a newline can have a @code{line-spacing} text or overlay
@c property that can enlarge the default frame line spacing and the
@c buffer local @code{line-spacing} variable: if its value is larger than
@c the buffer or frame defaults, that larger value is used instead, for
@c the display line ending in that newline.

  Тем или иным способом, данный механизм задает Lisp значение отступа
для каждой строки. Значение задает высоту, которая преобразуется в Lisp
значение как описано выше. Но, в этом случае числовое значение высоты
задает отступ строки, а не высоту.

  На текстовых терминалах, отступы не могут быть изменены.

@c   One way or another, these mechanisms specify a Lisp value for the
@c spacing of each line.  The value is a height spec, and it translates
@c into a Lisp value as described above.  However, in this case the
@c numeric height value specifies the line spacing, rather than the line
@c height.

@c   On text terminals, the line spacing cannot be altered.

@node Faces
@c @section Faces
@section Стили текста (Faces)
@cindex faces

  @dfn{Стиль текста} (@dfn{face}) представляет собой набор атрибутов, отвечающих
за графическое отображение текста: шрифт, цвет, цвет фона, наличие подчеркивания и
т.д. Стили определяют как Emacs отображает текст в буферах, и других
частях фрейма, таких как строка режима.

@c   A @dfn{face} is a collection of graphical attributes for displaying
@c text: font, foreground color, background color, optional underlining,
@c etc.  Faces control how Emacs displays text in buffers, as well as
@c other parts of the frame such as the mode line.

@cindex anonymous face
  Одним из способов задания стиля, является список свойств для
атрибутов, например @code{(:foregraound "red" :weight bold)}. Такой
список называется @dfn{анонимным стилем} (@dfn{anonymous face}).
Например, можно присвоить анонимный стиль, свойству текста @code{face},
и Emacs отобразит текст с этим свойством с данными атрибутами.

@c   One way to represent a face is as a property list of attributes,
@c like @code{(:foreground "red" :weight bold)}.  Such a list is called
@c an @dfn{anonymous face}.  For example, you can assign an anonymous
@c face as the value of the @code{face} text property, and Emacs will
@c display the underlying text with the specified attributes.
@c @xref{Special Properties}.

@cindex face name
  В более общем случае, к стилю можно обратиться используя @dfn{имя стиля}
(@dfn{face name}): символ Lisp связанные с множеством атрибутов
стиля @footnote{Для обратной совместимости, можно использовать строку для
задания имени стиля; что будет эквивалентно символу Lisp с тем же именем.}.
Именованные стили определяются с помощью макроса @code{defface} (@pxref{Defining Faces}).
Emacs поставляется с набором стандартных стилей (@pxref{Basic Faces}).

@c   More commonly, a face is referred to via a @dfn{face name}: a Lisp
@c symbol associated with a set of face attributes@footnote{For backward
@c compatibility, you can also use a string to specify a face name; that
@c is equivalent to a Lisp symbol with the same name.}.  Named faces are
@c defined using the @code{defface} macro (@pxref{Defining Faces}).
@c Emacs comes with several standard named faces (@pxref{Basic Faces}).

  Во многих местах Emacs требуются именованные стили, и анонимные
не принимаются. К таким местам относятся функции описанные в
@ref{Attribute Functions}, и переменная @code{font-lock-keywords}
(@pxref{Search-based Fontification}). Если не указано иное,
под термин @dfn{стиль} (@dfn{face}) указывает на именованный стиль.

@c   Many parts of Emacs required named faces, and do not accept
@c anonymous faces.  These include the functions documented in
@c @ref{Attribute Functions}, and the variable @code{font-lock-keywords}
@c (@pxref{Search-based Fontification}).  Unless otherwise stated, we
@c will use the term @dfn{face} to refer only to named faces.

@defun facep object
Функция возвращает значение не-@code{nil}, если @var{object}
является именованным стилем: символом Lisp или строкой служащей
именем стиля. Иначе функция возвращает @code{nil}.

@c This function returns a non-@code{nil} value if @var{object} is a
@c named face: a Lisp symbol or string which serves as a face name.
@c Otherwise, it returns @code{nil}.
@end defun

@menu
* Face Attributes::     Что входит в стиль?
* Defining Faces::      Как определить стиль.
* Attribute Functions::  Функции для получения и установки атрибутов стиля.
* Displaying Faces::     Как Emacs комбинирует стили для заданного символа.
* Face Remapping::      Переназначение определение стиля.
* Face Functions::      Как определить и получить данные стиля.
* Auto Faces::          Перехватчик для автоматического назначения стилей.
* Basic Faces::         Базовые стили, определенные по умолчанию.
* Font Selection::      Поиск наилучшего доступного шрифта для стиля.
* Font Lookup::         Просмотр имен доступных стилей и информации по ним.
* Fontsets::            Fontset (Множество стилей) как коллекция стилей для
                           обработки ряда символьных множеств.
* Low-Level Font::      Lisp представление для шрифтов отображения символов.
@end menu

@c @menu
@c * Face Attributes::     What is in a face?
@c * Defining Faces::      How to define a face.
@c * Attribute Functions::  Functions to examine and set face attributes.
@c * Displaying Faces::     How Emacs combines the faces specified for a character.
@c * Face Remapping::      Remapping faces to alternative definitions.
@c * Face Functions::      How to define and examine faces.
@c * Auto Faces::          Hook for automatic face assignment.
@c * Basic Faces::         Faces that are defined by default.
@c * Font Selection::      Finding the best available font for a face.
@c * Font Lookup::         Looking up the names of available fonts
@c                           and information about them.
@c * Fontsets::            A fontset is a collection of fonts
@c                           that handle a range of character sets.
@c * Low-Level Font::      Lisp representation for character display fonts.
@c @end menu

@node Face Attributes
@subsection Атрибуты Стиля
@c @subsection Face Attributes
@cindex face attributes

  @dfn{Атрибуты стиля} (@dfn{Face attributes}) определяют визуальные
характеристики стиля. Следующая таблица содержит описание всех
атрибутов стиля, их возможные значения и эффекты.

@c   @dfn{Face attributes} determine the visual appearance of a face.
@c The following table lists all the face attributes, their possible
@c values, and their effects.

  Кроме значений описанных ниже, каждый атрибут стиля может иметь
значение @code{unspecified}. Это специальное значение означает, что
значение этого атрибута не задается для стиля напрямую. Значение @code{unspecified}
предписывает Emacs использовать значение родительского стиля (см. описание
атрибута @code{:inherit}); или, в противном случае, шрифта лежащего в основе
(@pxref{Displaying Faces}). Для стиля @code{default} все атрибуты
должны быть заданы.

@c   Apart from the values given below, each face attribute can have the
@c value @code{unspecified}.  This special value means that the face
@c doesn't specify that attribute directly.  An @code{unspecified}
@c attribute tells Emacs to refer instead to a parent face (see the
@c description @code{:inherit} attribute below); or, failing that, to an
@c underlying face (@pxref{Displaying Faces}).  The @code{default} face
@c must specify all attributes.

  Некоторые из этих атрибутов имеют значение только для некоторых
видов дисплеев. Если дисплей пользователя не может обработать какие-то
атрибуты они будут проигнорированы.

@c   Some of these attributes are meaningful only on certain kinds of
@c displays.  If your display cannot handle a certain attribute, the
@c attribute is ignored.

@table @code
@item :family
Семейство шрифта или набор шрифтов (fontset) (строка). Больше информации
по семействам шрифтов @ref{Fonts,,, emacs, The GNU Emacs Manual}.
Функция @code{font-family-list} (см. ниже) возвращает список доступных
семейств. @xref{Fontsets}, для получения дополнительной информации по
наборам шрифтов.

@c Font family or fontset (a string).  @xref{Fonts,,, emacs, The GNU
@c Emacs Manual}, for more information about font families.  The function
@c @code{font-family-list} (see below) returns a list of available family
@c names.  @xref{Fontsets}, for information about fontsets.

@item :foundry
Имя @dfn{фабрика шрифтов} (@dfn{font foundry}) для семейства шрифтов
заданных атрибутом @code{:family} (строка). @xref{Fonts,,, emacs, The GNU
Emacs Manual}.

@c The name of the @dfn{font foundry} for the font family specified by
@c the @code{:family} attribute (a string).  @xref{Fonts,,, emacs, The
@c GNU Emacs Manual}.

@item :width
Относительная ширина символов. Значение должно быть одним из
символов @code{ultra-condensed}, @code{extra-condensed}, @code{condensed},
@code{semi-condensed}, @code{normal}, @code{semi-expanded},
@code{expanded}, @code{extra-expanded}, или @code{ultra-expanded}.

@c Relative character width.  This should be one of the symbols
@c @code{ultra-condensed}, @code{extra-condensed}, @code{condensed},
@c @code{semi-condensed}, @code{normal}, @code{semi-expanded},
@c @code{expanded}, @code{extra-expanded}, or @code{ultra-expanded}.

@item :height
Высота шрифта. В простейшем случае, целое число определяющее
высоту в единицах равных 1/10 точки (units of 1/10 point).

@c The height of the font.  In the simplest case, this is an integer in
@c units of 1/10 point.

Значение может быть и числом с плавающей или функцией, которые
определяют высоту относительно @dfn{базового стиля} (@dfn{underlying face})
(@pxref{Display Faces}). Число с плавающей точкой определяет множитель,
на который умножается высота базового стиля. Значение функция вызывается с
одним аргументом, высотой базового стиля, и должна возвращать высоту нового стиля.
Если функция получает целый аргумент, она тоже должна возвращать целый аргумент.

@c The value can also be floating point or a function, which
@c specifies the height relative to an @dfn{underlying face}
@c (@pxref{Displaying Faces}).  A floating-point value
@c specifies the amount by which to scale the height of the
@c underlying face.  A function value is called
@c with one argument, the height of the underlying face, and returns the
@c height of the new face.  If the function is passed an integer
@c argument, it must return an integer.

Высота стиля по умолчанию (default face) должна быть задана целым числом;
значения с плавающей точкой и функция тут не допустимы (прим. так как не от чего
считать относительное значение).

@c The height of the default face must be specified using an integer;
@c floating point and function values are not allowed.

@item :weight
Вес шрифта---один из символов (от тяжелого к легкому)
@code{ultra-bold}, @code{extra-bold}, @code{bold}, @code{semi-bold},
@code{normal}, @code{semi-light}, @code{light}, @code{extra-light}, или
@code{ultra-light}. На терминалах, которые поддерживают переменную яркость
текста, шрифты с весом выше normal отображаются, более ярко, а
шрифты с весом меньше normal отображаются в половину яркости.

@c Font weight---one of the symbols (from densest to faintest)
@c @code{ultra-bold}, @code{extra-bold}, @code{bold}, @code{semi-bold},
@c @code{normal}, @code{semi-light}, @code{light}, @code{extra-light}, or
@c @code{ultra-light}.  On text terminals which support
@c variable-brightness text, any weight greater than normal is displayed
@c as extra bright, and any weight less than normal is displayed as
@c half-bright.

@cindex italic text
@item :slant
Наклон шрифта---один из символов @code{italic}, @code{oblique},
@code{normal}, @code{reverse-italic}, или @code{reverse-oblique}.
На текстовых терминалах, которые поддерживают переменную яркость текста,
наклонные шрифты отображаются в половину яркости.

@c Font slant---one of the symbols @code{italic}, @code{oblique},
@c @code{normal}, @code{reverse-italic}, or @code{reverse-oblique}.  On
@c text terminals that support variable-brightness text, slanted text is
@c displayed as half-bright.

@item :foreground
Основной цвет (foreground color), строка. Значение может быть именем
цвета определенного в системе, или представлением цвета в шестнадцатеричном формате.
@xref{Color Names}. На черно-белых дисплеях, оттенки серого могут
реализовываться с помощью пунктиров.

@c Foreground color, a string.  The value can be a system-defined color
@c name, or a hexadecimal color specification.  @xref{Color Names}.  On
@c black-and-white displays, certain shades of gray are implemented by
@c stipple patterns.

@item :distant-foreground
Альтернативный основной цвет (foreground color), строка. Как @code{:foreground},
но цвет будет использоваться только в случаях когда цвет фона близок
к основному цвету. Свойство полезно, когда выполняется маркировка текста
(например стиль выделения области). Если основной цвет текста нормально
виден на фоне стиля области, используется основной цвет. Если
основной цвет близок к цвету выделенной области, используется альтернативный цвет
@code{:distant-foreground}, чтобы текст оставался читаемым.

@c Alternative foreground color, a string.  This is like @code{:foreground}
@c but the color is only used as a foreground when the background color is
@c near to the foreground that would have been used.  This is useful for
@c example when marking text (i.e., the region face).  If the text has a foreground
@c that is visible with the region face, that foreground is used.
@c If the foreground is near the region face background,
@c @code{:distant-foreground} is used instead so the text is readable.

@item :background
Цвет фона, строка. Значение может быть именем системного цвета, или
шестнадцатеричным определением цвета. @xref{Color Names}.

@c Background color, a string.  The value can be a system-defined color
@c name, or a hexadecimal color specification.  @xref{Color Names}.

@cindex underlined text
@item :underline
Подчеркивание, должны ли символы быть подчеркнуты, и каким
образом. Возможные значение @code{:underline}:

@c Whether or not characters should be underlined, and in what
@c way.  The possible values of the @code{:underline} attribute are:

@table @asis
@item @code{nil}
Без подчеркивания.
@c Don't underline.

@item @code{t}
Подчеркивание основным цветом стиля.
@c Underline with the foreground color of the face.

@item @var{color}
Подчеркивание цветом @var{color}, строка задающая цвет.
@c Underline in color @var{color}, a string specifying a color.

@item @code{(:color @var{color} :style @var{style})}
@var{color} либо строка, или символ @code{foreground-color}, в смысле
основного цвета стиля. Пропуск атрибута @code{:color} подразумевает использование
основного цвета стиля. @var{style} должно быть либо @code{line}, либо @code{wave},
означающий использование прямой или волнистой линии. Пропуск атрибута @code{:style}
означает использование прямой линии.

@c @var{color} is either a string, or the symbol @code{foreground-color},
@c meaning the foreground color of the face.  Omitting the attribute
@c @code{:color} means to use the foreground color of the face.
@c @var{style} should be a symbol @code{line} or @code{wave}, meaning to
@c use a straight or wavy line.  Omitting the attribute @code{:style}
@c means to use a straight line.
@end table

@cindex overlined text
@item :overline
Должен ли символ иметь подчеркивание сверху, и каким цветом. Если значение
@code{t}, для линии используется основной цвет стиля. Если значение строка,
верхнее подчеркивание будет иметь указанный цвет. Значение @code{nil}, указывает
что подчеркивание сверху не нужно.

@c Whether or not characters should be overlined, and in what color.
@c If the value is @code{t}, overlining uses the foreground color of the
@c face.  If the value is a string, overlining uses that color.  The
@c value @code{nil} means do not overline.

@cindex strike-through text
@item :strike-through
Должны ли символы быть зачеркнуты, и каким цветом. Значение аналогично
@code{:overline}.

@c Whether or not characters should be strike-through, and in what
@c color.  The value is used like that of @code{:overline}.

@cindex 2D box
@cindex 3D box
@item :box
Должен ли вокруг символов быть нарисован прямоугольник, цвет, ширина линии
и наличие 3D вида. Ниже приводятся возможные значения для атрибута @code{:box},
и их значение:

@c Whether or not a box should be drawn around characters, its color, the
@c width of the box lines, and 3D appearance.  Here are the possible
@c values of the @code{:box} attribute, and what they mean:

@table @asis
@item @code{nil}
Не рисовать прямоугольник.
@c Don't draw a box.

@item @code{t}
Нарисовать прямоугольник линией ширины 1, основным цветом.
@c Draw a box with lines of width 1, in the foreground color.

@item @var{color}
Нарисовать прямоугольник линией ширины 1, цветом @var{color}.
@c Draw a box with lines of width 1, in color @var{color}.

@item @code{(:line-width @var{width} :color @var{color} :style @var{style})}
Если нужно задать все параметры прямоугольника. @var{width} определяет
ширину линии, по умолчанию значение 1. Отрицательно значение @var{-n} означает
отображение линии @var{n}, занимающей пространство нижнего текста, что
позволяет избежать увеличения ширины и высоты символа.

@c This way you can explicitly specify all aspects of the box.  The value
@c @var{width} specifies the width of the lines to draw; it defaults to
@c 1.  A negative width @var{-n} means to draw a line of width @var{n}
@c that occupies the space of the underlying text, thus avoiding any
@c increase in the character height or width.

Значение @var{color} определяет цвет прямоугольника. По умолчанию используется
основной цвет стиля, для 3D прямоугольников еще используется цвет фона.

@c The value @var{color} specifies the color to draw with.  The default is
@c the foreground color of the face for simple boxes, and the background
@c color of the face for 3D boxes.

Значение @var{style} задает отображение обычного или 3D прямоугольника.
Если значение @code{released-button}, прямоугольник будет выглядеть как 3D
кнопка, которая не нажата. Если @code{pressed-button}, прямоугольник будет
выглядеть как нажатая 3D кнопка. Если значение @code{nil} или не задано,
рисуется простой 2D прямоугольник.

@c The value @var{style} specifies whether to draw a 3D box.  If it is
@c @code{released-button}, the box looks like a 3D button that is not being
@c pressed.  If it is @code{pressed-button}, the box looks like a 3D button
@c that is being pressed.  If it is @code{nil} or omitted, a plain 2D box
@c is used.
@end table

@item :inverse-video
Должны ли символы отображаться в инвертированном виде (video).
Значение должно быть @code{t} (да) или @code{nil} (нет).

@c Whether or not characters should be displayed in inverse video.  The
@c value should be @code{t} (yes) or @code{nil} (no).

@item :stipple
Пунктирный фон, битовая карта.
@c The background stipple, a bitmap.

Значение может быть строкой, которая должна быть именем файла, содержащего
данные битовой карты внешнего формата X (external-format X bitmap data).
Файлы ищутся в каталогах перечисленных в переменной @code{x-bitmap-file-path}.

@c The value can be a string; that should be the name of a file containing
@c external-format X bitmap data.  The file is found in the directories
@c listed in the variable @code{x-bitmap-file-path}.

Альтернативно, значение может явно задавать битовую маску, при помощи
списка @code{(@var{width} @var{height} @var{data})}. Где,
@var{width} и @var{height} размер в пикселях, и @var{data} строка
содержащая сырое представление изображения(raw bits of the bitmap),
построчно. Каждая строка изображения(row) занимает @math{(@var{width} + 7) / 8}
последовательных байт строки данных (которая желательно должна быть одно-байтовой).
То есть каждая строка изображения (row) занимает хотя бы один байт.

@c Alternatively, the value can specify the bitmap directly, with a list
@c of the form @code{(@var{width} @var{height} @var{data})}.  Here,
@c @var{width} and @var{height} specify the size in pixels, and
@c @var{data} is a string containing the raw bits of the bitmap, row by
@c row.  Each row occupies @math{(@var{width} + 7) / 8} consecutive bytes
@c in the string (which should be a unibyte string for best results).
@c This means that each row always occupies at least one whole byte.

Если значение @code{nil}, не используется пунктир.
@c If the value is @code{nil}, that means use no stipple pattern.

Как правило нет необходимости устанавливать данный атрибут, так как
используется автоматически для обработки некоторых теней (оттенков серого).

@c Normally you do not need to set the stipple attribute, because it is
@c used automatically to handle certain shades of gray.

@item :font
Шрифт используемый для отображения стиля. Значение должно быть объектом
шрифта. Информация по объектам шрифтов может быть найдена
в @xref{Low-Level Font}.

@c The font used to display the face.  Its value should be a font object.
@c @xref{Low-Level Font}, for information about font objects, font specs,
@c and font entities.

При задании атрибута функцией @code{set-face-attribute} (@pxref{Attribute Functions}),
можно так же задать спецификацию шрифта, объект шрифта или строку.
Emacs преобразует заданное значение в соответствующий объект
шрифта, и сохранит его значение в качестве актуально значения атрибута.
Если задать строку, ее значение должно быть именем шрифта (@pxref{Fonts,,, emacs,
The GNU Emacs Manual}); если значением является XLFD подстановка (???), Emacs
выберет первую подходящую. Задание данного атрибута, так же изменяет
значение атрибутов @code{:family}, @code{:foundry}, @code{:width}, @code{:height},
@code{:weight}, и @code{:slant}.

@c When specifying this attribute using @code{set-face-attribute}
@c (@pxref{Attribute Functions}), you may also supply a font spec, a font
@c entity, or a string.  Emacs converts such values to an appropriate
@c font object, and stores that font object as the actual attribute
@c value.  If you specify a string, the contents of the string should be
@c a font name (@pxref{Fonts,,, emacs, The GNU Emacs Manual}); if the
@c font name is an XLFD containing wildcards, Emacs chooses the first
@c font matching those wildcards.  Specifying this attribute also changes
@c the values of the @code{:family}, @code{:foundry}, @code{:width},
@c @code{:height}, @code{:weight}, and @code{:slant} attributes.

@cindex inheritance, for faces
@item :inherit
Имя стиля от которого будут наследоваться значения атрибутов, или
список имен стилей. Атрибуты дочерних стилей имеют более высокий приоритет,
чем атрибуты их родителей, и объединяются в новый стиль с учетом
приоритета (@pxref{Displaying Faces}). Если используется
список стилей, то атрибуты стилей идущих в начале
имеют больший приоритет, чем те, что идут за  ними.

@c The name of a face from which to inherit attributes, or a list of face
@c names.  Attributes from inherited faces are merged into the face like
@c an underlying face would be, with higher priority than underlying
@c faces (@pxref{Displaying Faces}).  If a list of faces is used,
@c attributes from faces earlier in the list override those from later
@c faces.
@end table

@defun font-family-list &optional frame
Функция возвращает список доступных семейств шрифтов. Не обязательный
аргумент @var{frame} задает фрейм в котором текст будет отображен; если
значение @code{nil}, используется выбранный фрейм.

@c This function returns a list of available font family names.  The
@c optional argument @var{frame} specifies the frame on which the text is
@c to be displayed; if it is @code{nil}, the selected frame is used.
@end defun

@defopt underline-minimum-offset
Переменная задает минимальную дистанцию между основной линией и подчеркиванием, в
пикселях, когда отображается подчеркнутый текст.

@c This variable specifies the minimum distance between the baseline and
@c the underline, in pixels, when displaying underlined text.
@end defopt

@defopt x-bitmap-file-path
Переменная определяет список каталогов для поиска файлов с
битовыми картами, для @code{:stipple} атрибута.

@c This variable specifies a list of directories for searching
@c for bitmap files, for the @code{:stipple} attribute.
@end defopt

@defun bitmap-spec-p object
Функция возвращает @code{t} если @var{object} является корректной спецификацией
битовой карты, пригодной для использования с @code{:stipple} (см. выше). Иначе функция
возвращает @code{nil}.

@c This returns @code{t} if @var{object} is a valid bitmap specification,
@c suitable for use with @code{:stipple} (see above).  It returns
@c @code{nil} otherwise.
@end defun

@node Defining Faces
@subsection Определение Стилей
@c @subsection Defining Faces
@cindex defining faces

@cindex face spec
  Стандартный способ определить стиль, использовать макрос @code{defface}.
Макрос связывает имя стиля (символ) со @dfn{спецификацией стиля}
@dfn{face spec} по умолчанию. Спецификация стиля является конструкцией, которая
задает какие атрибуты должен иметь стиль, для любого заданного терминала;
например, спецификация стиля может задавать один основной цвет для
терминалов поддерживающих множество цветов, и другой терминалов поддерживающих
малое количество цветов.

@c   The usual way to define a face is through the @code{defface} macro.
@c This macro associates a face name (a symbol) with a default @dfn{face
@c spec}.  A face spec is a construct which specifies what attributes a
@c face should have on any given terminal; for example, a face spec might
@c specify one foreground color on high-color terminals, and a different
@c foreground color on low-color terminals.

  Люди иногда создают переменную с именем стиля. В большинстве случаев,
этого не требуется; так как обычной процедурой является определения стиля
при помощи @code{defface}, с последующим использованием его напрямую.

@c   People are sometimes tempted to create a variable whose value is a
@c face name.  In the vast majority of cases, this is not necessary; the
@c usual procedure is to define a face with @code{defface}, and then use
@c its name directly.

@defmac defface face spec doc [keyword value]@dots{}
Макрос определяет стиль @var{face} как именованный стиль со спецификацией
стиля по умолчанию заданной параметром @var{spec}. Символ @var{face} не нужно
квотировать, и его не нужно заканчивать @samp{-face} (так как это будет избыточно).
Аргументом @var{doc} задается строка документации для шрифта.
Дополнительные @var{keyword} аргументы имеют тот же смысл, что и
@code{defgroup} и @code{defcustom} (@pxref{Common Keywords}).

@c This macro declares @var{face} as a named face whose default face spec
@c is given by @var{spec}.  You should not quote the symbol @var{face},
@c and it should not end in @samp{-face} (that would be redundant).  The
@c argument @var{doc} is a documentation string for the face.  The
@c additional @var{keyword} arguments have the same meanings as in
@c @code{defgroup} and @code{defcustom} (@pxref{Common Keywords}).

Если @var{face} уже имеет спецификацию по умолчанию, макрос ничего
не делает.

@c If @var{face} already has a default face spec, this macro does
@c nothing.

Спецификация по умолчанию определяет внешний вид стиля @var{face},
когда нет эффектов от других настроек (@pxref{Customization}). Если
@var{face} уже был дополнительно настроен (через темы или настройку
из init файла), внешний вид будет определен настройкой, которая перезапишет
спецификацию @var{spec} стиля по умолчанию. Но, если настройка позднее
будет удалена, внешний вид @var{face} опять будет определяться спецификацией
по умолчанию.

@c The default face spec determines @var{face}'s appearance when no
@c customizations are in effect (@pxref{Customization}).  If @var{face}
@c has already been customized (via Custom themes or via customizations
@c read from the init file), its appearance is determined by the custom
@c face spec(s), which override the default face spec @var{spec}.
@c However, if the customizations are subsequently removed, the
@c appearance of @var{face} will again be determined by its default face
@c spec.

В качестве исключения, если вычислить @code{defface} форму с помощью
@kbd{C-M-x} при активном режиме Emacs Lisp (@code{eval-defun}),
специальная функция @code{eval-defun} перезапишет спецификацию шрифта из
настроек, приводя к тому, что шрифт будет иметь вид определенный
с помощью @code{defface}.

@c As an exception, if you evaluate a @code{defface} form with
@c @kbd{C-M-x} in Emacs Lisp mode (@code{eval-defun}), a special feature
@c of @code{eval-defun} overrides any custom face specs on the face,
@c causing the face to reflect exactly what the @code{defface} says.

Аргумент @var{spec} @dfn{спецификация стиля} (@dfn{face spec}), определяет
как будет выглядеть текст на разных видах терминалов. Значением
должен быть ассоциативный список (alist), чьи элементы имеют форму

@c The @var{spec} argument is a @dfn{face spec}, which states how the
@c face should appear on different kinds of terminals.  It should be an
@c alist whose elements each have the form

@example
(@var{display} . @var{plist})
@end example

@noindent
@var{display} задает класс терминалов (см. ниже). @var{plist}
задает список свойств состоящий из атрибутов и их значений,
определяющий вид текста данного стиля на указанном терминале. Для
обратной совместимости, поддерживается запись элементов в виде
@code{(@var{display} @var{plist})}.

@c @var{display} specifies a class of terminals (see below).  @var{plist}
@c is a property list of face attributes and their values, specifying how
@c the face appears on such terminals.  For backward compatibility, you
@c can also write an element as @code{(@var{display} @var{plist})}.

@var{display} указывает на терминалы, для которых задается спецификация
@var{spec}. Если более одного элемента @var{spec} соответствует данному терминалу,
используется первый. Есть три варианта @var{display}:

@c The @var{display} part of an element of @var{spec} determines which
@c terminals the element matches.  If more than one element of @var{spec}
@c matches a given terminal, the first element that matches is the one
@c used for that terminal.  There are three possibilities for
@c @var{display}:

@table @asis
@item @code{default}
Элемент @var{spec} не соответствует какому-то конкретному терминалу, напротив,
он задает свойства по умолчанию применяемые ко всем терминалам. Если используется данный
элемент, то он должен быть первым в @code{spec}. Каждый следующий элемент
может перезаписать заданные значения по умолчанию.

@c This element of @var{spec} doesn't match any terminal; instead, it
@c specifies defaults that apply to all terminals.  This element, if
@c used, must be the first element of @var{spec}.  Each of the following
@c elements can override any or all of these defaults.

@item @code{t}
Элемент @var{spec} соответствует всем терминалам. Таким образом,
все следующие элементы не будут использоваться. Как правило @code{t}
используется последним (или единственным) элементом @var{spec}.

@c This element of @var{spec} matches all terminals.  Therefore, any
@c subsequent elements of @var{spec} are never used.  Normally @code{t}
@c is used in the last (or only) element of @var{spec}.

@item a list
Если @var{display} список, каждый его элемент должен иметь форму
@code{(@var{characteristic} @var{value}@dots{})}. Где @var{characteristic}
задает свойство классификации терминалов, и @var{value} возможные классификации,
которым должен удовлетворять @var{display}. Ниже возможные значения для
@var{characteristic}:

@c If @var{display} is a list, each element should have the form
@c @code{(@var{characteristic} @var{value}@dots{})}.  Here
@c @var{characteristic} specifies a way of classifying terminals, and the
@c @var{value}s are possible classifications which @var{display} should
@c apply to.  Here are the possible values of @var{characteristic}:

@table @code
@item type
Тип оконной системы используемой терминалом---либо @code{graphic}
(любой дисплей с поддержкой вывода графики), @code{x}, @code{pc} (для
MS-DOS консоли), @code{w32} (для MS Windows 9X/NT/2K/XP), или @code{tty}
(дисплей без поддержки графики). @xref{Window Systems, window-system}.

@c The kind of window system the terminal uses---either @code{graphic}
@c (any graphics-capable display), @code{x}, @code{pc} (for the MS-DOS
@c console), @code{w32} (for MS Windows 9X/NT/2K/XP), or @code{tty} (a
@c non-graphics-capable display).  @xref{Window Systems, window-system}.

@item class
Поддерживаемые терминалом цвета---либо @code{color}, @code{grayscale},
@code{mono}.

@c What kinds of colors the terminal supports---either @code{color},
@c @code{grayscale}, or @code{mono}.

@item background
Вид фона---либо @code{light}, либо @code{dark}.
@c The kind of background---either @code{light} or @code{dark}.

@item min-colors
Число указывающее на минимально поддерживаемое терминалом количество цветов.
Значение соответствует терминалу, если его @code{display-color-cells} больше
указанного числа.

@c An integer that represents the minimum number of colors the terminal
@c should support.  This matches a terminal if its
@c @code{display-color-cells} value is at least the specified integer.

@item supports
Может ли терминал отображать атрибуты стиля заданные в @var{value}@dots{}
(@pxref{Face Attributes}). Как проводится тестирование можно посмотреть
в разделе, @ref{Display Face Attribute Testing}.

@c Whether or not the terminal can display the face attributes given in
@c @var{value}@dots{} (@pxref{Face Attributes}).  @xref{Display Face
@c Attribute Testing}, for more information on exactly how this testing
@c is done.
@end table

Если элемент @var{display} задает более одного значение @var{value} для
заданной @var{characteristic}, допустимыми являются все значения. Если
@var{display} имеет больше одного элемента, каждый элемент должен
определять разные @var{characteristic}; тогда @emph{каждая} характеристика
терминала должна соответствовать одному из значений @var{value} заданных
для нее в @var{display}.

@c If an element of @var{display} specifies more than one @var{value} for
@c a given @var{characteristic}, any of those values is acceptable.  If
@c @var{display} has more than one element, each element should specify a
@c different @var{characteristic}; then @emph{each} characteristic of the
@c terminal must match one of the @var{value}s specified for it in
@c @var{display}.
@end table
@end defmac

  Например, ниже определение стандартного стиля @code{highlight}:
@c   For example, here's the definition of the standard face
@c @code{highlight}:

@example
(defface highlight
  '((((class color) (min-colors 88) (background light))
     :background "darkseagreen2")
    (((class color) (min-colors 88) (background dark))
     :background "darkolivegreen")
    (((class color) (min-colors 16) (background light))
     :background "darkseagreen2")
    (((class color) (min-colors 16) (background dark))
     :background "darkolivegreen")
    (((class color) (min-colors 8))
     :background "green" :foreground "black")
    (t :inverse-video t))
  "Basic face for highlighting."
  :group 'basic-faces)
@end example

  Внутренне, Emacs хранит каждую спецификацию стиля в свойстве
символа @code{face-defface-spec} (@pxref{Symbol Properties}).
Свойство @code{saved-face} хранит любую спецификацию стиля, сохраненную
пользователем с помощью буфера настройки; свойство @code{customized-face}
хранит спецификацию стиля настроенную в текущей сессии, но не сохраненную;
и свойство @code{theme-face} хранит ассоциативный список активных настроек
и настроек тем для шрифта. Строка документации для шрифта хранится в
свойстве @code{face-documentation}.

@c   Internally, Emacs stores each face's default spec in its
@c @code{face-defface-spec} symbol property (@pxref{Symbol Properties}).
@c The @code{saved-face} property stores any face spec saved by the user
@c using the customization buffer; the @code{customized-face} property
@c stores the face spec customized for the current session, but not
@c saved; and the @code{theme-face} property stores an alist associating
@c the active customization settings and Custom themes with the face
@c specs for that face.  The face's documentation string is stored in the
@c @code{face-documentation} property.

  Обычно, стиль определяется только один раз, с использованием @code{defface},
и дальнейшие изменения внешнего вида применяются с использованием
Настроек (например через интерфейс Настройки (Customize) или
через функцию @code{custom-set-faces}; @pxref{Applying Customization}), или
путем переназначения стилей (@pxref{Face Remapping}). В редких случаях, когда
нужно изменить спецификацию стиля напрямую из Lisp, можно воспользоваться
функцией @code{face-spec-set}.

@c   Normally, a face is declared just once, using @code{defface}, and
@c any further changes to its appearance are applied using the Customize
@c framework (e.g., via the Customize user interface or via the
@c @code{custom-set-faces} function; @pxref{Applying Customizations}), or
@c by face remapping (@pxref{Face Remapping}).  In the rare event that
@c you need to change a face spec directly from Lisp, you can use the
@c @code{face-spec-set} function.

@defun face-spec-set face spec &optional spec-type
Функция применяет спецификацию @var{spec} в качестве спецификации для
стиля @code{face}. @var{spec} должна представлять собой спецификацию
стиля, как было описано выше в документации для @code{defface}.

@c This function applies @var{spec} as a face spec for @code{face}.
@c @var{spec} should be a face spec, as described in the above
@c documentation for @code{defface}.

Если @var{face} еще не является именем стиля, то функция объявляет
@var{face} именем стиля, и (пере)вычисляет его атрибуты для
существующих шрифтов.

@c This function also defines @var{face} as a valid face name if it is
@c not already one, and (re)calculates its attributes on existing frames.

@cindex override spec @r{(for a face)}
Аргумент @var{spec-type} определяет какую спецификацию нужно переопределить.
Если значение @code{nil} или @code{face-override-spec}, функция установит
@dfn{переопределенную спецификацию} (@dfn{override spec}), которая
перезапишет все другие спецификации стиля @var{face}. Если это
@code{customized-face} или @code{saved-face}, функция установит
настроенную или сохраненную спецификацию (customized or saved).
Если это @code{face-defface-spec}, функция установит спецификацию
по умолчанию (ту же, что установит @code{defface}). Если значение
@code{reset}, функция очистит все настроенные спецификации и перепишет
спецификацию из @var{face} (в этом случае, значение @var{spec} игнорируется).
Все другие значения @var{spec-type} зарезервированы для внутреннего использования.

@c The argument @var{spec-type} determines which spec to set.  If it is
@c @code{nil} or @code{face-override-spec}, this function sets the
@c @dfn{override spec}, which overrides over all other face specs on
@c @var{face}.  If it is @code{customized-face} or @code{saved-face},
@c this function sets the customized spec or the saved custom spec.  If
@c it is @code{face-defface-spec}, this function sets the default face
@c spec (the same one set by @code{defface}).  If it is @code{reset},
@c this function clears out all customization specs and override specs
@c from @var{face} (in this case, the value of @var{spec} is ignored).
@c Any other value of @var{spec-type} is reserved for internal use.
@end defun

@node Attribute Functions
@subsection Функции Работы С Атрибутами Стиля
@c @subsection Face Attribute Functions
@cindex face attributes, access and modification

  В данном разделе описываются функции для получения и
изменения атрибутов именованных стилей.

@c   This section describes functions for directly accessing and
@c modifying the attributes of a named face.

@defun face-attribute face attribute &optional frame inherit
Функция возвращает значение атрибута @var{attribute} для стиля
@var{face} для фрейма @var{frame}.

@c This function returns the value of the @var{attribute} attribute for
@c @var{face} on @var{frame}.

Если @var{frame} не задан или @code{nil}, используется выбранный фрейм
(@pxref{Input Focus}). Если @var{frame} @code{t}, функция возвращает
значение заданное атрибутом для вновь-созданного фрейма (обычно значение
@code{unspecified}, если вы не задали некоторое
значение используя @code{set-face-attribute}, см. ниже).

@c If @var{frame} is omitted or @code{nil}, that means the selected frame
@c (@pxref{Input Focus}).  If @var{frame} is @code{t}, this function
@c returns the value of the specified attribute for newly-created frames
@c (this is normally @code{unspecified}, unless you have specified some
@c value using @code{set-face-attribute}; see below).

Если @var{inherit} @code{nil}, рассматриваются только атрибуты,
явно определенные @var{face}, поэтому возвращенным значением
может быть @code{unspecified}, или относительное значение. Если
@var{inherit} не-@code{nil}, определение @var{face} объединяется с
определениями стилей из атрибута @code{:inherit}; но значение
все равно может быть @code{unspecified} или значением. Если
@code{inherit} стиль или список стилей, тогда результат объединяется
со стилем (или стилями), пока не станет определенным и абсолютным.

@c If @var{inherit} is @code{nil}, only attributes directly defined by
@c @var{face} are considered, so the return value may be
@c @code{unspecified}, or a relative value.  If @var{inherit} is
@c non-@code{nil}, @var{face}'s definition of @var{attribute} is merged
@c with the faces specified by its @code{:inherit} attribute; however the
@c return value may still be @code{unspecified} or relative.  If
@c @var{inherit} is a face or a list of faces, then the result is further
@c merged with that face (or faces), until it becomes specified and
@c absolute.

Чтобы быть уверенным, что результат всегда определен и абсолютный,
стоит использовать @code{default} для @var{inherit}; тогда любое
неопределенное или относительное значение будет слито со значением
из стиля @code{default} (который всегда полностью определен).

@c To ensure that the return value is always specified and absolute, use
@c a value of @code{default} for @var{inherit}; this will resolve any
@c unspecified or relative values by merging with the @code{default} face
@c (which is always completely specified).

Например,
@c For example,

@example
(face-attribute 'bold :weight)
     @result{} bold
@end example
@end defun

@c FIXME: Add an index for "relative face attribute", maybe here?  --xfq
@defun face-attribute-relative-p attribute value
Функция возвращает не-@code{nil}, если @var{value}, при использование
в качестве атрибута @var{attribute}, относительное. Это значит, что
будет изменено, а не полностью перезаписано, любое значение, пришедшее
от последующих стилей списка стилей или унаследованное от родительских.

@c This function returns non-@code{nil} if @var{value}, when used as the
@c value of the face attribute @var{attribute}, is relative.  This means
@c it would modify, rather than completely override, any value that comes
@c from a subsequent face in the face list or that is inherited from
@c another face.

@code{unspecified} относительно значение для всех атрибутов. Для
@code{:height}, значение с плавающей точкой и функция тоже являются
относительными.

@c @code{unspecified} is a relative value for all attributes.  For
@c @code{:height}, floating point and function values are also relative.

Например:
@c For example:

@example
(face-attribute-relative-p :height 2.0)
     @result{} t
@end example
@end defun

@defun face-all-attributes face &optional frame
Функция возвращает ассоциативный список атрибутов стиля @var{face}.
Элементы результата являются парами ключ-значение в форме
@w{@code{(@var{attr-name} . @var{attr-value}}}. Не обязательный аргумент
@var{frame} задает фрейм, чье определение стиля будет использоваться;
если значение не задано или @code{nil}, возвращаемое значение
описывает атрибуты по умолчанию стиля @var{face} вновь созданного фрейма.

@c This function returns an alist of attributes of @var{face}.  The
@c elements of the result are name-value pairs of the form
@c @w{@code{(@var{attr-name} . @var{attr-value})}}.  Optional argument
@c @var{frame} specifies the frame whose definition of @var{face} to
@c return; if omitted or @code{nil}, the returned value describes the
@c default attributes of @var{face} for newly created frames.
@end defun

@defun merge-face-attribute attribute value1 value2
Если @var{value1} относительное значение для атрибута @var{attribute},
результат объединяется со значением @var{value2}; иначе, если
@var{value1} абсолютное значение для атрибута @var{attribute},
возвращается значение @var{value1}.

@c If @var{value1} is a relative value for the face attribute
@c @var{attribute}, returns it merged with the underlying value
@c @var{value2}; otherwise, if @var{value1} is an absolute value for the
@c face attribute @var{attribute}, returns @var{value1} unchanged.
@end defun

  Как правило, Emacs использует спецификации стилей для каждого стиля,
чтобы автоматически вычислять атрибуты в каждом фрейме (@pxref{Defining Faces}).
Функция @code{set-face-attribute} может переопределить такое вычисление
путем прямого задания атрибутов для стиля, для определенного фрейма или
для всех фреймов. Функция предназначена в основном для внутреннего
использования.

@c   Normally, Emacs uses the face specs of each face to automatically
@c calculate its attributes on each frame (@pxref{Defining Faces}).  The
@c function @code{set-face-attribute} can override this calculation by
@c directly assigning attributes to a face, either on a specific frame or
@c for all frames.  This function is mostly intended for internal usage.

@defun set-face-attribute face frame &rest arguments
Функция устанавливает один или более атрибутов стиля @var{face}
для фрейма @var{frame}. Заданные атрибуты перезаписывают значения
спецификации стиля(ей) @var{face}.

@c This function sets one or more attributes of @var{face} for
@c @var{frame}.  The attributes specifies in this way override the face
@c spec(s) belonging to @var{face}.

Дополнительные аргументы @var{arguments} определяют множество атрибутов,
и их значения. Они должны состоять из имени атрибута
(таких как @code{:family} или @code{:underline}) и значения.
Таким образом:

@c The extra arguments @var{arguments} specify the attributes to set, and
@c the values for them.  They should consist of alternating attribute
@c names (such as @code{:family} or @code{:underline}) and values.  Thus,

@example
(set-face-attribute 'foo nil :weight 'bold :slant 'italic)
@end example

@noindent
устанавливает атрибут @code{:weight} в значение @code{bold} и
атрибут @code{:slant} в @code{italic}.

@c sets the attribute @code{:weight} to @code{bold} and the attribute
@c @code{:slant} to @code{italic}.


Если @var{frame} @code{t}, функция устанавливает атрибуты по умолчанию
для новых фреймов. Если @var{frame} @code{nil}, функция
устанавливает значения для всех существующих фреймов, и для новых.

@c If @var{frame} is @code{t}, this function sets the default attributes
@c for newly created frames.  If @var{frame} is @code{nil}, this function
@c sets the attributes for all existing frames, as well as for newly
@c created frames.
@end defun

  Следующие команды и функции предоставляются в основном
для совместимости со старыми версиями Emacs. Функции работают
за счет вызова @code{set-face-attribute}. Значение @code{t} и @code{nil}
(или если не задано) для @var{frame} обрабатываются как в
@code{set-face-attribute} и @code{face-attribute}. Команды
считывают их аргументы используя мини-буфер, если вызываются интерактивно.

@c   The following commands and functions mostly provide compatibility
@c with old versions of Emacs.  They work by calling
@c @code{set-face-attribute}.  Values of @code{t} and @code{nil} (or
@c omitted) for their @var{frame} argument are handled just like
@c @code{set-face-attribute} and @code{face-attribute}.  The commands
@c read their arguments using the minibuffer, if called interactively.

@deffn Command set-face-foreground face color &optional frame
@deffnx Command set-face-background face color &optional frame
Функция устанавливает @code{:foreground} атрибут (или @code{:background})
для стиля @var{face} в @var{color}.

@c These set the @code{:foreground} attribute (or @code{:background}
@c attribute, respectively) of @var{face} to @var{color}.
@end deffn

@deffn Command set-face-stipple face pattern &optional frame
Команда устанавливает атрибут @code{:stipple} стиля @var{face}
в @var{pattern}.

@c This sets the @code{:stipple} attribute of @var{face} to
@c @var{pattern}.
@end deffn

@deffn Command set-face-font face font &optional frame
Функция устанавливает атрибут @code{:font} стиля @var{face} в @var{font}.
@c This sets the @code{:font} attribute of @var{face} to @var{font}.
@end deffn

@defun set-face-bold face bold-p &optional frame
Функция устанавливает атрибут @code{:weight} стиля @var{face} в
@var{normal} если @var{bold-p} @code{nil}, и в @var{bold} иначе.

@c This sets the @code{:weight} attribute of @var{face} to @var{normal}
@c if @var{bold-p} is @code{nil}, and to @var{bold} otherwise.
@end defun

@defun set-face-italic face italic-p &optional frame
Функция устанавливает атрибут @code{:slant} стиля @var{face} в @var{normal}
если @var{italic-p} @code{nil}, и в @var{intalic} иначе.

@c This sets the @code{:slant} attribute of @var{face} to @var{normal} if
@c @var{italic-p} is @code{nil}, and to @var{italic} otherwise.
@end defun

@defun set-face-underline face underline &optional frame
Функция устанавливает атрибут @code{:underline} стиля @var{face}
в @var{underline}.

@c This sets the @code{:underline} attribute of @var{face} to
@c @var{underline}.
@end defun

@defun set-face-inverse-video face inverse-video-p &optional frame
Функция устанавливает атрибут @code{:inverse-video} стиля @var{face} в
@var{inverse-video-p}.
@c This sets the @code{:inverse-video} attribute of @var{face} to
@c @var{inverse-video-p}.
@end defun

@deffn Command invert-face face &optional frame
Функция меняет основной и цвет фона стиля @var{face}.
@c This swaps the foreground and background colors of face @var{face}.
@end deffn

  Следующие функции используются для получения значений атрибутов стиля.
В основном они представлены для сохранения обратной совместимости со
старыми версиями Emacs. Если не задавать параметр @var{frame}, функции
будут использовать выбранный фрейм; @code{t} указывает, что значения
будут соответствовать данным новых фреймов. Функции возвращают @code{unspecified}
если для стиля не определено значение указанного атрибута. Если
@var{inherit} @code{nil}, возвращаются только явно определенные атрибуты
стиля. Если @var{inherit} не-@code{nil}, любые стили заданные в атрибуте
@code{:inherit} будут рассматриваться для получения значения атрибута,
и если @var{inherit} является стилем или списком стилей, в них тоже будет
искаться требуемый атрибут, пока не будет найден. Чтобы возвращаемое
значение было определено стоит использовать значение @code{default} в @var{inherit}.

@c   The following functions examine the attributes of a face.  They
@c mostly provide compatibility with old versions of Emacs.  If you don't
@c specify @var{frame}, they refer to the selected frame; @code{t} refers
@c to the default data for new frames.  They return @code{unspecified} if
@c the face doesn't define any value for that attribute.  If
@c @var{inherit} is @code{nil}, only an attribute directly defined by the
@c face is returned.  If @var{inherit} is non-@code{nil}, any faces
@c specified by its @code{:inherit} attribute are considered as well, and
@c if @var{inherit} is a face or a list of faces, then they are also
@c considered, until a specified attribute is found.  To ensure that the
@c return value is always specified, use a value of @code{default} for
@c @var{inherit}.

@defun face-font face &optional frame character
Функция возвращает имя шрифта для стиля @var{face}.
@c This function returns the name of the font of face @var{face}.

Если не обязательный аргумент @var{frame} задан, функция вернет имя шрифта
стиля @var{face} для этого фрейма. Если @var{frame} не задано или
@code{nil}, используется выбранный фрейм. И, в этом случае, если предоставляется
не обязательный третий аргумент @var{character}, возвращается имя шрифта для @var{character}.

@c If the optional argument @var{frame} is specified, it returns the name
@c of the font of @var{face} for that frame.  If @var{frame} is omitted or
@c @code{nil}, the selected frame is used.  And, in this case, if the
@c optional third argument @var{character} is supplied, it returns the font
@c name used for @var{character}.
@end defun

@defun face-foreground face &optional frame inherit
@defunx face-background face &optional frame inherit
Функция возвращает основной цвет (или цвет фона, соответственно)
стиля @var{face}, в виде строки. Если цвет не определен,
возвращается @code{nil}.

@c These functions return the foreground color (or background color,
@c respectively) of face @var{face}, as a string.  If the color is
@c unspecified, they return @code{nil}.
@end defun

@defun face-stipple face &optional frame inherit
Функция возвращает имя цвета шаблона пунктира (stipple pattern) стиля
@var{face}, или @code{nil} если шаблон не задан.

@c This function returns the name of the background stipple pattern of face
@c @var{face}, or @code{nil} if it doesn't have one.
@end defun

@defun face-bold-p face &optional frame inherit
Функция возвращает не-@code{nil} если атрибут @code{:weight}
стиля @var{face} больше чем normal (обычный) (например один из
@code{semi-bold}, @code{bold}, @code{extra-bold}, или
@code{ultra-bold}). Иначе, возвращается @code{nil}.

@c This function returns a non-@code{nil} value if the @code{:weight}
@c attribute of @var{face} is bolder than normal (i.e., one of
@c @code{semi-bold}, @code{bold}, @code{extra-bold}, or
@c @code{ultra-bold}).  Otherwise, it returns @code{nil}.
@end defun

@defun face-italic-p face &optional frame inherit
Функция возвращает не-@code{nil} если атрибут @code{:slant}
стиля @var{face} @code{italic} или @code{oblique}, и
@code{nil} иначе.

@c This function returns a non-@code{nil} value if the @code{:slant}
@c attribute of @var{face} is @code{italic} or @code{oblique}, and
@c @code{nil} otherwise.с
@end defun

@defun face-underline-p face &optional frame inherit
Функция возвращает не-@code{nil}, если атрибут @code{:underline}
стиля @var{face} не-@code{nil}.

@c This function returns non-@code{nil} if face @var{face} specifies
@c a non-@code{nil} @code{:underline} attribute.
@end defun

@defun face-inverse-video-p face &optional frame inherit
Функция возвращает не-@code{nil} если атрибут
@code{:inverse-video} стиля @var{face} не-@code{nil}.

@c This function returns non-@code{nil} if face @var{face} specifies
@c a non-@code{nil} @code{:inverse-video} attribute.
@end defun

@node Displaying Faces
@subsection Отображение Стилей
@c @subsection Displaying Faces
@cindex displaying faces
@cindex face merging
  Когда Emacs отображает часть текста, внешнее отображение текста,
может определяться стилями получаемыми из разных источников. Если
разные источники определяют более одного стиля для определенного
символа, Emacs объединяет атрибуты разных стилей. Ниже приводится
порядок определяющий объединение стилей, в порядке уменьшения приоритета:

@c   When Emacs displays a given piece of text, the visual appearance of
@c the text may be determined by faces drawn from different sources.  If
@c these various sources together specify more than one face for a
@c particular character, Emacs merges the attributes of the various
@c faces.  Here is the order in which Emacs merges the faces, from
@c highest to lowest priority:

@itemize @bullet
@item
Если текст состоит из специального глифа, глиф может определить
специальный стиль. @xref{Glyphs}.

@c If the text consists of a special glyph, the glyph can specify a
@c particular face.  @xref{Glyphs}.

@item
Если текст находится внутри активной области(region), Emacs подсвечивает
его используя стиль @code{region}. @xref{Standard Faces,,, emacs, The GNUE Emacs Manual}.

@c If the text lies within an active region, Emacs highlights it using
@c the @code{region} face.  @xref{Standard Faces,,, emacs, The GNU Emacs
@c Manual}.

@item
Если текст находится внутри оверлея(overlay) c свойством @code{face}
не-@code{nil}, Emacs применяет стиль(ли) определенные свойством. Если
оверлей(overlay) имеет свойство @code{mouse-face} и мышь находится
в области оверлея(overlay), Emacs применяет стиль или атрибуты стиля
заданные свойством @code{mouse-face}. @xref{Overlay Properties}.

@c If the text lies within an overlay with a non-@code{nil} @code{face}
@c property, Emacs applies the face(s) specified by that property.  If
@c the overlay has a @code{mouse-face} property and the mouse is near
@c enough to the overlay, Emacs applies the face or face attributes
@c specified by the @code{mouse-face} property instead.  @xref{Overlay
@c Properties}.

Когда множество оверлеев(overlay) закрывают один символ, оверлей
с большим приоритетом отменяют свойства оверлеев с более низким приоритетом.
@xref{Overlays}.

@c When multiple overlays cover one character, an overlay with higher
@c priority overrides those with lower priority.  @xref{Overlays}.

@item
Если текст содержит свойство @code{face} или @code{mouse-face},
Emacs применяет заданные стили или атрибуты стилей. @xref{Special Properties}.
(Аналогично применяются стили режима Font Lock mode. @xref{Font Lock Mode}.)

@c If the text contains a @code{face} or @code{mouse-face} property,
@c Emacs applies the specified faces and face attributes.  @xref{Special
@c Properties}.  (This is how Font Lock mode faces are applied.
@c @xref{Font Lock Mode}.)

@item
Если текст находится внутри строки режима выбранного окна, Emacs
применяет стиль @code{mode-line}. Для строки режима не выбранного окна,
Emacs применяет @code{mode-line-inactive} стиль. Для строки заголовка
применяется стиль @code{header-line}.

@c If the text lies within the mode line of the selected window, Emacs
@c applies the @code{mode-line} face.  For the mode line of a
@c non-selected window, Emacs applies the @code{mode-line-inactive} face.
@c For a header line, Emacs applies the @code{header-line} face.

@item
Если какой-то из атрибутов не был определен на предыдущих шагах, Emacs
применит атрибут из @code{default} стиля.

@c If any given attribute has not been specified during the preceding
@c steps, Emacs applies the attribute of the @code{default} face.
@end itemize

  На каждой стадии, если стиль имеет корректное значение атрибута @code{:inherit},
Emacs рассматривает любой атрибут со значением @code{unspecified}, как
атрибут имеющий определенное значение в родительском(их) стиле(ях).
@pxref{Face Attributes}. При этом родительский(ие) стиль(и) могут
оставить атрибут неопределенным; в этом случае, атрибут остается неопределенным
для следующей стадии объединения стилей.

@c   At each stage, if a face has a valid @code{:inherit} attribute,
@c Emacs treats any attribute with an @code{unspecified} value as having
@c the corresponding value drawn from the parent face(s).  @pxref{Face
@c Attributes}.  Note that the parent face(s) may also leave the
@c attribute unspecified; in that case, the attribute remains unspecified
@c at the next level of face merging.

@node Face Remapping
@subsection Переназначение Стилей
@c @subsection Face Remapping
@cindex face remapping

  Переменная @code{face-remapping-alist} используется для локальных для
буфера или глобальных изменений внешнего вида стиля. Например она используется,
при реализации команды @code{text-scale-adust}. (@pxref{Text Scale,,, emacs, The GNU
Emacs Manual}).

@c   The variable @code{face-remapping-alist} is used for buffer-local or
@c global changes in the appearance of a face.  For instance, it is used
@c to implement the @code{text-scale-adjust} command (@pxref{Text
@c Scale,,, emacs, The GNU Emacs Manual}).

@defvar face-remapping-alist
Значение переменной хранит ассоциативный список элементы которого
имеют форму @code{(@var{face} . @var{remapping})}. В результате Emacs
отображает любой текст стиля @var{face} стилем @var{remapping}.

@c The value of this variable is an alist whose elements have the form
@c @code{(@var{face} . @var{remapping})}.  This causes Emacs to display
@c any text having the face @var{face} with @var{remapping}, rather than
@c the ordinary definition of @var{face}.

@var{remapping} может быть любой спецификацией стиля, возможной в
текстовом свойстве @code{face}: либо стиль (например имя стиля или
список пар свойств атрибут/значение), или список стилей. Больше информации
можно найти в описании текстового свойства стиля в @ref{Special
Properties}.  @var{remapping} служит в качестве полной спецификации для
переопределяемого стиля---и она заменяет определение @var{face},
а не изменяет его.

@c @var{remapping} may be any face spec suitable for a @code{face} text
@c property: either a face (i.e., a face name or a property list of
@c attribute/value pairs), or a list of faces.  For details, see the
@c description of the @code{face} text property in @ref{Special
@c Properties}.  @var{remapping} serves as the complete specification for
@c the remapped face---it replaces the normal definition of @var{face},
@c instead of modifying it.

Если @code{face-remapping-alist} локальный для буфера, эффект от значения
переменной действует только на этот буфер.

@c If @code{face-remapping-alist} is buffer-local, its local value takes
@c effect only within that buffer.

Стоит заметить: переопределение стилей не рекурсивное. Если @var{remapping}
ссылается на некоторое имя стиля @var{face}, явно или через @code{:inherit} атрибут
другого стиля в @var{remapping}, тогда эта ссылка использует обычное определение
стиля @var{face}. Например, если @code{mode-line} стиль переопределен используя
следующую запись @code{face-remapping-alist}:

@c Note: face remapping is non-recursive.  If @var{remapping} references
@c the same face name @var{face}, either directly or via the
@c @code{:inherit} attribute of some other face in @var{remapping}, that
@c reference uses the normal definition of @var{face}.  For instance, if
@c the @code{mode-line} face is remapped using this entry in
@c @code{face-remapping-alist}:

@example
(mode-line italic mode-line)
@end example

@noindent
новое определение стиля @code{mode-line} будет наследоваться от
стилей @code{italic} и @emph{обычного} (не-переопределенного) определения
стиля @code{mode-line}.

@c then the new definition of the @code{mode-line} face inherits from the
@c @code{italic} face, and the @emph{normal} (non-remapped) definition of
@c @code{mode-line} face.
@end defvar

@cindex relative remapping, faces
@cindex base remapping, faces
  Следующие функции реализуют высокоуровневый интерфейс для
@code{face-remapping-alist}. Большинство Lisp кода должно
использовать эти функции вместо прямого вызова @code{face-remapping-alist},
чтобы не помешать переназначению стилей сделанному в другом месте.
Функции предназначены для локального(для буфера) использования, поэтому
они все делают @code{face-remapping-alist} локальным(для буфера) в
качестве побочного эффекта. Функции обрабатывают записи следующего вида

@c   The following functions implement a higher-level interface to
@c @code{face-remapping-alist}.  Most Lisp code should use these
@c functions instead of setting @code{face-remapping-alist} directly, to
@c avoid trampling on remappings applied elsewhere.  These functions are
@c intended for buffer-local remappings, so they all make
@c @code{face-remapping-alist} buffer-local as a side-effect.  They manage
@c @code{face-remapping-alist} entries of the form

@example
  (@var{face} @var{relative-spec-1} @var{relative-spec-2} @var{...} @var{base-spec})
@end example

@noindent
где, как описано выше, каждый из @var{relative-spec-N} и
@var{base-spec} либо имя стиля, либо список свойств атрибут/значение.
Каждый из @dfn{относительных переопределений} (@dfn{relative remapping}),
@var{relative-spec-N}, обрабатывается функциями @code{face-remap-add-relative} и
@code{face-remap-remove-relative}; которые предназначены для простых изменений, таких
как размер текста. Записи @dfn{основные переопределения} (@dfn{base remapping}),
@var{base-spec}, имеют минимальный приоритет и обрабатываются функциями
@code{face-remap-set-base} и @code{face-remap-reset-base}; они используются
основными режимами для переопределения стилей в буферах, которые они
контролируют.

@c where, as explained above, each of the @var{relative-spec-N} and
@c @var{base-spec} is either a face name, or a property list of
@c attribute/value pairs.  Each of the @dfn{relative remapping} entries,
@c @var{relative-spec-N}, is managed by the
@c @code{face-remap-add-relative} and @code{face-remap-remove-relative}
@c functions; these are intended for simple modifications like changing
@c the text size.  The @dfn{base remapping} entry, @var{base-spec}, has
@c the lowest priority and is managed by the @code{face-remap-set-base}
@c and @code{face-remap-reset-base} functions; it is intended for major
@c modes to remap faces in the buffers they control.

@defun face-remap-add-relative face &rest specs
Функция добавляет стиль в @var{specs} как относительное переопределение
стиля @var{face} в текущем буфере. Оставшиеся аргументы, @var{specs},
должны быть списком имен стилей или списком свойств с парами атрибут/значение.

@c This function adds the face spec in @var{specs} as relative
@c remappings for face @var{face} in the current buffer.  The remaining
@c arguments, @var{specs}, should form either a list of face names, or a
@c property list of attribute/value pairs.

Функция возвращает Lisp объект, который работает как куки(cookie);
его можно передать этот объект в качестве аргумента @code{face-remap-remove-relative}
и переназначение будет удалено.

@c The return value is a Lisp object that serves as a cookie; you can
@c pass this object as an argument to @code{face-remap-remove-relative}
@c if you need to remove the remapping later.

@example
;; Remap the 'escape-glyph' face into a combination
;; of the 'highlight' and 'italic' faces:
(face-remap-add-relative 'escape-glyph 'highlight 'italic)

;; Increase the size of the 'default' face by 50%:
(face-remap-add-relative 'default :height 1.5)
@end example
@end defun

@defun face-remap-remove-relative cookie
Функция удаляет относительное переопределение ранее добавленное
функцией @code{face-remap-add-relative}. @var{cookie} должно быть
Lisp объектов, возвращенным функцией @code{face-remap-add-relative}
когда переопределение было создано.

@c This function removes a relative remapping previously added by
@c @code{face-remap-add-relative}.  @var{cookie} should be the Lisp
@c object returned by @code{face-remap-add-relative} when the remapping
@c was added.
@end defun

@defun face-remap-set-base face &rest specs
Функция устанавливает базовое переопределение для @var{face} в текущем
буфере в @var{specs}. Если @var{specs} пустое, восстанавливается
базовое определение, аналогично вызову функции @code{face-remap-reset-base}
(см. ниже); при этом, пустое значение отличается от случая если @var{spec}
содержит одно значение @code{nil}, которое приводит к противоположному
результату (игнорируется глобальное определение стиля @var{face}).

@c This function sets the base remapping of @var{face} in the current
@c buffer to @var{specs}.  If @var{specs} is empty, the default base
@c remapping is restored, similar to calling @code{face-remap-reset-base}
@c (see below); note that this is different from @var{specs} containing a
@c single value @code{nil}, which has the opposite result (the global
@c definition of @var{face} is ignored).

Функция перезаписывает @var{base-spec} по умолчанию, которая наследует глобальное
определение стиля, поэтому вызывающая функция должна добавить
такое наследование, если ей оно необходимо.

@c This overwrites the default @var{base-spec}, which inherits the global
@c face definition, so it is up to the caller to add such inheritance if
@c so desired.
@end defun

@defun face-remap-reset-base face
Функция устанавливает базовое переопределение стиля @var{face}
в значение по умолчанию, которое наследуется от глобального определения
стиля.

@c This function sets the base remapping of @var{face} to its default
@c value, which inherits from @var{face}'s global definition.
@end defun

@node Face Functions
@subsection Функции Для Работы со Стилями
@c @subsection Functions for Working with Faces

  В данном разделе описаны дополнительные функции для создания и работы
со стилями.
  @c Here are additional functions for creating and working with faces.

@defun face-list
Функция возвращает список всех определенных имен стилей.
@c This function returns a list of all defined face names.
@end defun

@defun face-id face
Функция возвращает @dfn{номер стиля} (@dfn{face number}) @var{face}.
Данное число является уникальным для каждого стиля внутри Emacs.
Редко когда бывает нужно ссылаться на стиль по его номеру.

@c This function returns the @dfn{face number} of face @var{face}.  This
@c is a number that uniquely identifies a face at low levels within
@c Emacs.  It is seldom necessary to refer to a face by its face number.
@end defun

@defun face-documentation face
Функция возвращает строку документации для стиля @var{face}, или
@code{nil}, если документация не была задана.

@c This function returns the documentation string of face @var{face}, or
@c @code{nil} if none was specified for it.
@end defun

@defun face-equal face1 face2 &optional frame
Функция возвращает @code{t} если стиля @var{face1} и @var{face2} имеют
одни и те же атрибуты отображения.

@c This returns @code{t} if the faces @var{face1} and @var{face2} have the
@c same attributes for display.
@end defun

@defun face-differs-from-default-p face &optional frame
Функция возвращает не-@code{nil} если стиль @var{face} отображается
отлично от стиля по умолчанию.

@c This returns non-@code{nil} if the face @var{face} displays
@c differently from the default face.
@end defun

@cindex face alias
@cindex alias, for faces
@dfn{Псевдоним стиля} @dfn{face alias} предоставляет альтернативное имя для
стиля. Можно определить псевдоним стиля, с помощью свойства @code{face-alias},
задав там символ, псевдонимом, которого должен быть текущий стиль.
В примере ниже, @code{modeline} определяется псевдонимом для @code{mode-line}.

@c A @dfn{face alias} provides an equivalent name for a face.  You can
@c define a face alias by giving the alias symbol the @code{face-alias}
@c property, with a value of the target face name.  The following example
@c makes @code{modeline} an alias for the @code{mode-line} face.

@example
(put 'modeline 'face-alias 'mode-line)
@end example

@defmac define-obsolete-face-alias obsolete-face current-face when
Макрос определяет @code{obsolete-face} как псевдоним для
@var{current-face}, и помечает его как устаревший, тем самым
указывая на то, что стиль может быть удален в дальнейшем. Параметр @var{when}
должен быть строкой, указывающей на то, когда @code{obsolete-face} стал
устаревшим (как правило строка с номером версии).

@c This macro defines @code{obsolete-face} as an alias for
@c @var{current-face}, and also marks it as obsolete, indicating that it
@c may be removed in future.  @var{when} should be a string indicating
@c when @code{obsolete-face} was made obsolete (usually a version number
@c string).
@end defmac

@node Auto Faces
@subsection Автоматическое Присваивание Стиля
@c @subsection Automatic Face Assignment
@cindex automatic face assignment
@cindex faces, automatic choice

  Данный перехватчик используется для автоматического присваивания
стилей тексту в буфере. Он является частью реализации режима Jit-Lock,
используемым Font-Lock.

@c   This hook is used for automatically assigning faces to text in the
@c buffer.  It is part of the implementation of Jit-Lock mode, used by
@c Font-Lock.

@defvar fontification-functions
Переменная хранит список функций который вызываются при перерисовке в Emacs,
непосредственно перед перерисовкой. Они вызываются даже если не активен
режим Font Lock. Когда Font Lock активен, как правило переменная
хранит одну функцию @code{jit-lock-function}.

@c This variable holds a list of functions that are called by Emacs
@c redisplay as needed, just before doing redisplay.  They are called even
@c when Font Lock Mode isn't enabled.  When Font Lock Mode is enabled, this
@c variable usually holds just one function, @code{jit-lock-function}.

Функции вызываются в порядке следования, в одним аргументом, позицией в
буфере @var{pos}. Вместе они должны назначить стиле для текста
начинающегося в позиции @var{pos}.

@c The functions are called in the order listed, with one argument, a
@c buffer position @var{pos}.  Collectively they should attempt to assign
@c faces to the text in the current buffer starting at @var{pos}.

Функции должны сохранять назначаемые стили, задавая свойство
@code{face}. Так же они должны добавлять не-@code{nil}
свойство @code{fontified} всему тексту которому они назначили стиль.
Свойство сообщает функции redisplay (перерисовки), что тексту уже
назначены стили.

@c The functions should record the faces they assign by setting the
@c @code{face} property.  They should also add a non-@code{nil}
@c @code{fontified} property to all the text they have assigned faces to.
@c That property tells redisplay that faces have been assigned to that text
@c already.

Обычно правильно функциям ничего не делать если символ после
@var{pos} уже имеет свойство @code{fontified} не-@code{nil},
но это не обязательно. Функции могут перезаписать значения, установленные
предыдущими функциями.

@c It is probably a good idea for the functions to do nothing if the
@c character after @var{pos} already has a non-@code{nil} @code{fontified}
@c property, but this is not required.  If one function overrides the
@c assignments made by a previous one, the properties after the last
@c function finishes are the ones that really matter.

В целях лучшей производительности, рекомендуется писать функции
таким образом, чтобы они назначали стили примерно 400 - 600 символам
при каждом вызове.

@c For efficiency, we recommend writing these functions so that they
@c usually assign faces to around 400 to 600 characters at each call.
@end defvar

@node Basic Faces
@subsection Базовые Стили
@c @subsection Basic Faces
@cindex basic faces

Если программе Emacs Lisp нужно присвоить какие-то стили тексту,
как правило стоит использовать существующие стили или производные
от них, вместо того чтобы определять полностью новые стили. Это позволяет
пользовательским программам встраиваться в Emacs без дополнительных
настроек, в случаях если в нем изменены базовые стили для придания
определенного вида.

@c If your Emacs Lisp program needs to assign some faces to text, it is
@c often a good idea to use certain existing faces or inherit from them,
@c rather than defining entirely new faces.  This way, if other users
@c have customized the basic faces to give Emacs a certain look, your
@c program will fit in without additional customization.

  Некоторые базовые стили определенные в Emacs перечислены ниже. Кроме
них можно использовать стили Font Lock для подсветки синтаксиса,
если подсветка еще не выполнена режимом Font Lock или некоторые
стили Font Lock не используются. @xref{Faces For Font Lock}.

@c   Some of the basic faces defined in Emacs are listed below.  In
@c addition to these, you might want to make use of the Font Lock faces
@c for syntactic highlighting, if highlighting is not already handled by
@c Font Lock mode, or if some Font Lock faces are not in use.
@c @xref{Faces for Font Lock}.

@table @code
@item default
Стиля по умолчанию (дефолтный), для него определены
все атрибуты. Все другие стили неявно наследуют его значения: т.е.
если значение атрибута не задано, то берется его значение
(@pxref{Face Attributes}).

@c The default face, whose attributes are all specified.  All other faces
@c implicitly inherit from it: any unspecified attribute defaults to the
@c attribute on this face (@pxref{Face Attributes}).

@item bold
@itemx italic
@itemx bold-italic
@itemx underline
@itemx fixed-pitch
@itemx fixed-pitch-serif
@itemx variable-pitch
Для этих стилей заданы атрибуты соответствующие их именам
(например @code{bold} имеет значение bold для атрибута @code{:weight}),
и все другие атрибуты не заданы (и берутся из стиля @code{default}).

@c These have the attributes indicated by their names (e.g., @code{bold}
@c has a bold @code{:weight} attribute), with all other attributes
@c unspecified (and so given by @code{default}).

@item shadow
Для серого (тусклого цвета). Например, данный стиль используется
для игнорируемой части имени файла в мини-буфере. (@pxref{Minibuffer File,,
Minibuffer for File Names, emacs, The GNU Emacs Manual}).

@c For dimmed-out text.  For example, it is used for the ignored
@c part of a filename in the minibuffer (@pxref{Minibuffer File,,
@c Minibuffers for File Names, emacs, The GNU Emacs Manual}).

@item link
@itemx link-visited
Стиль используется для текста, при клике на который выполняется
переход в другое место. (аналог ссылки в браузере).
@c For clickable text buttons that send the user to a different
@c buffer or location.

@item highlight
Для фрагментов текста, которые должны быть временно выделены. Например,
стиль обычно назначается через свойство @code{mouse-face} для выделения курсора.
(@pxref{Special Properties}).

@c For stretches of text that should temporarily stand out.  For example,
@c it is commonly assigned to the @code{mouse-face} property for cursor
@c highlighting (@pxref{Special Properties}).

@item match
@itemx isearch
@itemx lazy-highlight
Стиль применяется для подсветки совпадения (соответствий) при поиске,
интерактивном поиске, или ленивом выделении других соответствий, кроме текущего
интерактивного.

@c For text matching (respectively) permanent search matches, interactive
@c search matches, and lazy highlighting other matches than the current
@c interactive one.

@item error
@itemx warning
@itemx success
Стили используется для текста в отношении ошибок, предупреждений или
успешного выполнения. Например, стили используются для сообщений
в буферах @file{*Compilation*}.

@c For text concerning errors, warnings, or successes.  For example,
@c these are used for messages in @file{*Compilation*} buffers.
@end table

@node Font Selection
@subsection Выбор Шрифта
@c @subsection Font Selection
@cindex font selection
@cindex selecting a font

  Перед тем как Emacs отобразит символ на графическом дисплее,
он должен выбрать @dfn{Шрифт} (@dfn{font}) для этого символа
@footnote{В данном контексте, термин @dfn{шрифт}(@dfn{font}) не имеет ничего
общего с режимом Font Lock (@pxref{Font Lock Mode}).}. @xref{Fonts,,, emacs, The GNU Emacs manual}.
Обычно Emacs автоматически выбирает шрифт, основываясь на стилях заданных
для символа---таких атрибутах как @code{:family}, @code{:weight},
@code{:slant}, и @code{:width} (@pxref{Face Attributes}). Выбор шрифта
зависит и от отображаемого символа; так как некоторые шрифты могут отображать
только ограниченное количество символов. Если нет точно подходящего шрифта, Emacs
ищет @dfn{ближайший подходящий шрифт} (@dfn{closest matching font}). Переменные
из данного раздела управляют данным выбором.

@c   Before Emacs can draw a character on a graphical display, it must
@c select a @dfn{font} for that character@footnote{In this context, the
@c term @dfn{font} has nothing to do with Font Lock (@pxref{Font Lock
@c Mode}).}.  @xref{Fonts,,, emacs, The GNU Emacs Manual}.  Normally,
@c Emacs automatically chooses a font based on the faces assigned to that
@c character---specifically, the face attributes @code{:family},
@c @code{:weight}, @code{:slant}, and @code{:width} (@pxref{Face
@c Attributes}).  The choice of font also depends on the character to be
@c displayed; some fonts can only display a limited set of characters.
@c If no available font exactly fits the requirements, Emacs looks for
@c the @dfn{closest matching font}.  The variables in this section
@c control how Emacs makes this selection.

@defopt face-font-family-alternatives
Если заданное семейство шрифтов задано, но не существует, переменная задает
альтернативные семейства шрифтов. Каждый элемент должен иметь форму:

@c If a given family is specified but does not exist, this variable
@c specifies alternative font families to try.  Each element should have
@c this form:

@example
(@var{family} @var{alternate-families}@dots{})
@end example

Если @var{family} указано, но не доступно, Emacs будет пытаться использовать
семейства заданные в @var{alternate-families}, проверяя их по очереди пока
не найдет доступное.

@c If @var{family} is specified but not available, Emacs will try the other
@c families given in @var{alternate-families}, one by one, until it finds a
@c family that does exist.
@end defopt

@defopt face-font-selection-order
Если нет шрифта, который полностью соответствует всем требуемым атрибутам
стиля (@code{:width}, @code{:height}, @code{:weight} и @code{:slant}),
то с помощью данной переменной определяется порядок важности атрибутов,
по которому будет определяться ближайший подходящий шрифт. Значение должно
быть списком содержащим символы указанных четырех атрибутов, в порядке
уменьшения важности. Значение по умолчанию @code{(:width :height :weight :slant)}.

@c If there is no font that exactly matches all desired face attributes
@c (@code{:width}, @code{:height}, @code{:weight}, and @code{:slant}),
@c this variable specifies the order in which these attributes should be
@c considered when selecting the closest matching font.  The value should
@c be a list containing those four attribute symbols, in order of
@c decreasing importance.  The default is @code{(:width :height :weight
@c :slant)}.

При выборе шрифта сначала ищется шрифты наиболее подходящий по первому атрибуту,
среди них наиболее подходящие по второму и так далее.

@c Font selection first finds the best available matches for the first
@c attribute in the list; then, among the fonts which are best in that
@c way, it searches for the best matches in the second attribute, and so
@c on.

Атрибуты @code{:weight} и @code{:width} имеют символьные значение в диапазоне
центром которого является @code{normal}. Соответствия которые более экстремальны
(дальше от @code{normal}) являются более предпочтительны менее экстремальным
(значения ближе к @code{normal}); так сделано, чтобы не нормальные стили как
можно больше контрастировали с нормальными.

@c The attributes @code{:weight} and @code{:width} have symbolic values in
@c a range centered around @code{normal}.  Matches that are more extreme
@c (farther from @code{normal}) are somewhat preferred to matches that are
@c less extreme (closer to @code{normal}); this is designed to ensure that
@c non-normal faces contrast with normal ones, whenever possible.

Примером когда переменная имеет значение, является ситуация, когда
шрифт по умолчанию не имеет эквивалента для intalic (наклонный шрифт).
С упорядочиванием по умолчанию @code{italic} стиль будет использовать
не-italic шрифт, схожий с шрифтом по умолчанию. Но если поставить @code{:slant}
перед @code{:height}, то будет использоваться italic(наклонный) шрифт, даже
если его высота не совсем верная.

@c One example of a case where this variable makes a difference is when the
@c default font has no italic equivalent.  With the default ordering, the
@c @code{italic} face will use a non-italic font that is similar to the
@c default one.  But if you put @code{:slant} before @code{:height}, the
@c @code{italic} face will use an italic font, even if its height is not
@c quite right.
@end defopt

@defopt face-font-registry-alternatives

Переменная позволяет задать альтернативные реестры шрифтов, на случай
если заданный реестр не существует. Каждый элемент должен иметь
форму:

@c This variable lets you specify alternative font registries to try, if a
@c given registry is specified and doesn't exist.  Each element should have
@c this form:

@example
(@var{registry} @var{alternate-registries}@dots{})
@end example

Если @var{registry} задан, но не доступен, Emacs будет пытаться использовать
другие реестры указанные в @var{alternate-registries}, по одному,
пока не найдет доступный реестр.

@c If @var{registry} is specified but not available, Emacs will try the
@c other registries given in @var{alternate-registries}, one by one,
@c until it finds a registry that does exist.
@end defopt

@cindex scalable fonts
 Emacs может использовать масштабируемые шрифты, но по умолчанию не
использует их.
@c  Emacs can make use of scalable fonts, but by default it does not use
@c them.

@defopt scalable-fonts-allowed
Переменная контролирует какие масштабируемые шрифты стоит использовать.
Значение по умолчанию, @code{nil}, означает, отсутствие масштабируемых
шрифтов. Значение @code{t}, означает использование любых
масштабируемых шрифтов, которые выглядят подходящими.

@c This variable controls which scalable fonts to use.  A value of
@c @code{nil}, the default, means do not use scalable fonts.  @code{t}
@c means to use any scalable font that seems appropriate for the text.

В других случаях значение должно быть список регулярных выражений.
Тогда масштабируемый шрифт доступен для использования, если соответствует
одному из регулярных выражений в списке. Например,

@c Otherwise, the value must be a list of regular expressions.  Then a
@c scalable font is enabled for use if its name matches any regular
@c expression in the list.  For example,

@example
(setq scalable-fonts-allowed '("iso10646-1$"))
@end example

@noindent
позволяет использовать масштабируемые шрифты с реестром @code{iso10646-1}.
@c allows the use of scalable fonts with registry @code{iso10646-1}.
@end defopt

@defvar face-font-rescale-alist
Переменная задает масштабирование для определенных шрифтов. Значение
должно быть списком элементов следующей формы:

@c This variable specifies scaling for certain faces.  Its value should
@c be a list of elements of the form

@example
(@var{fontname-regexp} . @var{scale-factor})
@end example

Если @var{fontname-regexp} соответствует имени шрифта, который должен
быть использован, значение в данной переменной указывает, что нужно
выбрать схожий шрифт в соответствии с множителем @var{scale-factor}.
Данную переменную используют, чтобы нормировать размер шрифта, если
определенные шрифты больше или меньше чем нужно.

@c If @var{fontname-regexp} matches the font name that is about to be
@c used, this says to choose a larger similar font according to the
@c factor @var{scale-factor}.  You would use this feature to normalize
@c the font size if certain fonts are bigger or smaller than their
@c nominal heights and widths would suggest.
@end defvar

@node Font Lookup
@subsection Поиск Шрифтов
@c @subsection Looking Up Fonts
@cindex font lookup
@cindex looking up fonts

@defun x-list-fonts name &optional reference-face frame maximum width
Функция возвращает список доступных имен шрифтов, которые соответствуют
имени @var{name}. @var{name} должно быть строкой содержащей имя шрифта,
в любом из Fontconfig, GTK, bkb XLFD форматов (@pxref{Fonts,,, emacs, The
GNU Emacs Manual}). Для строк XLFD шрифтов, можно использовать символы
подстановки: @samp{*} соответствует любой подстроке, и @samp{?} соответствует
одному любому символу. При сопоставлении имен шрифтов регистр игнорируется.

@c This function returns a list of available font names that match
@c @var{name}.  @var{name} should be a string containing a font name in
@c either the Fontconfig, GTK, or XLFD format (@pxref{Fonts,,, emacs, The
@c GNU Emacs Manual}).  Within an XLFD string, wildcard characters may be
@c used: the @samp{*} character matches any substring, and the @samp{?}
@c character matches any single character.  Case is ignored when matching
@c font names.

Если заданы необязательные аргументы @var{reference-face} и @var{frame},
возвращаемый список будет возвращать шрифты того же размера, что и
@var{reference-face} (имя шрифта), который находится во фрейме @var{frame}.

@c If the optional arguments @var{reference-face} and @var{frame} are
@c specified, the returned list includes only fonts that are the same
@c size as @var{reference-face} (a face name) currently is on the frame
@c @var{frame}.

Не обязательный аргумент @var{maximum} устанавливает максимальное
количество возвращаемых шрифтов, если значение не-@code{nil}. Установка
небольшого значения для @var{maximum} может сделать функцию быстрее, в случаях
если много шрифтов соответствуют шаблону, так как поиск соответствий прекращается
после нахождения @var{maximum} шрифтов.

@c The optional argument @var{maximum} sets a limit on how many fonts to
@c return.  If it is non-@code{nil}, then the return value is truncated
@c after the first @var{maximum} matching fonts.  Specifying a small
@c value for @var{maximum} can make this function much faster, in cases
@c where many fonts match the pattern.

Не обязательный аргумент @var{width} задает желаемую ширину шрифта. Если
значение не-@code{nil}, функция возвращает те шрифты, чьи символы
(в среднем) в @var{width} раз шире чем @var{reference-face}.

@c The optional argument @var{width} specifies a desired font width.  If
@c it is non-@code{nil}, the function only returns those fonts whose
@c characters are (on average) @var{width} times as wide as
@c @var{reference-face}.
@end defun

@defun x-family-fonts &optional family frame
Функция возвращает список описывающий доступные шрифты для семейства @var{family}
для фрейма @var{frame}. Если @var{family} не задано или @code{nil},
список применяется ко всем семействам, и таким образом, содержит все
доступные шрифты. Иначе, @var{family}, должно быть строкой, при этом
в ней могут использоваться символы подстановки @samp{?} и @samp{*}.

@c This function returns a list describing the available fonts for family
@c @var{family} on @var{frame}.  If @var{family} is omitted or @code{nil},
@c this list applies to all families, and therefore, it contains all
@c available fonts.  Otherwise, @var{family} must be a string; it may
@c contain the wildcards @samp{?} and @samp{*}.

Список описывает дисплей на котором находится @var{frame}; если @var{frame}
не задан или @code{nil}, по умолчанию используется выбранный дисплей
(@pxref{Input Focus}).

@c The list describes the display that @var{frame} is on; if @var{frame} is
@c omitted or @code{nil}, it applies to the selected frame's display
@c (@pxref{Input Focus}).

Каждый элемент списка является вектором следующей формы:
@c Each element in the list is a vector of the following form:

@example
[@var{family} @var{width} @var{point-size} @var{weight} @var{slant}
 @var{fixed-p} @var{full} @var{registry-and-encoding}]
@end example

Первые пять элементов соответствуют атрибутам шрифта; если
задать эти атрибуты шрифту, будет использоваться этот шрифт.

@c The first five elements correspond to face attributes; if you
@c specify these attributes for a face, it will use this font.

Последние три элемента дают дополнительную информацию о шрифте.
@var{fixed-p} не-@code{nil}, если шрифт имеет фиксированный шаг.
@var{full} указывает полное имя шрифта, и @var{registry-and-encoding}
строка указывающая на реестр и кодировку шрифта.

@c The last three elements give additional information about the font.
@c @var{fixed-p} is non-@code{nil} if the font is fixed-pitch.
@c @var{full} is the full name of the font, and
@c @var{registry-and-encoding} is a string giving the registry and
@c encoding of the font.
@end defun

@node Fontsets
@subsection Семейства Шрифтов
@c @subsection Fontsets
@cindex fontset

  @dfn{Семейство шрифтов} (@dfn{fontset}) это список шрифтов, в котором каждый
имеет диапазон кодов символов. Отдельный шрифт не может отображать весь
диапазон символов поддерживаемых Emacs, но семейство шрифтов может.
Семейства имеют имена, также как и шрифты, и можно использовать
имя семейства вместо имени шрифта при задании шрифта для фрейма или стиля.
Ниже информация по определению семейств шрифтов в Lisp программах.

@c   A @dfn{fontset} is a list of fonts, each assigned to a range of
@c character codes.  An individual font cannot display the whole range of
@c characters that Emacs supports, but a fontset can.  Fontsets have names,
@c just as fonts do, and you can use a fontset name in place of a font name
@c when you specify the font for a frame or a face.  Here is
@c information about defining a fontset under Lisp program control.

@defun create-fontset-from-fontset-spec fontset-spec &optional style-variant-p noerror
Функция определяет новое семейство шрифтов в соответствии со
спецификацией @var{fontset-spec}. Строка должна иметь следующий форма:

@c This function defines a new fontset according to the specification
@c string @var{fontset-spec}.  The string should have this format:

@smallexample
@var{fontpattern}, @r{[}@var{charset}:@var{font}@r{]@dots{}}
@end smallexample

@noindent
Пробельные символы до и после запятых игнорируются.
@c Whitespace characters before and after the commas are ignored.

Первая часть строки, @var{fontpattern}, должна иметь форму стандартного
имени X шрифта, за исключением, того, что последние два поля должны
быть @samp{fontset-@var{alias}}.

@c The first part of the string, @var{fontpattern}, should have the form of
@c a standard X font name, except that the last two fields should be
@c @samp{fontset-@var{alias}}.

Новое семейство имеет два имение, одно длинное, одно короткое. Длинное
имя это @var{fontpattern} целиком. Короткое имя это @samp{fontset-@var{alias}}.
Ссылаться на семейство можно по любому из имен. Если уже существует семейство
с таким именем, будет ошибка, если только параметр @var{noerror} не выставлен в
не-@code{nil}, в этом случае функция просто ничего не сделает.

@c The new fontset has two names, one long and one short.  The long name is
@c @var{fontpattern} in its entirety.  The short name is
@c @samp{fontset-@var{alias}}.  You can refer to the fontset by either
@c name.  If a fontset with the same name already exists, an error is
@c signaled, unless @var{noerror} is non-@code{nil}, in which case this
@c function does nothing.

Если необязательный аргумент @var{style-variant-p} не-@code{nil}, будет создан
bold, italic или bold-italic вариант семейства в зависимости от значения.
Такие варианты семейства не имеют короткого имени, только длинное, которое
создается изменением @var{fontpattern} указанием статуса bold и/или italic.

@c If optional argument @var{style-variant-p} is non-@code{nil}, that says
@c to create bold, italic and bold-italic variants of the fontset as well.
@c These variant fontsets do not have a short name, only a long one, which
@c is made by altering @var{fontpattern} to indicate the bold and/or italic
@c status.

Строка спецификации так же указывает какие шрифты будут использоваться
в семействе. Детали описаны ниже.
@c The specification string also says which fonts to use in the fontset.
@c See below for the details.
@end defun

  Конструкция @samp{@var{charset}:@var{font}} указывает какой шрифт
использовать (в данном семействе) для указанного множества символов.
Где @var{charset} имя множества символов (character set), а @var{font}
шрифт используемый для этого множества. Данная конструкция может использоваться
сколько угодно раз в строке определения семейства.

@c   The construct @samp{@var{charset}:@var{font}} specifies which font to
@c use (in this fontset) for one particular character set.  Here,
@c @var{charset} is the name of a character set, and @var{font} is the font
@c to use for that character set.  You can use this construct any number of
@c times in the specification string.

  Для множеств символов, для которых спецификация шрифта не бала указана
явно, Emacs выберет шрифт основываясь на @var{fontpattern}: заменив
@samp{font-set-@var{alias}} значением которое указывает одно множество символов.
Например для множества символов @acronym{ASCII}, @samp{fontset-@var{alias}}
заменяется на @samp{ISO8859-1}.

@c   For the remaining character sets, those that you don't specify
@c explicitly, Emacs chooses a font based on @var{fontpattern}: it replaces
@c @samp{fontset-@var{alias}} with a value that names one character set.
@c For the @acronym{ASCII} character set, @samp{fontset-@var{alias}} is replaced
@c with @samp{ISO8859-1}.

  В дополнение, когда несколько последовательных полей являются
подстановками(wildcards, Emacs объединяет их в одну подстановку.
Это предотвращает использование шрифтов с авто масштабированием. Так
как шрифты созданные путем масштабирования больших шрифтов не
пригодны для редактирования, и масштабировать маленькие шрифты тоже
не хорошо, лучше использовать маленькие шрифты соответствующего размера,
что Emacs и делает.

@c   In addition, when several consecutive fields are wildcards, Emacs
@c collapses them into a single wildcard.  This is to prevent use of
@c auto-scaled fonts.  Fonts made by scaling larger fonts are not usable
@c for editing, and scaling a smaller font is not useful because it is
@c better to use the smaller font in its own size, which Emacs does.

  Таким образом если @var{fontpattern} имеет вид:
  @c Thus if @var{fontpattern} is this,

@example
-*-fixed-medium-r-normal-*-24-*-*-*-*-*-fontset-24
@end example

@noindent
шрифт задающий множество символов @acronym{ASCII} будет:
@c the font specification for @acronym{ASCII} characters would be this:

@example
-*-fixed-medium-r-normal-*-24-*-ISO8859-1
@end example

@noindent
а шрифт задающий множество китайских символов GB2312 будет:
@c and the font specification for Chinese GB2312 characters would be this:

@example
-*-fixed-medium-r-normal-*-24-*-gb2312*-*
@end example

  У пользователя может не быть Китайского шрифта, соответствующего
спецификации шрифта. Большинство X дистрибутивов включают только шрифты,
которые имеют @samp{song ti} или @samp{fangsong ti} в поле @var{family}.
В таком случае, @samp{Fontset-@var{n}} может быть задан как в примере ниже:

@c   You may not have any Chinese font matching the above font
@c specification.  Most X distributions include only Chinese fonts that
@c have @samp{song ti} or @samp{fangsong ti} in the @var{family} field.  In
@c such a case, @samp{Fontset-@var{n}} can be specified as below:

@smallexample
Emacs.Fontset-0: -*-fixed-medium-r-normal-*-24-*-*-*-*-*-fontset-24,\
        chinese-gb2312:-*-*-medium-r-normal-*-24-*-gb2312*-*
@end smallexample

@noindent
Тогда, определение для всех, кроме Китайских GB2312 символов будет
иметь @samp{fixed} в поле @var{family}, а определение для Китайских символов GB2312
будет иметь символ подстановки @samp{*} в поле @var{family}.

@c Then, the font specifications for all but Chinese GB2312 characters have
@c @samp{fixed} in the @var{family} field, and the font specification for
@c Chinese GB2312 characters has a wild card @samp{*} in the @var{family}
@c field.

@defun set-fontset-font name character font-spec &optional frame add
Функция задает использование шрифта @var{font-spec} для символа
@var{character} в семействе с именем @var{name}.

@c This function modifies the existing fontset @var{name} to use the font
@c matching with @var{font-spec} for the specified @var{character}.

Если @var{name} @code{nil}, функция изменяет все семейства фрейма @var{frame},
или если значение @var{frame} @code{nil}, то текущего фрейма.

@c If @var{name} is @code{nil}, this function modifies the fontset of the
@c selected frame or that of @var{frame} if @var{frame} is not
@c @code{nil}.

Если @var{name} @code{t}, функция изменяет семейство по умолчанию,
то есть у которого короткое имя @samp{fontset-default}.

@c If @var{name} is @code{t}, this function modifies the default
@c fontset, whose short name is @samp{fontset-default}.

Кроме задания одной кодовой точки (codepoint), @var{character} может быть cons
ячейкой @code{(@var{from} . @var{to}}, где @var{from} и @var{to}
кодовые точки символов. Тогда определение шрифта @var{font-spec} будет
использоваться для всех символов в диапазоне @var{from} - @var{to} (включительно).

@c In addition to specifying a single codepoint, @var{character} may be a
@c cons @code{(@var{from} . @var{to})}, where @var{from} and @var{to} are
@c character codepoints.  In that case, use @var{font-spec} for all the
@c characters in the range @var{from} and @var{to} (inclusive).

@var{character} может быть множеством символов (charset). В этом случае,
спецификация шрифта @var{font-spec} будет использоваться для
все символов множества.

@c @var{character} may be a charset.  In that case, use
@c @var{font-spec} for all character in the charsets.

@var{character} может быть именем скрипта. В этом случае,
спецификация @var{font-spec} будет использоваться для
всех символов принадлежащих скрипту. (Прим. в оригинале, данный
вопрос не расписан, но в документации есть:
TARGET may be a script symbol.  In that case, use FONT-SPEC for
all the characters that belong to the script.  See the variable
‘script-representative-chars’ for the list of known scripts.
то есть символы принадлежащие скрипту).

@c @var{character} may be a script name.  In that case, use
@c @var{font-spec} for all character in the charsets.

@var{font-spec} может быть объектом font-spec созданным
функцией @code{font-spec} (@pxref{Low-Level Font}).

@c @var{font-spec} may be a font-spec object created by the function
@c @code{font-spec} (@pxref{Low-Level Font}).

@var{font-spec} может быть cons ячейкой @code{(@var{family} . @var{registry})},
где @var{family} имя семейства шрифтов (возможно содержание имени foundry шрифта
(прим. видимо базового) в начале), @var{registry} имя шрифта в реестре
(возможно включающее имя кодировки в хвосте).

@c @var{font-spec} may be a cons; @code{(@var{family} . @var{registry})},
@c where @var{family} is a family name of a font (possibly including a
@c foundry name at the head), @var{registry} is a registry name of a font
@c (possibly including an encoding name at the tail).

@var{font-spec} может быть строковым названием шрифта.
@c @var{font-spec} may be a font name string.

@var{font-spec} может быть @code{nil}, что явно указывает, что для символм
@var{character} нет шрифта. Это применяется, чтобы избежать тяжелого
поиска по всей системе шрифтов для символов у которых нет глифов, таких
как символы из Unicode Private Use Area (PUA).

@c @var{font-spec} may be @code{nil}, which explicitly specifies that
@c there's no font for the specified @var{character}.  This is useful,
@c for example, to avoid expensive system-wide search for fonts for
@c characters that have no glyphs, like those from the Unicode Private
@c Use Area (PUA).

Не обязательный аргумент @var{add}, если не-@code{nil}, задает, как
будет добавляться @var{font-spec} в ранее установленную спецификацию.
Если значение @var{preprend}, @var{font-set} добавляется в начало, если
@var{append} добавляется в конец. По умолчанию, @var{font-spec} перезаписывает
предыдущее значение.

@c The optional argument @var{add}, if non-@code{nil}, specifies how to
@c add @var{font-spec} to the font specifications previously set.  If it
@c is @code{prepend}, @var{font-spec} is prepended.  If it is
@c @code{append}, @var{font-spec} is appended.  By default,
@c @var{font-spec} overrides the previous settings.

Например, ниже для семейства задается использование шрифта имя семейства которого
@samp{Kochi Gothic} для всех символов относящихся к кодировке (множеству) @code{japanese-jisx0208}.

@c For instance, this changes the default fontset to use a font of which
@c family name is @samp{Kochi Gothic} for all characters belonging to
@c the charset @code{japanese-jisx0208}.

@smallexample
(set-fontset-font t 'japanese-jisx0208
                  (font-spec :family "Kochi Gothic"))
@end smallexample
@end defun

@defun char-displayable-p char
Функция возвращает @code{t} если Emacs в состоянии отобразить символ
@var{char}. Точнее, если может ли выбранное в текущем фрейме семейство
шрифтов отобразить множество символов к которому относится @var{char}.

@c This function returns @code{t} if Emacs ought to be able to display
@c @var{char}.  More precisely, if the selected frame's fontset has a
@c font to display the character set that @var{char} belongs to.

Семейства могут задавать шрифты для отедельных символов; поэтому
функция не будет точной, если так делается.

@c Fontsets can specify a font on a per-character basis; when the fontset
@c does that, this function's value may not be accurate.
@end defun

@node Low-Level Font
@subsection Низкоуровневое Представление Шрифтов
@c @subsection Low-Level Font Representation
@cindex font property

  Обычно нет необходимости напрямую работать с шрифтами. Данная секция,
описывает как напрямую работать со шрифтами, в случае возникновения
такой необходимости.

@c   Normally, it is not necessary to manipulate fonts directly.  In case
@c you need to do so, this section explains how.

  В Emacs Lisp, шрифты представляются с использованием трех
разных типов Lisp объектов: @dfn{(объекты шрифтов} (@dfn{font objects}),
@dfn{определения шрифтов} (@dfn{font-specs}) и @dfn{сущности шрифтов}
(@dfn{font-entities}).

@c   In Emacs Lisp, fonts are represented using three different Lisp
@c object types: @dfn{font objects}, @dfn{font specs}, and @dfn{font
@c entities}.

@defun fontp object &optional type
Возвращает @code{t} если @var{object} является объектом шрифта,
спецификацией шрифта, или сущностью шрифта. Иначе, возвращается @code{nil}.

@c Return @code{t} if @var{object} is a font object, font spec, or font
@c entity.  Otherwise, return @code{nil}.

Не обязательный аргумент @var{type}, если не-@code{nil}, определяет
точный тип Lisp объекта для проверки. В этом случае, @var{type}
должен быть @code{font-object}, @code{font-spec}, или @code{font-entity}.

@c The optional argument @var{type}, if non-@code{nil}, determines the
@c exact type of Lisp object to check for.  In that case, @var{type}
@c should be one of @code{font-object}, @code{font-spec}, or
@c @code{font-entity}.
@end defun

@cindex font object
  Объект шрифта Lisp объект, представляющий шрифт, который Emacs @dfn{открыл}
(has @dfn{opened}). Шрифт не может быть изменен в Lisp, но к нему можно обращаться.

@c   A font object is a Lisp object that represents a font that Emacs has
@c @dfn{opened}.  Font objects cannot be modified in Lisp, but they can
@c be inspected.

@defun font-at position &optional window string
Функция возвращает объект шрифта, который используется для отображения
символа в позиции @var{position} в окне @var{window}. Если @var{window}
@code{nil}, используется выбранное окно. Если @var{string} @code{nil},
@var{position} задает позицию в текущем буфере;
иначе, @var{string} должно быть строкой, и @var{position} позицией в этой строке.

@c Return the font object that is being used to display the character at
@c position @var{position} in the window @var{window}.  If @var{window}
@c is @code{nil}, it defaults to the selected window.  If @var{string} is
@c @code{nil}, @var{position} specifies a position in the current buffer;
@c otherwise, @var{string} should be a string, and @var{position}
@c specifies a position in that string.
@end defun

@cindex font spec
  Спецификация шрифта Lisp объект, который содержит множество спецификаций,
которые могут быть использованы для поиска шрифта. Спецификации может
соответствовать более одного шрифта.

@c   A font spec is a Lisp object that contains a set of specifications
@c that can be used to find a font.  More than one font may match the
@c specifications in a font spec.

@defun font-spec &rest arguments
Функция возвращает новую спецификацию, заданную аргументами
@var{arguments}, которые должны быть @code{property}-@code{value} парами.
В аргументах возможны следующие определения:

@c Return a new font spec using the specifications in @var{arguments},
@c which should come in @code{property}-@code{value} pairs.  The possible
@c specifications are as follows:

@table @code
@item :name
Имя шрифта (строка), в XLFD, Fontconfig, или GTK формате.
@xref{Fonts,,, emacs, The GNU Emacs Manual}.

@c The font name (a string), in either XLFD, Fontconfig, or GTK format.
@c @xref{Fonts,,, emacs, The GNU Emacs Manual}.

@item :family
@itemx :foundry
@itemx :weight
@itemx :slant
@itemx :width
Атрибуты имеют то же значение, что и атрибуты шрифта с тем же именем.
@xref{Face Attributes}.

@c These have the same meanings as the face attributes of the same name.
@c @xref{Face Attributes}.

@item :size
Размер шрифта--положительное целое, определяющее размер в пикселях, либо
число с плавающей точкой, определяющее размер в point (point size или pt,
1 pt = 0.352778 миллиметра).

@c The font size---either a non-negative integer that specifies the pixel
@c size, or a floating-point number that specifies the point size.

@item :adstyle
Дополнительная информация о типографском стиле, такая как
@samp{sans}. Значение должно быть строкой или символом.

@c Additional typographic style information for the font, such as
@c @samp{sans}.  The value should be a string or a symbol.

@cindex font registry
@item :registry
Реестр кодировки и кодировка для шрифта, такая как @samp{iso8859-1}.
Значение должно быть строкой или символом.

@c The charset registry and encoding of the font, such as
@c @samp{iso8859-1}.  The value should be a string or a symbol.

@item :script
Скрипт, который должен поддерживать шрифт (символ).
@c The script that the font must support (a symbol).

@item :lang
Язык, который шрифт должен поддерживать. Значение должно быть
символом, имя которого задается двух-буквенным значением из ISO-639.
Для X, значение совпадает с полем ``Additional Style''(``Дополнительный Стиль'')
XLFD имение шрифта, если значение этого поля не пусто. Для MS-Windows, шрифты
соответствующие спецификации должны поддерживать кодовые страницы для языка.
В настоящий момент, только небольшое множество CJK языков поддерживается
этим свойством: @samp{ja}, @samp{ko}, @samp{zh}.

@c The language that the font should support.  The value should be a
@c symbol whose name is a two-letter ISO-639 language name.  On X, the
@c value is matched against the ``Additional Style'' field of the XLFD
@c name of a font, if it is non-empty.  On MS-Windows, fonts matching the
@c spec are required to support codepages needed for the language.
@c Currently, only a small set of CJK languages is supported with this
@c property: @samp{ja}, @samp{ko}, and @samp{zh}.

@item :otf
@cindex OpenType font
Шрифт должен быть OpenType шрифтом, который поддерживает функции
OpenType шрифтов, предоставляемые Emacs при условии, что он скомпилирован
с библиотекой, такой как @samp{libotf} на GNU/Linux и которая поддерживает
сложную разметку текста там где это нужно. Значение должно быть списком
в форме

@c The font must be an OpenType font that supports these OpenType
@c features, provided Emacs is compiled with a library, such as
@c @samp{libotf} on GNU/Linux, that supports complex text layout for
@c scripts which need that.  The value must be a list of the form

@smallexample
@code{(@var{script-tag} @var{langsys-tag} @var{gsub} @var{gpos})}
@end smallexample

где @var{script-tag} символ тега скрипта OpenType; @var{langsys-tag}
символ тега языка OpenType, или @code{nil} если нужно использовать
язык по умолчанию; @code{gsub} список символов тегов функций GSUB OpenType
или @code{nil} если они не требуются, и @code{gpos} список тегов символов
функций GPOS OpenType или @code{nil}, если они не требуются. Если @code{gsub}
или @code{gpos} списки, @code{nil} элемент в этих списках означает, что
шрифт не должен соответствовать ни какому из оставшихся символов тегов.
Элемент @code{gpos} можно пропустить.

@c where @var{script-tag} is the OpenType script tag symbol;
@c @var{langsys-tag} is the OpenType language system tag symbol, or
@c @code{nil} to use the default language system; @code{gsub} is a list
@c of OpenType GSUB feature tag symbols, or @code{nil} if none is
@c required; and @code{gpos} is a list of OpenType GPOS feature tag
@c symbols, or @code{nil} if none is required.  If @code{gsub} or
@c @code{gpos} is a list, a @code{nil} element in that list means that
@c the font must not match any of the remaining tag symbols.  The
@c @code{gpos} element may be omitted.
@end table
@end defun

@defun font-put font-spec property value
Функция устанавливает значение @var{value} для свойства шрифта @var{property}
в спецификации @var{font-spec}.
@c Set the font property @var{property} in the font-spec @var{font-spec}
@c to @var{value}.
@end defun

@cindex font entity
  Сущность шрифта (font entity) является ссылкой на шрифт, который
не нужно открывать. Сущность шрифта по свойства нечто среднее между объектом
шрифта и спецификацией шрифта: как объект шрифта, но не как спецификация
сущность ссылается на один шрифт. В отличие от объекта шрифта, создание сущности
не загружает содержимое шрифта в память компьютера. Emacs может
открыть множество объектов шрифтов разного размера из одной сущности
шрифта ссылающейся на масштабируемый шрифт.

@c   A font entity is a reference to a font that need not be open.  Its
@c properties are intermediate between a font object and a font spec:
@c like a font object, and unlike a font spec, it refers to a single,
@c specific font.  Unlike a font object, creating a font entity does not
@c load the contents of that font into computer memory.  Emacs may open
@c multiple font objects of different sizes from a single font entity
@c referring to a scalable font.

@defun find-font font-spec &optional frame
Функция возвращает сущность шрифта которая лучше всего подходит
для спецификации @var{font-spec} для фрейма @var{frame}. Если @var{frame}
@code{nil}, используется текущий фрейм.

@c This function returns a font entity that best matches the font spec
@c @var{font-spec} on frame @var{frame}.  If @var{frame} is @code{nil},
@c it defaults to the selected frame.
@end defun

@defun list-fonts font-spec &optional frame num prefer
Функция возвращает список всех сущностей которые соответствуют
спецификации @var{font-spec}.

@c This function returns a list of all font entities that match the font
@c spec @var{font-spec}.

Не обязательный аргумент @var{frame}, если не-@code{nil}, определяет
фрейм для отображения шрифтов. Не обязательный аргумент @var{num}, если
не-@code{nil}, должен быть целым, которое определяет
максимальную длину возвращаемого списка. Не обязательный аргумент
@var{prefer}, если не-@code{nil}, должен быть другой спецификацией шрифта,
используемой для упорядочивания элементов в возвращаемом списке; элементы
будут упорядочены в порядке уменьшения близости с этой спецификацией.

@c The optional argument @var{frame}, if non-@code{nil}, specifies the
@c frame on which the fonts are to be displayed.  The optional argument
@c @var{num}, if non-@code{nil}, should be an integer that specifies the
@c maximum length of the returned list.  The optional argument
@c @var{prefer}, if non-@code{nil}, should be another font spec, which is
@c used to control the order of the returned list; the returned font
@c entities are sorted in order of decreasing closeness to that font
@c spec.
@end defun

  Если вызвать @var{set-face-attribute} и передать спецификацию шрифта,
сущность шрифта или имя шрифта в качестве значение @code{:font},
Emacs откроет наиболее подходящий шрифт доступный для отображения.
Соответствующий объект шрифта сохраняется в качестве значения
атрибута @code{:font} стиля для которого вызывается функция.

@c   If you call @code{set-face-attribute} and pass a font spec, font
@c entity, or font name string as the value of the @code{:font}
@c attribute, Emacs opens the best matching font that is available
@c for display.  It then stores the corresponding font object as the
@c actual value of the @code{:font} attribute for that face.

  Следующие функции используются для получения информации о шрифте.
Для этих функций, аргумент @var{font} может быть объектом шрифта, сущностью
шрифта, или спецификацией шрифта.

@c   The following functions can be used to obtain information about a
@c font.  For these functions, the @var{font} argument can be a font
@c object, a font entity, or a font spec.

@defun font-get font property
Функция возвращает значение свойства @var{property} для шрифта @var{font}.

@c This function returns the value of the font property @var{property}
@c for @var{font}.

Если @var{font}, спецификация шрифта и спецификация не задает @var{property},
возвращается @code{nil}. Если @var{font} объект шрифта или сущность шрифта,
значение свойства @var{:script} может быть списком скриптов поддерживаемых шрифтом.

@c If @var{font} is a font spec and the font spec does not specify
@c @var{property}, the return value is @code{nil}.  If @var{font} is a
@c font object or font entity, the value for the @var{:script} property
@c may be a list of scripts supported by the font.
@end defun

@defun font-face-attributes font &optional frame
Функция возвращает список атрибутов стиля соответствующих
@var{font}. Не обязательный аргумент @var{frame} задает
фрейм на котором будет отображаться шрифт. Если значение @code{nil},
используется текущий фрейм. Возвращаемое значение имеет форму

@c This function returns a list of face attributes corresponding to
@c @var{font}.  The optional argument @var{frame} specifies the frame on
@c which the font is to be displayed.  If it is @code{nil}, the selected
@c frame is used.  The return value has the form

@smallexample
(:family @var{family} :height @var{height} :weight @var{weight}
   :slant @var{slant} :width @var{width})
@end smallexample

где значения @var{family}, @var{height}, @var{weight},
@var{slant} и @var{width} атрибуты стиля. Некоторые из этих
атрибутных пар могут быть пропущены, если они не заданы в шрифте @var{font}.

@c where the values of @var{family}, @var{height}, @var{weight},
@c @var{slant}, and @var{width} are face attribute values.  Some of these
@c key-attribute pairs may be omitted from the list if they are not
@c specified by @var{font}.
@end defun

@defun font-xlfd-name font &optional fold-wildcards
Функция возвращается XLFD (X Logical Font Descriptor), строку, соответствующую
@var{font}. XLFDs описано в @ref{Fonts,,, emacs, The GNU Emacs Manual}.
Если имя слишком большое для XLFD (которое может содержать только 255 символов),
функция возвращает @code{nil}.

@c This function returns the XLFD (X Logical Font Descriptor), a string,
@c matching @var{font}.  @xref{Fonts,,, emacs, The GNU Emacs Manual}, for
@c information about XLFDs.  If the name is too long for an XLFD (which
@c can contain at most 255 characters), the function returns @code{nil}.

Если не обязательный аргумент @var{folt-wildcards} не-@code{nil},
последовательные знаки подстановки объединяются.

@c If the optional argument @var{fold-wildcards} is non-@code{nil},
@c consecutive wildcards in the XLFD are folded into one.
@end defun

Следующие две функции возвращают важную информацию о шрифте.
@c The following two functions return important information about a font.

@defun font-info name &optional frame
Функция возвращает информацию о шрифте с заданным именем строковым @var{name},
используемым во фрейме @var{frame}. Если @var{frame} не задано или
@code{nil}, по умолчанию берется выбранный фрейм.

@c This function returns information about a font specified by its
@c @var{name}, a string, as it is used on @var{frame}.  If @var{frame} is
@c omitted or @code{nil}, it defaults to the selected frame.

Функция возвращает вектор в форме
@code{[@var{opened-name} @var{full-name} @var{size} @var{height}
@var{baseline-offset} @var{relative-compose} @var{default-ascent}
@var{max-width} @var{ascent} @var{descent} @var{space-width}
@var{average-width} @var{filename} @var{capability}]}.
Ниже приводится описания каждого из компонентов вектора:

@c The value returned by the function is a vector of the form
@c @code{[@var{opened-name} @var{full-name} @var{size} @var{height}
@c @var{baseline-offset} @var{relative-compose} @var{default-ascent}
@c @var{max-width} @var{ascent} @var{descent} @var{space-width}
@c @var{average-width} @var{filename} @var{capability}]}.  Here's the
@c description of each components of this vector:

@table @var
@item opened-name
Имя используемой для открытия шрифта, строка.
@c The name used to open the font, a string.

@item full-name
Полное имя шрифта, строка.
@c The full name of the font, a string.

@item size
Размер шрифта в пикселях.
@c The pixel size of the font.

@item height
Высота шрифта в пикселях.
@c The height of the font in pixels.

@item baseline-offset
Смещение в пикселях от @acronym{ASCII} базовой линии, положительное
смещение вверх.
@c The offset in pixels from the @acronym{ASCII} baseline, positive
@c upward.

@item relative-compose
@itemx default-ascent
Число управляющее компоновкой символов.
@c Numbers controlling how to compose characters.

@item ascent
@itemx descent
Ascent/descent высота над/под базовой линией. Сумма данных двух значений,
должна равняться @var{height}, описанной выше.

@c The ascent and descent of this font.  The sum of these two numbers
@c should be equal to the value of @var{height} above.

@item space-width
Ширина в пикселях, пробельного символа.
@c The width, in pixels, of the font's space character.

@item average-width
Средняя ширина символов шрифта. Если значение ноль, Emacs использует
значение @var{space-width}, при вычислении раскладки текста на дисплее.

@c The average width of the font characters.  If this is zero, Emacs uses
@c the value of @var{space-width} instead, when it calculates text layout
@c on display.

@item filename
Имя файла шрифта, строка. Значение может быть @code{nil}, если
back-end(серверная часть ?) шрифтов не предоставляет способа найти имя
файла шрифта.

@c The file name of the font as a string.  This can be @code{nil} if the
@c font back-end does not provide a way to find out the font's file name.

@item capability
Список, первый элемент которого, символ представляющий тип шрифта, один
из @code{х}, @code{opentype}, @code{truetype}, @code{type1},
@code{pcf}, или @code{bdf}. Для OpenType шрифтов, список включает 2
дополнительных элемента описывающих @sc{gsub}, и @sc{gpos} функции
поддерживаемые шрифтом. Каждый их элементов является списком в форме
@code{((@var{script} (@var{langsys} @var{feature} @dots{}) @dots{}) @dots{})},
где @var{script} символ представляющий скрипт тег (script tag) OpenType,
@var{langsys} символ представляющий lagsys тег (или @code{nil}, что соответствует
langsys по умолчанию) OpenType, и каждая @var{feature}, символ представляющий
feature (тег функции) тег OpenType.

@c A list whose first element is a symbol representing the font type, one
@c of @code{x}, @code{opentype}, @code{truetype}, @code{type1},
@c @code{pcf}, or @code{bdf}.  For OpenType fonts, the list includes 2
@c additional elements describing the @sc{gsub} and @sc{gpos} features
@c supported by the font.  Each of these elements is a list of the form
@c @code{((@var{script} (@var{langsys} @var{feature} @dots{}) @dots{})
@c @dots{})}, where @var{script} is a symbol representing an OpenType
@c script tag, @var{langsys} is a symbol representing an OpenType langsys
@c tag (or @code{nil}, which stands for the default langsys), and each
@c @var{feature} is a symbol representing an OpenType feature tag.
@end table
@end defun

@defun query-font font-object
Функция возвращает информацию о @var{font-object}. (Сравните с функцией
@code{font-info}, которая получает имя шрифта, как строку, в качестве аргумента).

@c This function returns information about a @var{font-object}.  (This is
@c in contrast to @code{font-info}, which takes the font name, a string,
@c as its argument.)

Функция возвращает вектор в форме @code{[@var{name} @var{filename} @var{pixel-size} @var{max-width}
@var{ascent} @var{descent} @var{space-width} @var{average-width}
@var{capability}]}. Ниже описание компонентов вектора:

@c The value returned by the function is a vector of the form
@c @code{[@var{name} @var{filename} @var{pixel-size} @var{max-width}
@c @var{ascent} @var{descent} @var{space-width} @var{average-width}
@c @var{capability}]}.  Here's the description of each components of this
@c vector:

@table @var
@item name
Имя шрифта, строка.
@c The font name, a string.

@item filename
Имя файла шрифта, как строка. Значение может быть @code{nil}, если
back-end шрифтов не предоставляет способа, найти имя файла.
@c The file name of the font as a string.  This can be @code{nil} if the
@c font back-end does not provide a way to find out the font's file name.

@item pixel-size
Пиксельный размер шрифта.
@c The pixel size of the font used to open the font.

@item max-width
Максимальный сдвиг шрифта (advance width).
@c The maximum advance width of the font.

@item ascent
@itemx descent
Ascent/descent (подъем/спуск максимальная высота шрифта над/под базовой линией).
Сумма данных значений дает высоту шрифта.
@c The ascent and descent of this font.  The sum of these two numbers
@c gives the font height.

@item space-width
Ширина в пикселях, пробельного символа.
@c The width, in pixels, of the font's space character.

@item average-width
Средняя ширина символов шрифта. Если значение ноль, Emacs использует
значение @var{space-width}, при вычислении раскладки текста на дисплее.

@c The average width of the font characters.  If this is zero, Emacs uses
@c the value of @var{space-width} instead, when it calculates text layout
@c on display.

@item capability
Список, первый элемент которого, символ представляющий тип шрифта, один
из @code{х}, @code{opentype}, @code{truetype}, @code{type1},
@code{pcf}, или @code{bdf}. Для OpenType шрифтов, список включает 2
дополнительных элемента описывающих @sc{gsub}, и @sc{gpos} функции
поддерживаемые шрифтом. Каждый их элементов является списком в форме
@code{((@var{script} (@var{langsys} @var{feature} @dots{}) @dots{}) @dots{})},
где @var{script} символ представляющий скрипт тег (script tag) OpenType,
@var{langsys} символ представляющий lagsys тег (или @code{nil}, что соответствует
langsys по умолчанию) OpenType, и каждая @var{feature}, символ представляющий
feature (тег функции) тег OpenType.

@c A list whose first element is a symbol representing the font type, one
@c of @code{x}, @code{opentype}, @code{truetype}, @code{type1},
@c @code{pcf}, or @code{bdf}.  For OpenType fonts, the list includes 2
@c additional elements describing the @sc{gsub} and @sc{gpos} features
@c supported by the font.  Each of these elements is a list of the form
@c @code{((@var{script} (@var{langsys} @var{feature} @dots{}) @dots{})
@c @dots{})}, where @var{script} is a symbol representing an OpenType
@c script tag, @var{langsys} is a symbol representing an OpenType langsys
@c tag (or @code{nil}, which stands for the default langsys), and each
@c @var{feature} is a symbol representing an OpenType feature tag.
@end table
@end defun

@cindex font information for layout
Следующие четыре функции возвращают информацию о размеры шрифтов используемых
разными стилями, позволяя рассматривать разный раскладки в Lisp программах.
Функции учитывают переопределение стилей, возвращая информацию с учетом переопределения
(remapping), если запрашиваются данные для переопределенного стиля. @xref{Face Remapping}.

@c The following four functions return size information about fonts used
@c by various faces, allowing various layout considerations in Lisp
@c programs.  These functions take face remapping into consideration,
@c returning information about the remapped face, if the face in question
@c was remapped.  @xref{Face Remapping}.

@defun default-font-width
Функция возвращает среднюю ширину в пикселях шрифта используемого
стилем по умолчанию в текущем буфере.

@c This function returns the average width in pixels of the font used by
@c the current buffer's default face.
@end defun

@defun default-font-height
Функция возвращает высоту в пикселях для шрифта по умолчанию
в текущем буфере.

@c This function returns the height in pixels of the font used by the
@c current buffer's default face.
@end defun

@defun window-font-width &optional window face
Функция возвращает среднюю ширину в пикселях для шрифта
используемого стилем @var{face} в окне @var{window}. @var{window} должно
быть существующим окном. Если значение @code{nil} или не задано, используется
выбранное окно, в качестве @var{face} по умолчанию используется стиль по умолчанию
из окна.

@c This function returns the average width in pixels for the font used by
@c @var{face} in @var{window}.  The specified @var{window} must be a live
@c window.  If @code{nil} or omitted, @var{window} defaults to the
@c selected window, and @var{face} defaults to the default face in
@c @var{window}.
@end defun

@defun window-font-height &optional window face
Функция возвращает среднюю высоту в пикселях для шрифта
используемого стилем @var{face} в окне @var{window}. @var{window} должно
быть существующим окном. Если значение @code{nil} или не задано, используется
выбранное окно, в качестве @var{face} по умолчанию используется стиль по умолчанию
из окна.

@c This function returns the height in pixels for the font used by
@c @var{face} in @var{window}.  The specified @var{window} must be a live
@c window.  If @code{nil} or omitted, @var{window} defaults to the
@c selected window, and @var{face} defaults to the default face in
@c @var{window}.
@end defun

@node Fringes
@c @section Fringes
@section 
@cindex fringes

  На графических дисплеях, Emacs рисует @dfn{fringes} (@dfn{краевые символы}) у каждого
окна: тонкие вертикальные полоски вниз, которые могут отображать изображения,
являющиеся индикаторами усечения, продолжения, горизонтальной прокрутки, и
так далее.

@c   On graphical displays, Emacs draws @dfn{fringes} next to each
@c window: thin vertical strips down the sides which can display bitmaps
@c indicating truncation, continuation, horizontal scrolling, and so on.

@menu
* Fringe Size/Pos::     Задание положения краевых символов в окне.
* Fringe Indicators::   Отображение иконок индикаторов в краевых символах.
* Fringe Cursors::      Отображение курсора у правого края.
* Fringe Bitmaps::      Задания изображений для краевых символов.
* Customizing Bitmaps:: Задание своих изображений для отображения в краевых символах.
* Overlay Arrow::       Отображение стрелочки для указания позиции.
@end menu

@c @menu
@c * Fringe Size/Pos::     Specifying where to put the window fringes.
@c * Fringe Indicators::   Displaying indicator icons in the window fringes.
@c * Fringe Cursors::      Displaying cursors in the right fringe.
@c * Fringe Bitmaps::      Specifying bitmaps for fringe indicators.
@c * Customizing Bitmaps:: Specifying your own bitmaps to use in the fringes.
@c * Overlay Arrow::       Display of an arrow to indicate position.
@c @end menu

@node Fringe Size/Pos
@c @subsection Fringe Size and Position
@subsection Размер и Положение Краевых Символов

  Следующие локальные для буфера переменные управляют позицией и
шириной краевых символов в окне, отображающем буфер.
@c   The following buffer-local variables control the position and width
@c of fringes in windows showing that buffer.

@defvar fringes-outside-margins
Как правило краевые символы отображаются между границей (margin) окна и текстом Если
значение переменной non-@code{nil}, то краевые символы отображаются вне границы (margin).
@xref{Display Margins}.

@c The fringes normally appear between the display margins and the window
@c text.  If the value is non-@code{nil}, they appear outside the display
@c margins.  @xref{Display Margins}.
@end defvar

@defvar left-fringe-width
Если значение переменной не-@code{nil}, то оно задает
ширину левого краевого символа в пикселях. Если значение @code{nil},
будет использоваться ширина взятая из фрейма окна.

@c This variable, if non-@code{nil}, specifies the width of the left
@c fringe in pixels.  A value of @code{nil} means to use the left fringe
@c width from the window's frame.
@end defvar

@defvar right-fringe-width
Если значение не-@code{nil}, задает ширину правого краевого символа
в пикселях. Если значение @code{nil}, будет использоваться
ширина из фрейма окна.

@c This variable, if non-@code{nil}, specifies the width of the right
@c fringe in pixels.  A value of @code{nil} means to use the right fringe
@c width from the window's frame.
@end defvar

  Любой буфер который не определяет значения этих переменных
использует значения заданные @code{left-fringe} и @code{right-fringe}
из фрейма ((@pxref{Layout Parameters})).

@c   Any buffer which does not specify values for these variables uses
@c the values specified by the @code{left-fringe} and @code{right-fringe}
@c frame parameters (@pxref{Layout Parameters}).

  Вышеописанные переменные, используются в функции
@code{set-window-buffer} (@pxref{Buffers and Windows}),
которая вызывает @code{set-window-fringes}. Если изменить
значение одной из этих переменных, краевые символы не
обновятся в существующих окнах отображающих буфер, до вызова
@code{set-window-buffer} для каждого такого окна. Для управления
краевыми символами отдельного окна можно использовать
@code{set-window-fringes}.

@c   The above variables actually take effect via the function
@c @code{set-window-buffer} (@pxref{Buffers and Windows}), which calls
@c @code{set-window-fringes} as a subroutine.  If you change one of these
@c variables, the fringe display is not updated in existing windows
@c showing the buffer, unless you call @code{set-window-buffer} again in
@c each affected window.  You can also use @code{set-window-fringes} to
@c control the fringe display in individual windows.

@defun set-window-fringes window left &optional right outside-margins
Функция устанавливает ширину границы (каймы) окна @var{window}.
Если @var{window} @code{nil}, используется выбранное окно.

@c This function sets the fringe widths of window @var{window}.
@c If @var{window} is @code{nil}, the selected window is used.

Аргумент @var{left} задает ширину в пикселях левой границы,
@var{right} правой. Значение @code{nil} указывает использовать
значение ширины по умолчанию (default width). Если @var{outside-margins}
не-@code{nil}, то значение указывает, что граница должна отображаться
за полями.

@c The argument @var{left} specifies the width in pixels of the left
@c fringe, and likewise @var{right} for the right fringe.  A value of
@c @code{nil} for either one stands for the default width.  If
@c @var{outside-margins} is non-@code{nil}, that specifies that fringes
@c should appear outside of the display margins.
@end defun

@defun window-fringes &optional window
Функция возвращает информацию о границах окна @var{window}.
Если @var{widnow} не задано или @code{nil}, используется
выбранное окно. Значение имеет форму @code{(@var{left-width}
@var{right-width} @var{outside-margins})}.

This function returns information about the fringes of a window
@c @var{window}.  If @var{window} is omitted or @code{nil}, the selected
@c window is used.  The value has the form @code{(@var{left-width}
@c @var{right-width} @var{outside-margins})}.
@end defun


@node Fringe Indicators
@c @subsection Fringe Indicators
@subsection Граничные Индикаторы
@cindex fringe indicators
@cindex indicators, fringe

  @dfn{Граничные индикаторы} (@dfn{Fringe indicators}) это
маленькие иконки отображаемые в области границы окна, и обозначающие
перенос продолжения строки, границ буфера, и т.д.

@c   @dfn{Fringe indicators} are tiny icons displayed in the window
@c fringe to indicate truncated or continued lines, buffer boundaries,
@c etc.

@defopt indicate-empty-lines
@cindex fringes, and empty line indication
@cindex empty lines, indicating
Ели опция не-@code{nil}, Emacs отображает специальный символ
на границе каждой пустой строки в конце буфера. @xref{Fringes}.
Переменная является локальной для каждого буфера.

@c When this is non-@code{nil}, Emacs displays a special glyph in the
@c fringe of each empty line at the end of the buffer, on graphical
@c displays.  @xref{Fringes}.  This variable is automatically
@c buffer-local in every buffer.
@end defopt

@defopt indicate-buffer-boundaries
@cindex buffer boundaries, indicating
Локальная для буфера переменная, управляет индикаторами границ
и прокрутки окна на границе.

@c This buffer-local variable controls how the buffer boundaries and
@c window scrolling are indicated in the window fringes.

Emacs может показывать границы буфера---которые представляют, первую и
последнюю строки буфера--- иконкой угла, когда они появляются на экране.
Кроме того, Emacs может отображать стрелки вверх и вниз на границах, для
отображения того, что есть текст сверху стрелки вверх, и снизу стрелки вниз.

@c Emacs can indicate the buffer boundaries---that is, the first and last
@c line in the buffer---with angle icons when they appear on the screen.
@c In addition, Emacs can display an up-arrow in the fringe to show
@c that there is text above the screen, and a down-arrow to show
@c there is text below the screen.

Есть три базовых значения:
@c There are three kinds of basic values:

@table @asis
@item @code{nil}
Не отображать ни одну из граничных иконок.
@item @code{left}
Отображать иконки угла и стрелки на левой границе.
@item @code{right}
Отображать иконки угла и стрелки на правой границе.
@item any non-alist
Отображать иконки угла на левой границе, но не отображать
стрелки.
@end table

@c @table @asis
@c @item @code{nil}
@c Don't display any of these fringe icons.
@c @item @code{left}
@c Display the angle icons and arrows in the left fringe.
@c @item @code{right}
@c Display the angle icons and arrows in the right fringe.
@c @item any non-alist
@c Display the angle icons in the left fringe
@c and don't display the arrows.
@c @end table

Или же значение должно быть ассоциативным списком (alist), который
будет задавать какой индикатор где должен отображаться. Каждый
элемент списка должен иметь форму @code{(@var{indicator} . @var{position})}.
Где @var{indicator} имеет одно из значений: @code{top}, @code{bottom}, @code{up},
@code{down}, и @code{t} (соответствует всем иконкам, которые еще не были заданы),
а @var{position} одним из значений  @code{left}, @code{right}
и @code{nil}.

@c Otherwise the value should be an alist that specifies which fringe
@c indicators to display and where.  Each element of the alist should
@c have the form @code{(@var{indicator} . @var{position})}.  Here,
@c @var{indicator} is one of @code{top}, @code{bottom}, @code{up},
@c @code{down}, and @code{t} (which covers all the icons not yet
@c specified), while @var{position} is one of @code{left}, @code{right}
@c and @code{nil}.

For example, @code{((top . left) (t . right))} places the top angle
bitmap in left fringe, and the bottom angle bitmap as well as both
arrow bitmaps in right fringe.  To show the angle bitmaps in the left
fringe, and no arrow bitmaps, use @code{((top .  left) (bottom . left))}.
@end defopt

@defvar fringe-indicator-alist
This buffer-local variable specifies the mapping from logical fringe
indicators to the actual bitmaps displayed in the window fringes.  The
value is an alist of elements @code{(@var{indicator}
. @var{bitmaps})}, where @var{indicator} specifies a logical indicator
type and @var{bitmaps} specifies the fringe bitmaps to use for that
indicator.

  Each @var{indicator} should be one of the following symbols:

@table @asis
@item @code{truncation}, @code{continuation}.
Used for truncation and continuation lines.

@item @code{up}, @code{down}, @code{top}, @code{bottom}, @code{top-bottom}
Used when @code{indicate-buffer-boundaries} is non-@code{nil}:
@code{up} and @code{down} indicate a buffer boundary lying above or
below the window edge; @code{top} and @code{bottom} indicate the
topmost and bottommost buffer text line; and @code{top-bottom}
indicates where there is just one line of text in the buffer.

@item @code{empty-line}
Used to indicate empty lines when @code{indicate-empty-lines} is
non-@code{nil}.

@item @code{overlay-arrow}
Used for overlay arrows (@pxref{Overlay Arrow}).
@c Is this used anywhere?
@c @item Unknown bitmap indicator:
@c @code{unknown}.
@end table

  Each @var{bitmaps} value may be a list of symbols @code{(@var{left}
@var{right} [@var{left1} @var{right1}])}.  The @var{left} and
@var{right} symbols specify the bitmaps shown in the left and/or right
fringe, for the specific indicator.  @var{left1} and @var{right1} are
specific to the @code{bottom} and @code{top-bottom} indicators, and
are used to indicate that the last text line has no final newline.
Alternatively, @var{bitmaps} may be a single symbol which is used in
both left and right fringes.

  @xref{Fringe Bitmaps}, for a list of standard bitmap symbols and how
to define your own.  In addition, @code{nil} represents the empty
bitmap (i.e., an indicator that is not shown).

  When @code{fringe-indicator-alist} has a buffer-local value, and
there is no bitmap defined for a logical indicator, or the bitmap is
@code{t}, the corresponding value from the default value of
@code{fringe-indicator-alist} is used.
@end defvar

@node Fringe Cursors
@subsection Fringe Cursors
@cindex fringe cursors
@cindex cursor, fringe

  When a line is exactly as wide as the window, Emacs displays the
cursor in the right fringe instead of using two lines.  Different
bitmaps are used to represent the cursor in the fringe depending on
the current buffer's cursor type.

@defopt overflow-newline-into-fringe
If this is non-@code{nil}, lines exactly as wide as the window (not
counting the final newline character) are not continued.  Instead,
when point is at the end of the line, the cursor appears in the right
fringe.
@end defopt

@defvar fringe-cursor-alist
This variable specifies the mapping from logical cursor type to the
actual fringe bitmaps displayed in the right fringe.  The value is an
alist where each element has the form @code{(@var{cursor-type}
. @var{bitmap})}, which means to use the fringe bitmap @var{bitmap} to
display cursors of type @var{cursor-type}.

Each @var{cursor-type} should be one of @code{box}, @code{hollow},
@code{bar}, @code{hbar}, or @code{hollow-small}.  The first four have
the same meanings as in the @code{cursor-type} frame parameter
(@pxref{Cursor Parameters}).  The @code{hollow-small} type is used
instead of @code{hollow} when the normal @code{hollow-rectangle}
bitmap is too tall to fit on a specific display line.

Each @var{bitmap} should be a symbol specifying the fringe bitmap to
be displayed for that logical cursor type.
@iftex
See the next subsection for details.
@end iftex
@ifnottex
@xref{Fringe Bitmaps}.
@end ifnottex

@c FIXME: I can't find the fringes-indicator-alist variable.  Maybe
@c it should be fringe-indicator-alist or fringe-cursor-alist?  --xfq
When @code{fringe-cursor-alist} has a buffer-local value, and there is
no bitmap defined for a cursor type, the corresponding value from the
default value of @code{fringes-indicator-alist} is used.
@end defvar

@node Fringe Bitmaps
@subsection Fringe Bitmaps
@cindex fringe bitmaps
@cindex bitmaps, fringe

  The @dfn{fringe bitmaps} are the actual bitmaps which represent the
logical fringe indicators for truncated or continued lines, buffer
boundaries, overlay arrows, etc.  Each bitmap is represented by a
symbol.
@iftex
These symbols are referred to by the variables
@code{fringe-indicator-alist} and @code{fringe-cursor-alist},
described in the previous subsections.
@end iftex
@ifnottex
These symbols are referred to by the variable
@code{fringe-indicator-alist}, which maps fringe indicators to bitmaps
(@pxref{Fringe Indicators}), and the variable
@code{fringe-cursor-alist}, which maps fringe cursors to bitmaps
(@pxref{Fringe Cursors}).
@end ifnottex

  Lisp programs can also directly display a bitmap in the left or
right fringe, by using a @code{display} property for one of the
characters appearing in the line (@pxref{Other Display Specs}).  Such
a display specification has the form

@example
(@var{fringe} @var{bitmap} [@var{face}])
@end example

@noindent
@var{fringe} is either the symbol @code{left-fringe} or
@code{right-fringe}.  @var{bitmap} is a symbol identifying the bitmap
to display.  The optional @var{face} names a face whose foreground
color is used to display the bitmap; this face is automatically merged
with the @code{fringe} face.

  Here is a list of the standard fringe bitmaps defined in Emacs, and
how they are currently used in Emacs (via
@code{fringe-indicator-alist} and @code{fringe-cursor-alist}):

@table @asis
@item @code{left-arrow}, @code{right-arrow}
Used to indicate truncated lines.

@item @code{left-curly-arrow}, @code{right-curly-arrow}
Used to indicate continued lines.

@item @code{right-triangle}, @code{left-triangle}
The former is used by overlay arrows.  The latter is unused.

@item @code{up-arrow}, @code{down-arrow}, @code{top-left-angle} @code{top-right-angle}
@itemx @code{bottom-left-angle}, @code{bottom-right-angle}
@itemx @code{top-right-angle}, @code{top-left-angle}
@itemx @code{left-bracket}, @code{right-bracket}, @code{top-right-angle}, @code{top-left-angle}
Used to indicate buffer boundaries.

@item @code{filled-rectangle}, @code{hollow-rectangle}
@itemx @code{filled-square}, @code{hollow-square}
@itemx @code{vertical-bar}, @code{horizontal-bar}
Used for different types of fringe cursors.

@item @code{empty-line}, @code{exclamation-mark}, @code{question-mark}, @code{exclamation-mark}
Not used by core Emacs features.
@end table

@noindent
The next subsection describes how to define your own fringe bitmaps.

@defun fringe-bitmaps-at-pos &optional pos window
This function returns the fringe bitmaps of the display line
containing position @var{pos} in window @var{window}.  The return
value has the form @code{(@var{left} @var{right} @var{ov})}, where @var{left}
is the symbol for the fringe bitmap in the left fringe (or @code{nil}
if no bitmap), @var{right} is similar for the right fringe, and @var{ov}
is non-@code{nil} if there is an overlay arrow in the left fringe.

The value is @code{nil} if @var{pos} is not visible in @var{window}.
If @var{window} is @code{nil}, that stands for the selected window.
If @var{pos} is @code{nil}, that stands for the value of point in
@var{window}.
@end defun

@node Customizing Bitmaps
@subsection Customizing Fringe Bitmaps
@cindex fringe bitmaps, customizing

@defun define-fringe-bitmap bitmap bits &optional height width align
This function defines the symbol @var{bitmap} as a new fringe bitmap,
or replaces an existing bitmap with that name.

The argument @var{bits} specifies the image to use.  It should be
either a string or a vector of integers, where each element (an
integer) corresponds to one row of the bitmap.  Each bit of an integer
corresponds to one pixel of the bitmap, where the low bit corresponds
to the rightmost pixel of the bitmap.

The height is normally the length of @var{bits}.  However, you
can specify a different height with non-@code{nil} @var{height}.  The width
is normally 8, but you can specify a different width with non-@code{nil}
@var{width}.  The width must be an integer between 1 and 16.

The argument @var{align} specifies the positioning of the bitmap
relative to the range of rows where it is used; the default is to
center the bitmap.  The allowed values are @code{top}, @code{center},
or @code{bottom}.

The @var{align} argument may also be a list @code{(@var{align}
@var{periodic})} where @var{align} is interpreted as described above.
If @var{periodic} is non-@code{nil}, it specifies that the rows in
@code{bits} should be repeated enough times to reach the specified
height.
@end defun

@defun destroy-fringe-bitmap bitmap
This function destroy the fringe bitmap identified by @var{bitmap}.
If @var{bitmap} identifies a standard fringe bitmap, it actually
restores the standard definition of that bitmap, instead of
eliminating it entirely.
@end defun

@defun set-fringe-bitmap-face bitmap &optional face
This sets the face for the fringe bitmap @var{bitmap} to @var{face}.
If @var{face} is @code{nil}, it selects the @code{fringe} face.  The
bitmap's face controls the color to draw it in.

@var{face} is merged with the @code{fringe} face, so normally
@var{face} should specify only the foreground color.
@end defun

@node Overlay Arrow
@subsection The Overlay Arrow
@c @cindex overlay arrow  Duplicates variable names

  The @dfn{overlay arrow} is useful for directing the user's attention
to a particular line in a buffer.  For example, in the modes used for
interface to debuggers, the overlay arrow indicates the line of code
about to be executed.  This feature has nothing to do with
@dfn{overlays} (@pxref{Overlays}).

@defvar overlay-arrow-string
This variable holds the string to display to call attention to a
particular line, or @code{nil} if the arrow feature is not in use.
On a graphical display the contents of the string are ignored; instead a
glyph is displayed in the fringe area to the left of the display area.
@end defvar

@defvar overlay-arrow-position
This variable holds a marker that indicates where to display the overlay
arrow.  It should point at the beginning of a line.  On a non-graphical
display the arrow text
appears at the beginning of that line, overlaying any text that would
otherwise appear.  Since the arrow is usually short, and the line
usually begins with indentation, normally nothing significant is
overwritten.

The overlay-arrow string is displayed in any given buffer if the value
of @code{overlay-arrow-position} in that buffer points into that
buffer.  Thus, it is possible to display multiple overlay arrow strings
by creating buffer-local bindings of @code{overlay-arrow-position}.
However, it is usually cleaner to use
@code{overlay-arrow-variable-list} to achieve this result.
@c !!! overlay-arrow-position: but the overlay string may remain in the display
@c of some other buffer until an update is required.  This should be fixed
@c now.  Is it?
@end defvar

  You can do a similar job by creating an overlay with a
@code{before-string} property.  @xref{Overlay Properties}.

  You can define multiple overlay arrows via the variable
@code{overlay-arrow-variable-list}.

@defvar overlay-arrow-variable-list
This variable's value is a list of variables, each of which specifies
the position of an overlay arrow.  The variable
@code{overlay-arrow-position} has its normal meaning because it is on
this list.
@end defvar

Each variable on this list can have properties
@code{overlay-arrow-string} and @code{overlay-arrow-bitmap} that
specify an overlay arrow string (for text terminals) or fringe bitmap
(for graphical terminals) to display at the corresponding overlay
arrow position.  If either property is not set, the default
@code{overlay-arrow-string} or @code{overlay-arrow} fringe indicator
is used.


@node Scroll Bars
@section Scroll Bars
@cindex scroll bars

Normally the frame parameter @code{vertical-scroll-bars} controls
whether the windows in the frame have vertical scroll bars, and whether
they are on the left or right.  The frame parameter
@code{scroll-bar-width} specifies how wide they are (@code{nil} meaning
the default).

   The frame parameter @code{horizontal-scroll-bars} controls whether
the windows in the frame have horizontal scroll bars.  The frame
parameter @code{scroll-bar-height} specifies how high they are
(@code{nil} meaning the default).  @xref{Layout Parameters}.

@vindex horizontal-scroll-bars-available-p
   Horizontal scroll bars are not available on all platforms.  The
function @code{horizontal-scroll-bars-available-p} which takes no
argument returns non-@code{nil} if they are available on your system.

   The following three functions take as argument a live frame which
defaults to the selected one.

@defun frame-current-scroll-bars &optional frame
This function reports the scroll bar types for frame @var{frame}.  The
value is a cons cell @code{(@var{vertical-type} .@:
@var{horizontal-type})}, where @var{vertical-type} is either
@code{left}, @code{right}, or @code{nil} (which means no vertical scroll
bar.)  @var{horizontal-type} is either @code{bottom} or @code{nil}
(which means no horizontal scroll bar).
@end defun

@defun frame-scroll-bar-width &optional frame
This function returns the width of vertical scroll bars of @var{frame}
in pixels.
@end defun

@defun frame-scroll-bar-height &optional frame
This function returns the height of horizontal scroll bars of
@var{frame} in pixels.
@end defun

You can override the frame specific settings for individual windows by
using the following function:

@defun set-window-scroll-bars window &optional width vertical-type height horizontal-type
This function sets the width and/or height and the types of scroll bars
for window @var{window}.

@var{width} specifies the width of the vertical scroll bar in pixels
(@code{nil} means use the width specified for the frame).
@var{vertical-type} specifies whether to have a vertical scroll bar and,
if so, where.  The possible values are @code{left}, @code{right},
@code{t}, which means to use the frame's default, and @code{nil} for no
vertical scroll bar.

@var{height} specifies the height of the horizontal scroll bar in pixels
(@code{nil} means use the height specified for the frame).
@var{horizontal-type} specifies whether to have a horizontal scroll bar.
The possible values are @code{bottom}, @code{t}, which means to use the
frame's default, and @code{nil} for no horizontal scroll bar.

If @var{window} is @code{nil}, the selected window is used.
@end defun

The following four functions take as argument a live window which
defaults to the selected one.

@defun window-scroll-bars &optional window
This function returns a list of the form @code{(@var{width}
@var{columns} @var{vertical-type} @var{height} @var{lines}
@var{horizontal-type})}.

The value @var{width} is the value that was specified for the width of
the vertical scroll bar (which may be @code{nil}); @var{columns} is the
(possibly rounded) number of columns that the vertical scroll bar
actually occupies.

The value @var{height} is the value that was specified for the height of
the horizontal scroll bar (which may be @code{nil}); @var{lines} is the
(possibly rounded) number of lines that the horizontally scroll bar
actually occupies.
@end defun

@defun window-current-scroll-bars &optional window
This function reports the scroll bar type for window @var{window}.  The
value is a cons cell @code{(@var{vertical-type} .@:
@var{horizontal-type})}.  Unlike @code{window-scroll-bars}, this reports
the scroll bar type actually used, once frame defaults and
@code{scroll-bar-mode} are taken into account.
@end defun

@defun window-scroll-bar-width &optional window
This function returns the width in pixels of @var{window}'s vertical
scrollbar.
@end defun

@defun window-scroll-bar-height &optional window
This function returns the height in pixels of @var{window}'s horizontal
scrollbar.
@end defun

If you don't specify these values for a window with
@code{set-window-scroll-bars}, the buffer-local variables
@code{vertical-scroll-bar}, @code{horizontal-scroll-bar},
@code{scroll-bar-width} and @code{scroll-bar-height} in the buffer being
displayed control the window's scroll bars.  The function
@code{set-window-buffer} examines these variables.  If you change them
in a buffer that is already visible in a window, you can make the window
take note of the new values by calling @code{set-window-buffer}
specifying the same buffer that is already displayed.

You can control the appearance of scroll bars for a particular buffer by
setting the following variables which automatically become buffer-local
when set.

@defvar vertical-scroll-bar
This variable specifies the location of the vertical scroll bar.  The
possible values are @code{left}, @code{right}, @code{t}, which means to
use the frame's default, and @code{nil} for no scroll bar.
@end defvar

@defvar horizontal-scroll-bar
This variable specifies the location of the horizontal scroll bar.  The
possible values are @code{bottom}, @code{t}, which means to use the
frame's default, and @code{nil} for no scroll bar.
@end defvar

@defvar scroll-bar-width
This variable specifies the width of the buffer's vertical scroll bars,
measured in pixels.  A value of @code{nil} means to use the value
specified by the frame.
@end defvar

@defvar scroll-bar-height
This variable specifies the height of the buffer's horizontal scroll
bar, measured in pixels.  A value of @code{nil} means to use the value
specified by the frame.
@end defvar

Finally you can toggle the display of scroll bars on all frames by
customizing the variables @code{scroll-bar-mode} and
@code{horizontal-scroll-bar-mode}.

@defopt scroll-bar-mode
This variable controls whether and where to put vertical scroll bars in
all frames.  The possible values are @code{nil} for no scroll bars,
@code{left} to put scroll bars on the left and @code{right} to put
scroll bars on the right.
@end defopt

@defopt horizontal-scroll-bar-mode
This variable controls whether to display horizontal scroll bars on all
frames.
@end defopt


@node Window Dividers
@section Window Dividers
@cindex window dividers
@cindex right dividers
@cindex bottom dividers

Window dividers are bars drawn between a frame's windows.  A right
divider is drawn between a window and any adjacent windows on the right.
Its width (thickness) is specified by the frame parameter
@code{right-divider-width}.  A bottom divider is drawn between a
window and adjacent windows on the bottom or the echo area.  Its width
is specified by the frame parameter @code{bottom-divider-width}.  In
either case, specifying a width of zero means to not draw such dividers.
@xref{Layout Parameters}.

   Technically, a right divider belongs to the window on its left,
which means that its width contributes to the total width of that
window.  A bottom divider belongs to the window above it, which
means that its width contributes to the total height of that window.
@xref{Window Sizes}.  When a window has both, a right and a bottom
divider, the bottom divider prevails.  This means that a bottom
divider is drawn over the full total width of its window while the right
divider ends above the bottom divider.

   Dividers can be dragged with the mouse and are therefore useful for
adjusting the sizes of adjacent windows with the mouse.  They also serve
to visually set apart adjacent windows when no scroll bars or mode lines
are present.  The following three faces allow the customization of the
appearance of dividers:

@table @code
@item window-divider
When a divider is less than three pixels wide, it is drawn solidly with
the foreground of this face.  For larger dividers this face is used for
the inner part only, excluding the first and last pixel.

@item window-divider-first-pixel
This is the face used for drawing the first pixel of a divider that is
at least three pixels wide.  To obtain a solid appearance, set this to
the same value used for the @code{window-divider} face.

@item window-divider-last-pixel
This is the face used for drawing the last pixel of a divider that is at
least three pixels wide.  To obtain a solid appearance, set this to the
same value used for the @code{window-divider} face.
@end table

You can get the sizes of the dividers of a specific window with the
following two functions.

@defun window-right-divider-width &optional window
Return the width (thickness) in pixels of @var{window}'s right divider.
@var{window} must be a live window and defaults to the selected one.
The return value is always zero for a rightmost window.
@end defun

@defun window-bottom-divider-width &optional window
Return the width (thickness) in pixels of @var{window}'s bottom divider.
@var{window} must be a live window and defaults to the selected one.
The return value is zero for the minibuffer window or a bottommost
window on a minibuffer-less frame.
@end defun


@node Display Property
@section The @code{display} Property
@cindex display specification
@kindex display @r{(text property)}

  The @code{display} text property (or overlay property) is used to
insert images into text, and to control other aspects of how text
displays.  The value of the @code{display} property should be a
display specification, or a list or vector containing several display
specifications.  Display specifications in the same @code{display}
property value generally apply in parallel to the text they cover.

  If several sources (overlays and/or a text property) specify values
for the @code{display} property, only one of the values takes effect,
following the rules of @code{get-char-property}.  @xref{Examining
Properties}.

  The rest of this section describes several kinds of
display specifications and what they mean.

@menu
* Replacing Specs::      Display specs that replace the text.
* Specified Space::      Displaying one space with a specified width.
* Pixel Specification::  Specifying space width or height in pixels.
* Other Display Specs::     Displaying an image; adjusting the height,
                              spacing, and other properties of text.
* Display Margins::     Displaying text or images to the side of the main text.
@end menu

@node Replacing Specs
@subsection Display Specs That Replace The Text
@cindex replacing display specs

  Some kinds of display specifications specify something to display
instead of the text that has the property.  These are called
@dfn{replacing} display specifications.  Emacs does not allow the user
to interactively move point into the middle of buffer text that is
replaced in this way.

  If a list of display specifications includes more than one replacing
display specification, the first overrides the rest.  Replacing
display specifications make most other display specifications
irrelevant, since those don't apply to the replacement.

  For replacing display specifications, @dfn{the text that has the
property} means all the consecutive characters that have the same
Lisp object as their @code{display} property; these characters are
replaced as a single unit.  If two characters have different Lisp
objects as their @code{display} properties (i.e., objects which are
not @code{eq}), they are handled separately.

  Here is an example which illustrates this point.  A string serves as
a replacing display specification, which replaces the text that has
the property with the specified string (@pxref{Other Display Specs}).
Consider the following function:

@smallexample
(defun foo ()
  (dotimes (i 5)
    (let ((string (concat "A"))
          (start (+ i i (point-min))))
      (put-text-property start (1+ start) 'display string)
      (put-text-property start (+ 2 start) 'display string))))
@end smallexample

@noindent
This function gives each of the first ten characters in the buffer a
@code{display} property which is a string @code{"A"}, but they don't
all get the same string object.  The first two characters get the same
string object, so they are replaced with one @samp{A}; the fact that
the display property was assigned in two separate calls to
@code{put-text-property} is irrelevant.  Similarly, the next two
characters get a second string (@code{concat} creates a new string
object), so they are replaced with one @samp{A}; and so on.  Thus, the
ten characters appear as five A's.

@node Specified Space
@subsection Specified Spaces
@cindex spaces, specified height or width
@cindex variable-width spaces

  To display a space of specified width and/or height, use a display
specification of the form @code{(space . @var{props})}, where
@var{props} is a property list (a list of alternating properties and
values).  You can put this property on one or more consecutive
characters; a space of the specified height and width is displayed in
place of @emph{all} of those characters.  These are the properties you
can use in @var{props} to specify the weight of the space:

@table @code
@item :width @var{width}
If @var{width} is a number, it specifies
that the space width should be @var{width} times the normal character
width.  @var{width} can also be a @dfn{pixel width} specification
(@pxref{Pixel Specification}).

@item :relative-width @var{factor}
Specifies that the width of the stretch should be computed from the
first character in the group of consecutive characters that have the
same @code{display} property.  The space width is the pixel width of
that character, multiplied by @var{factor}.  (On text-mode terminals,
the ``pixel width'' of a character is usually 1, but it could be more
for TABs and double-width CJK characters.)

@item :align-to @var{hpos}
Specifies that the space should be wide enough to reach @var{hpos}.
If @var{hpos} is a number, it is measured in units of the normal
character width.  @var{hpos} can also be a @dfn{pixel width}
specification (@pxref{Pixel Specification}).
@end table

  You should use one and only one of the above properties.  You can
also specify the height of the space, with these properties:

@table @code
@item :height @var{height}
Specifies the height of the space.
If @var{height} is a number, it specifies
that the space height should be @var{height} times the normal character
height.  The @var{height} may also be a @dfn{pixel height} specification
(@pxref{Pixel Specification}).

@item :relative-height @var{factor}
Specifies the height of the space, multiplying the ordinary height
of the text having this display specification by @var{factor}.

@item :ascent @var{ascent}
If the value of @var{ascent} is a non-negative number no greater than
100, it specifies that @var{ascent} percent of the height of the space
should be considered as the ascent of the space---that is, the part
above the baseline.  The ascent may also be specified in pixel units
with a @dfn{pixel ascent} specification (@pxref{Pixel Specification}).

@end table

  Don't use both @code{:height} and @code{:relative-height} together.

  The @code{:width} and @code{:align-to} properties are supported on
non-graphic terminals, but the other space properties in this section
are not.

  Note that space properties are treated as paragraph separators for
the purposes of reordering bidirectional text for display.
@xref{Bidirectional Display}, for the details.

@node Pixel Specification
@subsection Pixel Specification for Spaces
@cindex spaces, pixel specification

  The value of the @code{:width}, @code{:align-to}, @code{:height},
and @code{:ascent} properties can be a special kind of expression that
is evaluated during redisplay.  The result of the evaluation is used
as an absolute number of pixels.

  The following expressions are supported:

@smallexample
@group
  @var{expr} ::= @var{num} | (@var{num}) | @var{unit} | @var{elem} | @var{pos} | @var{image} | @var{form}
  @var{num}  ::= @var{integer} | @var{float} | @var{symbol}
  @var{unit} ::= in | mm | cm | width | height
@end group
@group
  @var{elem} ::= left-fringe | right-fringe | left-margin | right-margin
        |  scroll-bar | text
  @var{pos}  ::= left | center | right
  @var{form} ::= (@var{num} . @var{expr}) | (@var{op} @var{expr} ...)
  @var{op}   ::= + | -
@end group
@end smallexample

  The form @var{num} specifies a fraction of the default frame font
height or width.  The form @code{(@var{num})} specifies an absolute
number of pixels.  If @var{num} is a symbol, @var{symbol}, its
buffer-local variable binding is used.

  The @code{in}, @code{mm}, and @code{cm} units specify the number of
pixels per inch, millimeter, and centimeter, respectively.  The
@code{width} and @code{height} units correspond to the default width
and height of the current face.  An image specification @code{image}
corresponds to the width or height of the image.

  The elements @code{left-fringe}, @code{right-fringe},
@code{left-margin}, @code{right-margin}, @code{scroll-bar}, and
@code{text} specify to the width of the corresponding area of the
window.

  The @code{left}, @code{center}, and @code{right} positions can be
used with @code{:align-to} to specify a position relative to the left
edge, center, or right edge of the text area.

  Any of the above window elements (except @code{text}) can also be
used with @code{:align-to} to specify that the position is relative to
the left edge of the given area.  Once the base offset for a relative
position has been set (by the first occurrence of one of these
symbols), further occurrences of these symbols are interpreted as the
width of the specified area.  For example, to align to the center of
the left-margin, use

@example
:align-to (+ left-margin (0.5 . left-margin))
@end example

  If no specific base offset is set for alignment, it is always relative
to the left edge of the text area.  For example, @samp{:align-to 0} in a
header-line aligns with the first text column in the text area.

  A value of the form @code{(@var{num} . @var{expr})} stands for the
product of the values of @var{num} and @var{expr}.  For example,
@code{(2 . in)} specifies a width of 2 inches, while @code{(0.5 .
@var{image})} specifies half the width (or height) of the specified
image.

  The form @code{(+ @var{expr} ...)} adds up the value of the
expressions.  The form @code{(- @var{expr} ...)} negates or subtracts
the value of the expressions.

@node Other Display Specs
@subsection Other Display Specifications

  Here are the other sorts of display specifications that you can use
in the @code{display} text property.

@table @code
@item @var{string}
Display @var{string} instead of the text that has this property.

Recursive display specifications are not supported---@var{string}'s
@code{display} properties, if any, are not used.

@item (image . @var{image-props})
This kind of display specification is an image descriptor (@pxref{Images}).
When used as a display specification, it means to display the image
instead of the text that has the display specification.

@item (slice @var{x} @var{y} @var{width} @var{height})
This specification together with @code{image} specifies a @dfn{slice}
(a partial area) of the image to display.  The elements @var{y} and
@var{x} specify the top left corner of the slice, within the image;
@var{width} and @var{height} specify the width and height of the
slice.  Integers are numbers of pixels.  A floating-point number
in the range 0.0--1.0 stands for that fraction of the width or height
of the entire image.

@item ((margin nil) @var{string})
A display specification of this form means to display @var{string}
instead of the text that has the display specification, at the same
position as that text.  It is equivalent to using just @var{string},
but it is done as a special case of marginal display (@pxref{Display
Margins}).

@item (left-fringe @var{bitmap} @r{[}@var{face}@r{]})
@itemx (right-fringe @var{bitmap} @r{[}@var{face}@r{]})
This display specification on any character of a line of text causes
the specified @var{bitmap} be displayed in the left or right fringes
for that line, instead of the characters that have the display
specification.  The optional @var{face} specifies the colors to be
used for the bitmap.  @xref{Fringe Bitmaps}, for the details.

@item (space-width @var{factor})
This display specification affects all the space characters within the
text that has the specification.  It displays all of these spaces
@var{factor} times as wide as normal.  The element @var{factor} should
be an integer or float.  Characters other than spaces are not affected
at all; in particular, this has no effect on tab characters.

@item (height @var{height})
This display specification makes the text taller or shorter.
Here are the possibilities for @var{height}:

@table @asis
@item @code{(+ @var{n})}
@c FIXME: Add an index for "step"?  --xfq
This means to use a font that is @var{n} steps larger.  A @dfn{step} is
defined by the set of available fonts---specifically, those that match
what was otherwise specified for this text, in all attributes except
height.  Each size for which a suitable font is available counts as
another step.  @var{n} should be an integer.

@item @code{(- @var{n})}
This means to use a font that is @var{n} steps smaller.

@item a number, @var{factor}
A number, @var{factor}, means to use a font that is @var{factor} times
as tall as the default font.

@item a symbol, @var{function}
A symbol is a function to compute the height.  It is called with the
current height as argument, and should return the new height to use.

@item anything else, @var{form}
If the @var{height} value doesn't fit the previous possibilities, it is
a form.  Emacs evaluates it to get the new height, with the symbol
@code{height} bound to the current specified font height.
@end table

@item (raise @var{factor})
This kind of display specification raises or lowers the text
it applies to, relative to the baseline of the line.  It is mainly
meant to support display of subscripts and superscripts.

The @var{factor} must be a number, which is interpreted as a multiple
of the height of the affected text.  If it is positive, that means to
display the characters raised.  If it is negative, that means to
display them lower down.

Note that if the text also has a @code{height} display specification,
which was specified before (i.e.@: to the left of) @code{raise}, the
latter will affect the amount of raising or lowering in pixels,
because that is based on the height of the text being raised.
Therefore, if you want to display a sub- or superscript that is
smaller than the normal text height, consider specifying @code{raise}
before @code{height}.
@end table

@c We put all the '@code{(when ...)}' on one line to encourage
@c makeinfo's end-of-sentence heuristics to DTRT.  Previously, the dot
@c was at eol; the info file ended up w/ two spaces rendered after it.
  You can make any display specification conditional.  To do that,
package it in another list of the form
@code{(when @var{condition} . @var{spec})}.
Then the specification @var{spec} applies only when
@var{condition} evaluates to a non-@code{nil} value.  During the
evaluation, @code{object} is bound to the string or buffer having the
conditional @code{display} property.  @code{position} and
@code{buffer-position} are bound to the position within @code{object}
and the buffer position where the @code{display} property was found,
respectively.  Both positions can be different when @code{object} is a
string.

@node Display Margins
@subsection Displaying in the Margins
@cindex display margins
@cindex margins, display

  A buffer can have blank areas called @dfn{display margins} on the
left and on the right.  Ordinary text never appears in these areas,
but you can put things into the display margins using the
@code{display} property.  There is currently no way to make text or
images in the margin mouse-sensitive.

  The way to display something in the margins is to specify it in a
margin display specification in the @code{display} property of some
text.  This is a replacing display specification, meaning that the
text you put it on does not get displayed; the margin display appears,
but that text does not.

  A margin display specification looks like @code{((margin
right-margin) @var{spec})} or @code{((margin left-margin) @var{spec})}.
Here, @var{spec} is another display specification that says what to
display in the margin.  Typically it is a string of text to display,
or an image descriptor.

  To display something in the margin @emph{in association with}
certain buffer text, without altering or preventing the display of
that text, put a @code{before-string} property on the text and put the
margin display specification on the contents of the before-string.

  Before the display margins can display anything, you must give
them a nonzero width.  The usual way to do that is to set these
variables:

@defvar left-margin-width
This variable specifies the width of the left margin, in character
cell (a.k.a.@: ``column'') units.  It is buffer-local in all buffers.
A value of @code{nil} means no left marginal area.
@end defvar

@defvar right-margin-width
This variable specifies the width of the right margin, in character
cell units.  It is buffer-local in all buffers.  A value of @code{nil}
means no right marginal area.
@end defvar

  Setting these variables does not immediately affect the window.  These
variables are checked when a new buffer is displayed in the window.
Thus, you can make changes take effect by calling
@code{set-window-buffer}.

  You can also set the margin widths immediately.

@defun set-window-margins window left &optional right
This function specifies the margin widths for window @var{window}, in
character cell units.  The argument @var{left} controls the left
margin, and @var{right} controls the right margin (default @code{0}).
@end defun

@defun window-margins &optional window
This function returns the width of the left and right margins of
@var{window} as a cons cell of the form @w{@code{(@var{left}
. @var{right})}}.  If one of the two marginal areas does not exist,
its width is returned as @code{nil}; if neither of the two margins exist,
the function returns @code{(nil)}.  If @var{window} is @code{nil}, the
selected window is used.
@end defun

@node Images
@section Images
@cindex images in buffers

  To display an image in an Emacs buffer, you must first create an image
descriptor, then use it as a display specifier in the @code{display}
property of text that is displayed (@pxref{Display Property}).

  Emacs is usually able to display images when it is run on a
graphical terminal.  Images cannot be displayed in a text terminal, on
certain graphical terminals that lack the support for this, or if
Emacs is compiled without image support.  You can use the function
@code{display-images-p} to determine if images can in principle be
displayed (@pxref{Display Feature Testing}).

@menu
* Image Formats::       Supported image formats.
* Image Descriptors::   How to specify an image for use in @code{:display}.
* XBM Images::          Special features for XBM format.
* XPM Images::          Special features for XPM format.
* PostScript Images::   Special features for PostScript format.
* ImageMagick Images::  Special features available through ImageMagick.
* Other Image Types::   Various other formats are supported.
* Defining Images::     Convenient ways to define an image for later use.
* Showing Images::      Convenient ways to display an image once it is defined.
* Multi-Frame Images::  Some images contain more than one frame.
* Image Cache::         Internal mechanisms of image display.
@end menu

@node Image Formats
@subsection Image Formats
@cindex image formats
@cindex image types

  Emacs can display a number of different image formats.  Some of
these image formats are supported only if particular support libraries
are installed.  On some platforms, Emacs can load support libraries on
demand; if so, the variable @code{dynamic-library-alist} can be used
to modify the set of known names for these dynamic libraries.
@xref{Dynamic Libraries}.

  Supported image formats (and the required support libraries) include
PBM and XBM (which do not depend on support libraries and are always
available), XPM (@code{libXpm}), GIF (@code{libgif} or
@code{libungif}), PostScript (@code{gs}), JPEG (@code{libjpeg}), TIFF
(@code{libtiff}), PNG (@code{libpng}), and SVG (@code{librsvg}).

  Each of these image formats is associated with an @dfn{image type
symbol}.  The symbols for the above formats are, respectively,
@code{pbm}, @code{xbm}, @code{xpm}, @code{gif}, @code{postscript},
@code{jpeg}, @code{tiff}, @code{png}, and @code{svg}.

  Furthermore, if you build Emacs with ImageMagick
(@code{libMagickWand}) support, Emacs can display any image format
that ImageMagick can.  @xref{ImageMagick Images}.  All images
displayed via ImageMagick have type symbol @code{imagemagick}.

@defvar image-types
This variable contains a list of type symbols for image formats which
are potentially supported in the current configuration.

``Potentially'' means that Emacs knows about the image types, not
necessarily that they can be used (for example, they could depend on
unavailable dynamic libraries).  To know which image types are really
available, use @code{image-type-available-p}.
@end defvar

@defun image-type-available-p type
This function returns non-@code{nil} if images of type @var{type} can
be loaded and displayed.  @var{type} must be an image type symbol.

For image types whose support libraries are statically linked, this
function always returns @code{t}.  For image types whose support
libraries are dynamically loaded, it returns @code{t} if the library
could be loaded and @code{nil} otherwise.
@end defun

@node Image Descriptors
@subsection Image Descriptors
@cindex image descriptor

  An @dfn{image descriptor} is a list which specifies the underlying
data for an image, and how to display it.  It is typically used as the
value of a @code{display} overlay or text property (@pxref{Other
Display Specs}); but @xref{Showing Images}, for convenient helper
functions to insert images into buffers.

  Each image descriptor has the form @code{(image . @var{props})},
where @var{props} is a property list of alternating keyword symbols
and values, including at least the pair @code{:type @var{type}} that
specifies the image type.

  The following is a list of properties that are meaningful for all
image types (there are also properties which are meaningful only for
certain image types, as documented in the following subsections):

@table @code
@item :type @var{type}
The image type.
@ifnottex
@xref{Image Formats}.
@end ifnottex
Every image descriptor must include this property.

@item :file @var{file}
This says to load the image from file @var{file}.  If @var{file} is
not an absolute file name, it is expanded in @code{data-directory}.

@item :data @var{data}
This specifies the raw image data.  Each image descriptor must have
either @code{:data} or @code{:file}, but not both.

For most image types, the value of a @code{:data} property should be a
string containing the image data.  Some image types do not support
@code{:data}; for some others, @code{:data} alone is not enough, so
you need to use other image properties along with @code{:data}.  See
the following subsections for details.

@item :margin @var{margin}
This specifies how many pixels to add as an extra margin around the
image.  The value, @var{margin}, must be a non-negative number, or a
pair @code{(@var{x} . @var{y})} of such numbers.  If it is a pair,
@var{x} specifies how many pixels to add horizontally, and @var{y}
specifies how many pixels to add vertically.  If @code{:margin} is not
specified, the default is zero.

@item :ascent @var{ascent}
This specifies the amount of the image's height to use for its
ascent---that is, the part above the baseline.  The value,
@var{ascent}, must be a number in the range 0 to 100, or the symbol
@code{center}.

If @var{ascent} is a number, that percentage of the image's height is
used for its ascent.

If @var{ascent} is @code{center}, the image is vertically centered
around a centerline which would be the vertical centerline of text drawn
at the position of the image, in the manner specified by the text
properties and overlays that apply to the image.

If this property is omitted, it defaults to 50.

@item :relief @var{relief}
This adds a shadow rectangle around the image.  The value,
@var{relief}, specifies the width of the shadow lines, in pixels.  If
@var{relief} is negative, shadows are drawn so that the image appears
as a pressed button; otherwise, it appears as an unpressed button.

@item :conversion @var{algorithm}
This specifies a conversion algorithm that should be applied to the
image before it is displayed; the value, @var{algorithm}, specifies
which algorithm.

@table @code
@item laplace
@itemx emboss
Specifies the Laplace edge detection algorithm, which blurs out small
differences in color while highlighting larger differences.  People
sometimes consider this useful for displaying the image for a
disabled button.

@item (edge-detection :matrix @var{matrix} :color-adjust @var{adjust})
@cindex edge detection, images
Specifies a general edge-detection algorithm.  @var{matrix} must be
either a nine-element list or a nine-element vector of numbers.  A pixel
at position @math{x/y} in the transformed image is computed from
original pixels around that position.  @var{matrix} specifies, for each
pixel in the neighborhood of @math{x/y}, a factor with which that pixel
will influence the transformed pixel; element @math{0} specifies the
factor for the pixel at @math{x-1/y-1}, element @math{1} the factor for
the pixel at @math{x/y-1} etc., as shown below:
@iftex
@tex
$$\pmatrix{x-1/y-1 & x/y-1  & x+1/y-1 \cr
   x-1/y  &   x/y &    x+1/y \cr
   x-1/y+1&   x/y+1 &  x+1/y+1 \cr}$$
@end tex
@end iftex
@ifnottex
@display
  (x-1/y-1  x/y-1  x+1/y-1
   x-1/y    x/y    x+1/y
   x-1/y+1  x/y+1  x+1/y+1)
@end display
@end ifnottex

The resulting pixel is computed from the color intensity of the color
resulting from summing up the RGB values of surrounding pixels,
multiplied by the specified factors, and dividing that sum by the sum
of the factors' absolute values.

Laplace edge-detection currently uses a matrix of
@iftex
@tex
$$\pmatrix{1 & 0 & 0 \cr
   0&  0 &  0 \cr
   0 & 0 & -1 \cr}$$
@end tex
@end iftex
@ifnottex
@display
  (1  0  0
   0  0  0
   0  0 -1)
@end display
@end ifnottex

Emboss edge-detection uses a matrix of
@iftex
@tex
$$\pmatrix{ 2 & -1 &  0 \cr
   -1 &  0 &  1 \cr
    0  & 1 & -2 \cr}$$
@end tex
@end iftex
@ifnottex
@display
  ( 2 -1  0
   -1  0  1
    0  1 -2)
@end display
@end ifnottex

@item disabled
Specifies transforming the image so that it looks disabled.
@end table

@item :mask @var{mask}
If @var{mask} is @code{heuristic} or @code{(heuristic @var{bg})}, build
a clipping mask for the image, so that the background of a frame is
visible behind the image.  If @var{bg} is not specified, or if @var{bg}
is @code{t}, determine the background color of the image by looking at
the four corners of the image, assuming the most frequently occurring
color from the corners is the background color of the image.  Otherwise,
@var{bg} must be a list @code{(@var{red} @var{green} @var{blue})}
specifying the color to assume for the background of the image.

If @var{mask} is @code{nil}, remove a mask from the image, if it has
one.  Images in some formats include a mask which can be removed by
specifying @code{:mask nil}.

@item :pointer @var{shape}
This specifies the pointer shape when the mouse pointer is over this
image.  @xref{Pointer Shape}, for available pointer shapes.

@item :map @var{map}
@cindex image maps
This associates an image map of @dfn{hot spots} with this image.

An image map is an alist where each element has the format
@code{(@var{area} @var{id} @var{plist})}.  An @var{area} is specified
as either a rectangle, a circle, or a polygon.

A rectangle is a cons
@code{(rect . ((@var{x0} . @var{y0}) . (@var{x1} . @var{y1})))}
which specifies the pixel coordinates of the upper left and bottom right
corners of the rectangle area.

A circle is a cons
@code{(circle . ((@var{x0} . @var{y0}) . @var{r}))}
which specifies the center and the radius of the circle; @var{r} may
be a float or integer.

A polygon is a cons
@code{(poly . [@var{x0} @var{y0} @var{x1} @var{y1} ...])}
where each pair in the vector describes one corner in the polygon.

When the mouse pointer lies on a hot-spot area of an image, the
@var{plist} of that hot-spot is consulted; if it contains a @code{help-echo}
property, that defines a tool-tip for the hot-spot, and if it contains
a @code{pointer} property, that defines the shape of the mouse cursor when
it is on the hot-spot.
@xref{Pointer Shape}, for available pointer shapes.

When you click the mouse when the mouse pointer is over a hot-spot, an
event is composed by combining the @var{id} of the hot-spot with the
mouse event; for instance, @code{[area4 mouse-1]} if the hot-spot's
@var{id} is @code{area4}.
@end table

@defun image-mask-p spec &optional frame
This function returns @code{t} if image @var{spec} has a mask bitmap.
@var{frame} is the frame on which the image will be displayed.
@var{frame} @code{nil} or omitted means to use the selected frame
(@pxref{Input Focus}).
@end defun

@node XBM Images
@subsection XBM Images
@cindex XBM

  To use XBM format, specify @code{xbm} as the image type.  This image
format doesn't require an external library, so images of this type are
always supported.

  Additional image properties supported for the @code{xbm} image type are:

@table @code
@item :foreground @var{foreground}
The value, @var{foreground}, should be a string specifying the image
foreground color, or @code{nil} for the default color.  This color is
used for each pixel in the XBM that is 1.  The default is the frame's
foreground color.

@item :background @var{background}
The value, @var{background}, should be a string specifying the image
background color, or @code{nil} for the default color.  This color is
used for each pixel in the XBM that is 0.  The default is the frame's
background color.
@end table

  If you specify an XBM image using data within Emacs instead of an
external file, use the following three properties:

@table @code
@item :data @var{data}
The value, @var{data}, specifies the contents of the image.
There are three formats you can use for @var{data}:

@itemize @bullet
@item
A vector of strings or bool-vectors, each specifying one line of the
image.  Do specify @code{:height} and @code{:width}.

@item
A string containing the same byte sequence as an XBM file would contain.
You must not specify @code{:height} and @code{:width} in this case,
because omitting them is what indicates the data has the format of an
XBM file.  The file contents specify the height and width of the image.

@item
A string or a bool-vector containing the bits of the image (plus perhaps
some extra bits at the end that will not be used).  It should contain at
least @var{width} * @code{height} bits.  In this case, you must specify
@code{:height} and @code{:width}, both to indicate that the string
contains just the bits rather than a whole XBM file, and to specify the
size of the image.
@end itemize

@item :width @var{width}
The value, @var{width}, specifies the width of the image, in pixels.

@item :height @var{height}
The value, @var{height}, specifies the height of the image, in pixels.
@end table

@node XPM Images
@subsection XPM Images
@cindex XPM

  To use XPM format, specify @code{xpm} as the image type.  The
additional image property @code{:color-symbols} is also meaningful with
the @code{xpm} image type:

@table @code
@item :color-symbols @var{symbols}
The value, @var{symbols}, should be an alist whose elements have the
form @code{(@var{name} . @var{color})}.  In each element, @var{name} is
the name of a color as it appears in the image file, and @var{color}
specifies the actual color to use for displaying that name.
@end table

@node PostScript Images
@subsection PostScript Images
@cindex postscript images

  To use PostScript for an image, specify image type @code{postscript}.
This works only if you have Ghostscript installed.  You must always use
these three properties:

@table @code
@item :pt-width @var{width}
The value, @var{width}, specifies the width of the image measured in
points (1/72 inch).  @var{width} must be an integer.

@item :pt-height @var{height}
The value, @var{height}, specifies the height of the image in points
(1/72 inch).  @var{height} must be an integer.

@item :bounding-box @var{box}
The value, @var{box}, must be a list or vector of four integers, which
specifying the bounding box of the PostScript image, analogous to the
@samp{BoundingBox} comment found in PostScript files.

@example
%%BoundingBox: 22 171 567 738
@end example
@end table

@node ImageMagick Images
@subsection ImageMagick Images
@cindex ImageMagick images
@cindex images, support for more formats

  If you build Emacs with ImageMagick support, you can use the
ImageMagick library to load many image formats (@pxref{File
Conveniences,,, emacs, The GNU Emacs Manual}).  The image type symbol
for images loaded via ImageMagick is @code{imagemagick}, regardless of
the actual underlying image format.

To check for ImageMagick support, use the following:

@lisp
(image-type-available-p 'imagemagick)
@end lisp

@defun imagemagick-types
This function returns a list of image file extensions supported by the
current ImageMagick installation.  Each list element is a symbol
representing an internal ImageMagick name for an image type, such as
@code{BMP} for @file{.bmp} images.
@end defun

@defopt imagemagick-enabled-types
The value of this variable is a list of ImageMagick image types which
Emacs may attempt to render using ImageMagick.  Each list element
should be one of the symbols in the list returned by
@code{imagemagick-types}, or an equivalent string.  Alternatively, a
value of @code{t} enables ImageMagick for all possible image types.
Regardless of the value of this variable,
@code{imagemagick-types-inhibit} (see below) takes precedence.
@end defopt

@defopt imagemagick-types-inhibit
The value of this variable lists the ImageMagick image types which
should never be rendered using ImageMagick, regardless of the value of
@code{imagemagick-enabled-types}.  A value of @code{t} disables
ImageMagick entirely.
@end defopt

@defvar image-format-suffixes
This variable is an alist mapping image types to file name extensions.
Emacs uses this in conjunction with the @code{:format} image property
(see below) to give a hint to the ImageMagick library as to the type
of an image.  Each element has the form @code{(@var{type}
@var{extension})}, where @var{type} is a symbol specifying an image
content-type, and @var{extension} is a string that specifies the
associated file name extension.
@end defvar

  Images loaded with ImageMagick support the following additional
image descriptor properties:

@table @code
@item :background @var{background}
@var{background}, if non-@code{nil}, should be a string specifying a
color, which is used as the image's background color if the image
supports transparency.  If the value is @code{nil}, it defaults to the
frame's background color.

@item :width @var{width}, :height @var{height}
The @code{:width} and @code{:height} keywords are used for scaling the
image.  If only one of them is specified, the other one will be
calculated so as to preserve the aspect ratio.  If both are specified,
aspect ratio may not be preserved.

@item :max-width @var{max-width}, :max-height @var{max-height}
The @code{:max-width} and @code{:max-height} keywords are used for
scaling if the size of the image of the image exceeds these values.
If @code{:width} is set it will have precedence over @code{max-width},
and if @code{:height} is set it will have precedence over
@code{max-height}, but you can otherwise mix these keywords as you
wish.  @code{:max-width} and @code{:max-height} will always preserve
the aspect ratio.

@item :format @var{type}
The value, @var{type}, should be a symbol specifying the type of the
image data, as found in @code{image-format-suffixes}.  This is used
when the image does not have an associated file name, to provide a
hint to ImageMagick to help it detect the image type.

@item :rotation @var{angle}
Specifies a rotation angle in degrees.

@item :index @var{frame}
@c Doesn't work: http://debbugs.gnu.org/7978
@xref{Multi-Frame Images}.
@end table

@node Other Image Types
@subsection Other Image Types
@cindex PBM

  For PBM images, specify image type @code{pbm}.  Color, gray-scale and
monochromatic images are supported.   For mono PBM images, two additional
image properties are supported.

@table @code
@item :foreground @var{foreground}
The value, @var{foreground}, should be a string specifying the image
foreground color, or @code{nil} for the default color.  This color is
used for each pixel in the PBM that is 1.  The default is the frame's
foreground color.

@item :background @var{background}
The value, @var{background}, should be a string specifying the image
background color, or @code{nil} for the default color.  This color is
used for each pixel in the PBM that is 0.  The default is the frame's
background color.
@end table

@noindent
The remaining image types that Emacs can support are:

@table @asis
@item GIF
Image type @code{gif}.
Supports the @code{:index} property.  @xref{Multi-Frame Images}.

@item JPEG
Image type @code{jpeg}.

@item PNG
Image type @code{png}.

@item SVG
Image type @code{svg}.

@item TIFF
Image type @code{tiff}.
Supports the @code{:index} property.  @xref{Multi-Frame Images}.
@end table

@node Defining Images
@subsection Defining Images
@cindex define image

  The functions @code{create-image}, @code{defimage} and
@code{find-image} provide convenient ways to create image descriptors.

@defun create-image file-or-data &optional type data-p &rest props
This function creates and returns an image descriptor which uses the
data in @var{file-or-data}.  @var{file-or-data} can be a file name or
a string containing the image data; @var{data-p} should be @code{nil}
for the former case, non-@code{nil} for the latter case.

The optional argument @var{type} is a symbol specifying the image type.
If @var{type} is omitted or @code{nil}, @code{create-image} tries to
determine the image type from the file's first few bytes, or else
from the file's name.

The remaining arguments, @var{props}, specify additional image
properties---for example,

@c ':heuristic-mask' is not documented?
@example
(create-image "foo.xpm" 'xpm nil :heuristic-mask t)
@end example

The function returns @code{nil} if images of this type are not
supported.  Otherwise it returns an image descriptor.
@end defun

@defmac defimage symbol specs &optional doc
This macro defines @var{symbol} as an image name.  The arguments
@var{specs} is a list which specifies how to display the image.
The third argument, @var{doc}, is an optional documentation string.

Each argument in @var{specs} has the form of a property list, and each
one should specify at least the @code{:type} property and either the
@code{:file} or the @code{:data} property.  The value of @code{:type}
should be a symbol specifying the image type, the value of
@code{:file} is the file to load the image from, and the value of
@code{:data} is a string containing the actual image data.  Here is an
example:

@example
(defimage test-image
  ((:type xpm :file "~/test1.xpm")
   (:type xbm :file "~/test1.xbm")))
@end example

@code{defimage} tests each argument, one by one, to see if it is
usable---that is, if the type is supported and the file exists.  The
first usable argument is used to make an image descriptor which is
stored in @var{symbol}.

If none of the alternatives will work, then @var{symbol} is defined
as @code{nil}.
@end defmac

@defun find-image specs
This function provides a convenient way to find an image satisfying one
of a list of image specifications @var{specs}.

Each specification in @var{specs} is a property list with contents
depending on image type.  All specifications must at least contain the
properties @code{:type @var{type}} and either @w{@code{:file @var{file}}}
or @w{@code{:data @var{data}}}, where @var{type} is a symbol specifying
the image type, e.g., @code{xbm}, @var{file} is the file to load the
image from, and @var{data} is a string containing the actual image data.
The first specification in the list whose @var{type} is supported, and
@var{file} exists, is used to construct the image specification to be
returned.  If no specification is satisfied, @code{nil} is returned.

The image is looked for in @code{image-load-path}.
@end defun

@defopt image-load-path
This variable's value is a list of locations in which to search for
image files.  If an element is a string or a variable symbol whose
value is a string, the string is taken to be the name of a directory
to search.  If an element is a variable symbol whose value is a list,
that is taken to be a list of directory names to search.

The default is to search in the @file{images} subdirectory of the
directory specified by @code{data-directory}, then the directory
specified by @code{data-directory}, and finally in the directories in
@code{load-path}.  Subdirectories are not automatically included in
the search, so if you put an image file in a subdirectory, you have to
supply the subdirectory name explicitly.  For example, to find the
image @file{images/foo/bar.xpm} within @code{data-directory}, you
should specify the image as follows:

@example
(defimage foo-image '((:type xpm :file "foo/bar.xpm")))
@end example
@end defopt

@defun image-load-path-for-library library image &optional path no-error
This function returns a suitable search path for images used by the
Lisp package @var{library}.

The function searches for @var{image} first using @code{image-load-path},
excluding @file{@code{data-directory}/images}, and then in
@code{load-path}, followed by a path suitable for @var{library}, which
includes @file{../../etc/images} and @file{../etc/images} relative to
the library file itself, and finally in
@file{@code{data-directory}/images}.

Then this function returns a list of directories which contains first
the directory in which @var{image} was found, followed by the value of
@code{load-path}.  If @var{path} is given, it is used instead of
@code{load-path}.

If @var{no-error} is non-@code{nil} and a suitable path can't be
found, don't signal an error.  Instead, return a list of directories as
before, except that @code{nil} appears in place of the image directory.

Here is an example of using @code{image-load-path-for-library}:

@example
(defvar image-load-path) ; shush compiler
(let* ((load-path (image-load-path-for-library
                    "mh-e" "mh-logo.xpm"))
       (image-load-path (cons (car load-path)
                              image-load-path)))
  (mh-tool-bar-folder-buttons-init))
@end example
@end defun

@node Showing Images
@subsection Showing Images
@cindex show image

  You can use an image descriptor by setting up the @code{display}
property yourself, but it is easier to use the functions in this
section.

@defun insert-image image &optional string area slice
This function inserts @var{image} in the current buffer at point.  The
value @var{image} should be an image descriptor; it could be a value
returned by @code{create-image}, or the value of a symbol defined with
@code{defimage}.  The argument @var{string} specifies the text to put
in the buffer to hold the image.  If it is omitted or @code{nil},
@code{insert-image} uses @code{" "} by default.

The argument @var{area} specifies whether to put the image in a margin.
If it is @code{left-margin}, the image appears in the left margin;
@code{right-margin} specifies the right margin.  If @var{area} is
@code{nil} or omitted, the image is displayed at point within the
buffer's text.

The argument @var{slice} specifies a slice of the image to insert.  If
@var{slice} is @code{nil} or omitted the whole image is inserted.
Otherwise, @var{slice} is a list @code{(@var{x} @var{y} @var{width}
@var{height})} which specifies the @var{x} and @var{y} positions and
@var{width} and @var{height} of the image area to insert.  Integer
values are in units of pixels.  A floating-point number in the range
0.0--1.0 stands for that fraction of the width or height of the entire
image.

Internally, this function inserts @var{string} in the buffer, and gives
it a @code{display} property which specifies @var{image}.  @xref{Display
Property}.
@end defun

@cindex slice, image
@cindex image slice
@defun insert-sliced-image image &optional string area rows cols
This function inserts @var{image} in the current buffer at point, like
@code{insert-image}, but splits the image into @var{rows}x@var{cols}
equally sized slices.

Emacs displays each slice as a
separate image, and allows more intuitive scrolling up/down, instead of
jumping up/down the entire image when paging through a buffer that
displays (large) images.
@end defun

@defun put-image image pos &optional string area
This function puts image @var{image} in front of @var{pos} in the
current buffer.  The argument @var{pos} should be an integer or a
marker.  It specifies the buffer position where the image should appear.
The argument @var{string} specifies the text that should hold the image
as an alternative to the default.

The argument @var{image} must be an image descriptor, perhaps returned
by @code{create-image} or stored by @code{defimage}.

The argument @var{area} specifies whether to put the image in a margin.
If it is @code{left-margin}, the image appears in the left margin;
@code{right-margin} specifies the right margin.  If @var{area} is
@code{nil} or omitted, the image is displayed at point within the
buffer's text.

Internally, this function creates an overlay, and gives it a
@code{before-string} property containing text that has a @code{display}
property whose value is the image.  (Whew!)
@end defun

@defun remove-images start end &optional buffer
This function removes images in @var{buffer} between positions
@var{start} and @var{end}.  If @var{buffer} is omitted or @code{nil},
images are removed from the current buffer.

This removes only images that were put into @var{buffer} the way
@code{put-image} does it, not images that were inserted with
@code{insert-image} or in other ways.
@end defun

@defun image-size spec &optional pixels frame
@cindex size of image
This function returns the size of an image as a pair
@w{@code{(@var{width} . @var{height})}}.  @var{spec} is an image
specification.  @var{pixels} non-@code{nil} means return sizes measured
in pixels, otherwise return sizes measured in the default character size
of @var{frame} (@pxref{Frame Font}).  @var{frame} is the frame on which
the image will be displayed.  @var{frame} null or omitted means use the
selected frame (@pxref{Input Focus}).
@end defun

@defvar max-image-size
This variable is used to define the maximum size of image that Emacs
will load.  Emacs will refuse to load (and display) any image that is
larger than this limit.

If the value is an integer, it directly specifies the maximum
image height and width, measured in pixels.  If it is floating
point, it specifies the maximum image height and width
as a ratio to the frame height and width.  If the value is
non-numeric, there is no explicit limit on the size of images.

The purpose of this variable is to prevent unreasonably large images
from accidentally being loaded into Emacs.  It only takes effect the
first time an image is loaded.  Once an image is placed in the image
cache, it can always be displayed, even if the value of
@code{max-image-size} is subsequently changed (@pxref{Image Cache}).
@end defvar

@node Multi-Frame Images
@subsection Multi-Frame Images
@cindex multi-frame images

@cindex animation
@cindex image animation
@cindex image frames
Some image files can contain more than one image.  We say that there
are multiple ``frames'' in the image.  At present, Emacs supports
multiple frames for GIF, TIFF, and certain ImageMagick formats such as
DJVM@.

The frames can be used either to represent multiple pages (this is
usually the case with multi-frame TIFF files, for example), or to
create animation (usually the case with multi-frame GIF files).

A multi-frame image has a property @code{:index}, whose value is an
integer (counting from 0) that specifies which frame is being displayed.

@defun image-multi-frame-p image
This function returns non-@code{nil} if @var{image} contains more than
one frame.  The actual return value is a cons @code{(@var{nimages}
. @var{delay})}, where @var{nimages} is the number of frames and
@var{delay} is the delay in seconds between them, or @code{nil}
if the image does not specify a delay.  Images that are intended to be
animated usually specify a frame delay, whereas ones that are intended
to be treated as multiple pages do not.
@end defun

@defun image-current-frame image
This function returns the index of the current frame number for
@var{image}, counting from 0.
@end defun

@defun image-show-frame image n &optional nocheck
This function switches @var{image} to frame number @var{n}.  It
replaces a frame number outside the valid range with that of the end
of the range, unless @var{nocheck} is non-@code{nil}.  If @var{image}
does not contain a frame with the specified number, the image displays
as a hollow box.
@end defun

@defun image-animate image &optional index limit
This function animates @var{image}.  The optional integer @var{index}
specifies the frame from which to start (default 0).  The optional
argument @var{limit} controls the length of the animation.  If omitted
or @code{nil}, the image animates once only; if @code{t} it loops
forever; if a number animation stops after that many seconds.
@end defun

@vindex image-minimum-frame-delay
@vindex image-default-frame-delay
@noindent Animation operates by means of a timer.  Note that Emacs imposes a
minimum frame delay of 0.01 (@code{image-minimum-frame-delay}) seconds.
If the image itself does not specify a delay, Emacs uses
@code{image-default-frame-delay}.

@defun image-animate-timer image
This function returns the timer responsible for animating @var{image},
if there is one.
@end defun


@node Image Cache
@subsection Image Cache
@cindex image cache

  Emacs caches images so that it can display them again more
efficiently.  When Emacs displays an image, it searches the image
cache for an existing image specification @code{equal} to the desired
specification.  If a match is found, the image is displayed from the
cache.  Otherwise, Emacs loads the image normally.

@defun image-flush spec &optional frame
This function removes the image with specification @var{spec} from the
image cache of frame @var{frame}.  Image specifications are compared
using @code{equal}.  If @var{frame} is @code{nil}, it defaults to the
selected frame.  If @var{frame} is @code{t}, the image is flushed on
all existing frames.

In Emacs's current implementation, each graphical terminal possesses an
image cache, which is shared by all the frames on that terminal
(@pxref{Multiple Terminals}).  Thus, refreshing an image in one frame
also refreshes it in all other frames on the same terminal.
@end defun

  One use for @code{image-flush} is to tell Emacs about a change in an
image file.  If an image specification contains a @code{:file}
property, the image is cached based on the file's contents when the
image is first displayed.  Even if the file subsequently changes,
Emacs continues displaying the old version of the image.  Calling
@code{image-flush} flushes the image from the cache, forcing Emacs to
re-read the file the next time it needs to display that image.

  Another use for @code{image-flush} is for memory conservation.  If
your Lisp program creates a large number of temporary images over a
period much shorter than @code{image-cache-eviction-delay} (see
below), you can opt to flush unused images yourself, instead of
waiting for Emacs to do it automatically.

@defun clear-image-cache &optional filter
This function clears an image cache, removing all the images stored in
it.  If @var{filter} is omitted or @code{nil}, it clears the cache for
the selected frame.  If @var{filter} is a frame, it clears the cache
for that frame.  If @var{filter} is @code{t}, all image caches are
cleared.  Otherwise, @var{filter} is taken to be a file name, and all
images associated with that file name are removed from all image
caches.
@end defun

If an image in the image cache has not been displayed for a specified
period of time, Emacs removes it from the cache and frees the
associated memory.

@defvar image-cache-eviction-delay
This variable specifies the number of seconds an image can remain in
the cache without being displayed.  When an image is not displayed for
this length of time, Emacs removes it from the image cache.

Under some circumstances, if the number of images in the cache grows
too large, the actual eviction delay may be shorter than this.

If the value is @code{nil}, Emacs does not remove images from the cache
except when you explicitly clear it.  This mode can be useful for
debugging.
@end defvar

@node Xwidgets
@section Embedded Native Widgets
@cindex xwidget
@cindex embedded widgets
@cindex webkit browser widget

  Emacs is able to display native widgets, such as GTK WebKit widgets,
in Emacs buffers when it was built with the necessary support
libraries and is running on a graphical terminal.  To test whether
Emacs supports display of embedded widgets, check that the
@code{xwidget-internal} feature is available (@pxref{Named Features}).

  To display an embedded widget in a buffer, you must first create an
xwidget object, and then use that object as the display specifier
in a @code{display} text or overlay property (@pxref{Display
Property}).

@defun make-xwidget type title width height arguments &optional buffer
This creates and returns an xwidget object.  If
@var{buffer} is omitted or @code{nil}, it defaults to the current
buffer.  If @var{buffer} names a buffer that doesn't exist, it will be
created.  The @var{type} identifies the type of the xwidget component,
it can be one of the following:

@table @code
@item webkit
The WebKit component.
@end table

The @var{width} and @var{height} arguments specify the widget size in
pixels, and @var{title}, a string, specifies its title.
@end defun

@defun xwidgetp object
This function returns @code{t} if @var{object} is an xwidget,
@code{nil} otherwise.
@end defun

@defun xwidget-plist xwidget
This function returns the property list of @var{xwidget}.
@end defun

@defun set-xwidget-plist xwidget plist
This function replaces the property list of @var{xwidget} with a new
property list given by @var{plist}.
@end defun

@defun xwidget-buffer xwidget
This function returns the buffer of @var{xwidget}.
@end defun

@defun get-buffer-xwidgets buffer
This function returns a list of xwidget objects associated with the
@var{buffer}, which can be specified as a buffer object or a name of
an existing buffer, a string.  The value is @code{nil} if @var{buffer}
contains no xwidgets.
@end defun

@defun xwidget-webkit-goto-uri xwidget uri
This function browses the specified @var{uri} in the given
@var{xwidget}.  The @var{uri} is a string that specifies the name of a
file or a URL.  @c FIXME: What else can a URI specify in this context?
@end defun

@defun xwidget-webkit-execute-script xwidget script
This function causes the browser widget specified by @var{xwidget} to
execute the specified JavaScript @code{script}.
@end defun

@defun xwidget-webkit-execute-script-rv xwidget script &optional default
This function executes the specified @var{script} like
@code{xwidget-webkit-execute-script} does, but it also returns the
script's return value as a string.  If @var{script} doesn't return a
value, this function returns @var{default}, or @code{nil} if
@var{default} was omitted.
@end defun

@defun xwidget-webkit-get-title xwidget
This function returns the title of @var{xwidget} as a string.
@end defun

@defun xwidget-resize xwidget width height
This function resizes the specified @var{xwidget} to the size
@var{width}x@var{height} pixels.
@end defun

@defun xwidget-size-request xwidget
This function returns the desired size of @var{xwidget} as a list of
the form @code{(@var{width} @var{height})}.  The dimensions are in
pixels.
@end defun

@defun xwidget-info xwidget
This function returns the attributes of @var{xwidget} as a vector of
the form @code{[@var{type} @var{title} @var{width} @var{height}]}.
The attributes are usually determined by @code{make-xwidget} when the
xwidget is created.
@end defun

@defun set-xwidget-query-on-exit-flag xwidget flag
This function allows you to arrange that Emacs will ask the user for
confirmation before exiting or before killing a buffer that has
@var{xwidget} associated with it.  If @var{flag} is non-@code{nil},
Emacs will query the user, otherwise it will not.
@end defun

@defun xwidget-query-on-exit-flag xwidget
This function returns the current setting of @var{xwidget}s
query-on-exit flag, either @code{t} or @code{nil}.
@end defun

@node Buttons
@section Buttons
@cindex buttons in buffers
@cindex clickable buttons in buffers

  The Button package defines functions for inserting and manipulating
@dfn{buttons} that can be activated with the mouse or via keyboard
commands.  These buttons are typically used for various kinds of
hyperlinks.

  A button is essentially a set of text or overlay properties,
attached to a stretch of text in a buffer.  These properties are
called @dfn{button properties}.  One of these properties, the
@dfn{action property}, specifies a function which is called when the
user invokes the button using the keyboard or the mouse.  The action
function may examine the button and use its other properties as
desired.

  In some ways, the Button package duplicates the functionality in the
Widget package.  @xref{Top, , Introduction, widget, The Emacs Widget
Library}.  The advantage of the Button package is that it is faster,
smaller, and simpler to program.  From the point of view of the user,
the interfaces produced by the two packages are very similar.

@menu
* Button Properties::      Button properties with special meanings.
* Button Types::           Defining common properties for classes of buttons.
* Making Buttons::         Adding buttons to Emacs buffers.
* Manipulating Buttons::   Getting and setting properties of buttons.
* Button Buffer Commands:: Buffer-wide commands and bindings for buttons.
@end menu

@node Button Properties
@subsection Button Properties
@cindex button properties

  Each button has an associated list of properties defining its
appearance and behavior, and other arbitrary properties may be used
for application specific purposes.  The following properties have
special meaning to the Button package:

@table @code
@item action
@kindex action @r{(button property)}
The function to call when the user invokes the button, which is passed
the single argument @var{button}.  By default this is @code{ignore},
which does nothing.

@item mouse-action
@kindex mouse-action @r{(button property)}
This is similar to @code{action}, and when present, will be used
instead of @code{action} for button invocations resulting from
mouse-clicks (instead of the user hitting @key{RET}).  If not
present, mouse-clicks use @code{action} instead.

@item face
@kindex face @r{(button property)}
This is an Emacs face controlling how buttons of this type are
displayed; by default this is the @code{button} face.

@item mouse-face
@kindex mouse-face @r{(button property)}
This is an additional face which controls appearance during
mouse-overs (merged with the usual button face); by default this is
the usual Emacs @code{highlight} face.

@item keymap
@kindex keymap @r{(button property)}
The button's keymap, defining bindings active within the button
region.  By default this is the usual button region keymap, stored
in the variable @code{button-map}, which defines @key{RET} and
@key{mouse-2} to invoke the button.

@item type
@kindex type @r{(button property)}
The button type.  @xref{Button Types}.

@item help-echo
@kindex help-index @r{(button property)}
A string displayed by the Emacs tool-tip help system; by default,
@code{"mouse-2, RET: Push this button"}.

@item follow-link
@kindex follow-link @r{(button property)}
The follow-link property, defining how a @key{mouse-1} click behaves
on this button, @xref{Clickable Text}.

@item button
@kindex button @r{(button property)}
All buttons have a non-@code{nil} @code{button} property, which may be useful
in finding regions of text that comprise buttons (which is what the
standard button functions do).
@end table

  There are other properties defined for the regions of text in a
button, but these are not generally interesting for typical uses.

@node Button Types
@subsection Button Types
@cindex button types

  Every button has a @dfn{button type}, which defines default values
for the button's properties.  Button types are arranged in a
hierarchy, with specialized types inheriting from more general types,
so that it's easy to define special-purpose types of buttons for
specific tasks.

@defun define-button-type name &rest properties
Define a button type called @var{name} (a symbol).
The remaining arguments
form a sequence of @var{property value} pairs, specifying default
property values for buttons with this type (a button's type may be set
by giving it a @code{type} property when creating the button, using
the @code{:type} keyword argument).

In addition, the keyword argument @code{:supertype} may be used to
specify a button-type from which @var{name} inherits its default
property values.  Note that this inheritance happens only when
@var{name} is defined; subsequent changes to a supertype are not
reflected in its subtypes.
@end defun

  Using @code{define-button-type} to define default properties for
buttons is not necessary---buttons without any specified type use the
built-in button-type @code{button}---but it is encouraged, since
doing so usually makes the resulting code clearer and more efficient.

@node Making Buttons
@subsection Making Buttons
@cindex making buttons

  Buttons are associated with a region of text, using an overlay or
text properties to hold button-specific information, all of which are
initialized from the button's type (which defaults to the built-in
button type @code{button}).  Like all Emacs text, the appearance of
the button is governed by the @code{face} property; by default (via
the @code{face} property inherited from the @code{button} button-type)
this is a simple underline, like a typical web-page link.

  For convenience, there are two sorts of button-creation functions,
those that add button properties to an existing region of a buffer,
called @code{make-...button}, and those that also insert the button
text, called @code{insert-...button}.

  The button-creation functions all take the @code{&rest} argument
@var{properties}, which should be a sequence of @var{property value}
pairs, specifying properties to add to the button; see @ref{Button
Properties}.  In addition, the keyword argument @code{:type} may be
used to specify a button-type from which to inherit other properties;
see @ref{Button Types}.  Any properties not explicitly specified
during creation will be inherited from the button's type (if the type
defines such a property).

  The following functions add a button using an overlay
(@pxref{Overlays}) to hold the button properties:

@defun make-button beg end &rest properties
This makes a button from @var{beg} to @var{end} in the
current buffer, and returns it.
@end defun

@defun insert-button label &rest properties
This insert a button with the label @var{label} at point,
and returns it.
@end defun

  The following functions are similar, but using text properties
(@pxref{Text Properties}) to hold the button properties.  Such buttons
do not add markers to the buffer, so editing in the buffer does not
slow down if there is an extremely large numbers of buttons.  However,
if there is an existing face text property on the text (e.g., a face
assigned by Font Lock mode), the button face may not be visible.  Both
of these functions return the starting position of the new button.

@defun make-text-button beg end &rest properties
This makes a button from @var{beg} to @var{end} in the current buffer,
using text properties.
@end defun

@defun insert-text-button label &rest properties
This inserts a button with the label @var{label} at point, using text
properties.
@end defun

@node Manipulating Buttons
@subsection Manipulating Buttons
@cindex manipulating buttons

These are functions for getting and setting properties of buttons.
Often these are used by a button's invocation function to determine
what to do.

Where a @var{button} parameter is specified, it means an object
referring to a specific button, either an overlay (for overlay
buttons), or a buffer-position or marker (for text property buttons).
Such an object is passed as the first argument to a button's
invocation function when it is invoked.

@defun button-start button
Return the position at which @var{button} starts.
@end defun

@defun button-end button
Return the position at which @var{button} ends.
@end defun

@defun button-get button prop
Get the property of button @var{button} named @var{prop}.
@end defun

@defun button-put button prop val
Set @var{button}'s @var{prop} property to @var{val}.
@end defun

@defun button-activate button &optional use-mouse-action
Call @var{button}'s @code{action} property (i.e., invoke the function
that is the value of that property, passing it the single argument
@var{button}).  If @var{use-mouse-action} is non-@code{nil}, try to
invoke the button's @code{mouse-action} property instead of
@code{action}; if the button has no @code{mouse-action} property, use
@code{action} as normal.
@end defun

@defun button-label button
Return @var{button}'s text label.
@end defun

@defun button-type button
Return @var{button}'s button-type.
@end defun

@defun button-has-type-p button type
Return @code{t} if @var{button} has button-type @var{type}, or one of
@var{type}'s subtypes.
@end defun

@defun button-at pos
Return the button at position @var{pos} in the current buffer, or
@code{nil}.  If the button at @var{pos} is a text property button, the
return value is a marker pointing to @var{pos}.
@end defun

@defun button-type-put type prop val
Set the button-type @var{type}'s @var{prop} property to @var{val}.
@end defun

@defun button-type-get type prop
Get the property of button-type @var{type} named @var{prop}.
@end defun

@defun button-type-subtype-p type supertype
Return @code{t} if button-type @var{type} is a subtype of @var{supertype}.
@end defun

@node Button Buffer Commands
@subsection Button Buffer Commands
@cindex button buffer commands

These are commands and functions for locating and operating on
buttons in an Emacs buffer.

@code{push-button} is the command that a user uses to actually push
a button, and is bound by default in the button itself to @key{RET}
and to @key{mouse-2} using a local keymap in the button's overlay or
text properties.  Commands that are useful outside the buttons itself,
such as @code{forward-button} and @code{backward-button} are
additionally available in the keymap stored in
@code{button-buffer-map}; a mode which uses buttons may want to use
@code{button-buffer-map} as a parent keymap for its keymap.

If the button has a non-@code{nil} @code{follow-link} property, and
@code{mouse-1-click-follows-link} is set, a quick @key{mouse-1} click
will also activate the @code{push-button} command.
@xref{Clickable Text}.

@deffn Command push-button &optional pos use-mouse-action
Perform the action specified by a button at location @var{pos}.
@var{pos} may be either a buffer position or a mouse-event.  If
@var{use-mouse-action} is non-@code{nil}, or @var{pos} is a
mouse-event (@pxref{Mouse Events}), try to invoke the button's
@code{mouse-action} property instead of @code{action}; if the button
has no @code{mouse-action} property, use @code{action} as normal.
@var{pos} defaults to point, except when @code{push-button} is invoked
interactively as the result of a mouse-event, in which case, the mouse
event's position is used.  If there's no button at @var{pos}, do
nothing and return @code{nil}, otherwise return @code{t}.
@end deffn

@deffn Command forward-button n &optional wrap display-message
Move to the @var{n}th next button, or @var{n}th previous button if
@var{n} is negative.  If @var{n} is zero, move to the start of any
button at point.  If @var{wrap} is non-@code{nil}, moving past either
end of the buffer continues from the other end.  If
@var{display-message} is non-@code{nil}, the button's help-echo string
is displayed.  Any button with a non-@code{nil} @code{skip} property
is skipped over.  Returns the button found.
@end deffn

@deffn Command backward-button n &optional wrap display-message
Move to the @var{n}th previous button, or @var{n}th next button if
@var{n} is negative.  If @var{n} is zero, move to the start of any
button at point.  If @var{wrap} is non-@code{nil}, moving past either
end of the buffer continues from the other end.  If
@var{display-message} is non-@code{nil}, the button's help-echo string
is displayed.  Any button with a non-@code{nil} @code{skip} property
is skipped over.  Returns the button found.
@end deffn

@defun next-button pos &optional count-current
@defunx previous-button pos &optional count-current
Return the next button after (for @code{next-button}) or before (for
@code{previous-button}) position @var{pos} in the current buffer.  If
@var{count-current} is non-@code{nil}, count any button at @var{pos}
in the search, instead of starting at the next button.
@end defun

@node Abstract Display
@section Abstract Display
@cindex ewoc
@cindex display, abstract
@cindex display, arbitrary objects
@cindex model/view/controller
@cindex view part, model/view/controller

  The Ewoc package constructs buffer text that represents a structure
of Lisp objects, and updates the text to follow changes in that
structure.  This is like the ``view'' component in the
``model--view--controller'' design paradigm.  Ewoc means ``Emacs's
Widget for Object Collections''.

  An @dfn{ewoc} is a structure that organizes information required to
construct buffer text that represents certain Lisp data.  The buffer
text of the ewoc has three parts, in order: first, fixed @dfn{header}
text; next, textual descriptions of a series of data elements (Lisp
objects that you specify); and last, fixed @dfn{footer} text.
Specifically, an ewoc contains information on:

@itemize @bullet
@item
The buffer which its text is generated in.

@item
The text's start position in the buffer.

@item
The header and footer strings.

@item
@cindex node, ewoc
@c or "@cindex node, abstract display"?
A doubly-linked chain of @dfn{nodes}, each of which contains:

@itemize
@item
A @dfn{data element}, a single Lisp object.

@item
Links to the preceding and following nodes in the chain.
@end itemize

@item
A @dfn{pretty-printer} function which is responsible for
inserting the textual representation of a data
element value into the current buffer.
@end itemize

  Typically, you define an ewoc with @code{ewoc-create}, and then pass
the resulting ewoc structure to other functions in the Ewoc package to
build nodes within it, and display it in the buffer.  Once it is
displayed in the buffer, other functions determine the correspondence
between buffer positions and nodes, move point from one node's textual
representation to another, and so forth.  @xref{Abstract Display
Functions}.

@cindex encapsulation, ewoc
@c or "@cindex encapsulation, abstract display"?
  A node @dfn{encapsulates} a data element much the way a variable
holds a value.  Normally, encapsulation occurs as a part of adding a
node to the ewoc.  You can retrieve the data element value and place a
new value in its place, like so:

@lisp
(ewoc-data @var{node})
@result{} value

(ewoc-set-data @var{node} @var{new-value})
@result{} @var{new-value}
@end lisp

@noindent
You can also use, as the data element value, a Lisp object (list or
vector) that is a container for the real value, or an index into
some other structure.  The example (@pxref{Abstract Display Example})
uses the latter approach.

  When the data changes, you will want to update the text in the
buffer.  You can update all nodes by calling @code{ewoc-refresh}, or
just specific nodes using @code{ewoc-invalidate}, or all nodes
satisfying a predicate using @code{ewoc-map}.  Alternatively, you can
delete invalid nodes using @code{ewoc-delete} or @code{ewoc-filter},
and add new nodes in their place.  Deleting a node from an ewoc deletes
its associated textual description from buffer, as well.

@menu
* Abstract Display Functions::  Functions in the Ewoc package.
* Abstract Display Example::    Example of using Ewoc.
@end menu

@node Abstract Display Functions
@subsection Abstract Display Functions

  In this subsection, @var{ewoc} and @var{node} stand for the
structures described above (@pxref{Abstract Display}), while
@var{data} stands for an arbitrary Lisp object used as a data element.

@defun ewoc-create pretty-printer &optional header footer nosep
This constructs and returns a new ewoc, with no nodes (and thus no data
elements).  @var{pretty-printer} should be a function that takes one
argument, a data element of the sort you plan to use in this ewoc, and
inserts its textual description at point using @code{insert} (and never
@code{insert-before-markers}, because that would interfere with the
Ewoc package's internal mechanisms).

Normally, a newline is automatically inserted after the header,
the footer and every node's textual description.  If @var{nosep}
is non-@code{nil}, no newline is inserted.  This may be useful for
displaying an entire ewoc on a single line, for example, or for
making nodes invisible by arranging for @var{pretty-printer}
to do nothing for those nodes.

An ewoc maintains its text in the buffer that is current when
you create it, so switch to the intended buffer before calling
@code{ewoc-create}.
@end defun

@defun ewoc-buffer ewoc
This returns the buffer where @var{ewoc} maintains its text.
@end defun

@defun ewoc-get-hf ewoc
This returns a cons cell @code{(@var{header} . @var{footer})}
made from @var{ewoc}'s header and footer.
@end defun

@defun ewoc-set-hf ewoc header footer
This sets the header and footer of @var{ewoc} to the strings
@var{header} and @var{footer}, respectively.
@end defun

@defun ewoc-enter-first ewoc data
@defunx ewoc-enter-last ewoc data
These add a new node encapsulating @var{data}, putting it, respectively,
at the beginning or end of @var{ewoc}'s chain of nodes.
@end defun

@defun ewoc-enter-before ewoc node data
@defunx ewoc-enter-after ewoc node data
These add a new node encapsulating @var{data}, adding it to
@var{ewoc} before or after @var{node}, respectively.
@end defun

@defun ewoc-prev ewoc node
@defunx ewoc-next ewoc node
These return, respectively, the previous node and the next node of @var{node}
in @var{ewoc}.
@end defun

@defun ewoc-nth ewoc n
This returns the node in @var{ewoc} found at zero-based index @var{n}.
A negative @var{n} means count from the end.  @code{ewoc-nth} returns
@code{nil} if @var{n} is out of range.
@end defun

@defun ewoc-data node
This extracts the data encapsulated by @var{node} and returns it.
@end defun

@defun ewoc-set-data node data
This sets the data encapsulated by @var{node} to @var{data}.
@end defun

@defun ewoc-locate ewoc &optional pos guess
This determines the node in @var{ewoc} which contains point (or
@var{pos} if specified), and returns that node.  If @var{ewoc} has no
nodes, it returns @code{nil}.  If @var{pos} is before the first node,
it returns the first node; if @var{pos} is after the last node, it returns
the last node.  The optional third arg @var{guess}
should be a node that is likely to be near @var{pos}; this doesn't
alter the result, but makes the function run faster.
@end defun

@defun ewoc-location node
This returns the start position of @var{node}.
@end defun

@defun ewoc-goto-prev ewoc arg
@defunx ewoc-goto-next ewoc arg
These move point to the previous or next, respectively, @var{arg}th node
in @var{ewoc}.  @code{ewoc-goto-prev} does not move if it is already at
the first node or if @var{ewoc} is empty, whereas @code{ewoc-goto-next}
moves past the last node, returning @code{nil}.  Excepting this special
case, these functions return the node moved to.
@end defun

@defun ewoc-goto-node ewoc node
This moves point to the start of @var{node} in @var{ewoc}.
@end defun

@defun ewoc-refresh ewoc
This function regenerates the text of @var{ewoc}.  It works by
deleting the text between the header and the footer, i.e., all the
data elements' representations, and then calling the pretty-printer
function for each node, one by one, in order.
@end defun

@defun ewoc-invalidate ewoc &rest nodes
This is similar to @code{ewoc-refresh}, except that only @var{nodes} in
@var{ewoc} are updated instead of the entire set.
@end defun

@defun ewoc-delete ewoc &rest nodes
This deletes each node in @var{nodes} from @var{ewoc}.
@end defun

@defun ewoc-filter ewoc predicate &rest args
This calls @var{predicate} for each data element in @var{ewoc} and
deletes those nodes for which @var{predicate} returns @code{nil}.
Any @var{args} are passed to @var{predicate}.
@end defun

@defun ewoc-collect ewoc predicate &rest args
This calls @var{predicate} for each data element in @var{ewoc}
and returns a list of those elements for which @var{predicate}
returns non-@code{nil}.  The elements in the list are ordered
as in the buffer.  Any @var{args} are passed to @var{predicate}.
@end defun

@defun ewoc-map map-function ewoc &rest args
This calls @var{map-function} for each data element in @var{ewoc} and
updates those nodes for which @var{map-function} returns non-@code{nil}.
Any @var{args} are passed to @var{map-function}.
@end defun

@node Abstract Display Example
@subsection Abstract Display Example

  Here is a simple example using functions of the ewoc package to
implement a @dfn{color components} display, an area in a buffer that
represents a vector of three integers (itself representing a 24-bit RGB
value) in various ways.

@example
(setq colorcomp-ewoc nil
      colorcomp-data nil
      colorcomp-mode-map nil
      colorcomp-labels ["Red" "Green" "Blue"])

(defun colorcomp-pp (data)
  (if data
      (let ((comp (aref colorcomp-data data)))
        (insert (aref colorcomp-labels data) "\t: #x"
                (format "%02X" comp) " "
                (make-string (ash comp -2) ?#) "\n"))
    (let ((cstr (format "#%02X%02X%02X"
                        (aref colorcomp-data 0)
                        (aref colorcomp-data 1)
                        (aref colorcomp-data 2)))
          (samp " (sample text) "))
      (insert "Color\t: "
              (propertize samp 'face
                          `(foreground-color . ,cstr))
              (propertize samp 'face
                          `(background-color . ,cstr))
              "\n"))))

(defun colorcomp (color)
  "Allow fiddling with COLOR in a new buffer.
The buffer is in Color Components mode."
  (interactive "sColor (name or #RGB or #RRGGBB): ")
  (when (string= "" color)
    (setq color "green"))
  (unless (color-values color)
    (error "No such color: %S" color))
  (switch-to-buffer
   (generate-new-buffer (format "originally: %s" color)))
  (kill-all-local-variables)
  (setq major-mode 'colorcomp-mode
        mode-name "Color Components")
  (use-local-map colorcomp-mode-map)
  (erase-buffer)
  (buffer-disable-undo)
  (let ((data (apply 'vector (mapcar (lambda (n) (ash n -8))
                                     (color-values color))))
        (ewoc (ewoc-create 'colorcomp-pp
                           "\nColor Components\n\n"
                           (substitute-command-keys
                            "\n\\@{colorcomp-mode-map@}"))))
    (set (make-local-variable 'colorcomp-data) data)
    (set (make-local-variable 'colorcomp-ewoc) ewoc)
    (ewoc-enter-last ewoc 0)
    (ewoc-enter-last ewoc 1)
    (ewoc-enter-last ewoc 2)
    (ewoc-enter-last ewoc nil)))
@end example

@cindex controller part, model/view/controller
  This example can be extended to be a color selection widget (in
other words, the ``controller'' part of the ``model--view--controller''
design paradigm) by defining commands to modify @code{colorcomp-data}
and to finish the selection process, and a keymap to tie it all
together conveniently.

@smallexample
(defun colorcomp-mod (index limit delta)
  (let ((cur (aref colorcomp-data index)))
    (unless (= limit cur)
      (aset colorcomp-data index (+ cur delta)))
    (ewoc-invalidate
     colorcomp-ewoc
     (ewoc-nth colorcomp-ewoc index)
     (ewoc-nth colorcomp-ewoc -1))))

(defun colorcomp-R-more () (interactive) (colorcomp-mod 0 255 1))
(defun colorcomp-G-more () (interactive) (colorcomp-mod 1 255 1))
(defun colorcomp-B-more () (interactive) (colorcomp-mod 2 255 1))
(defun colorcomp-R-less () (interactive) (colorcomp-mod 0 0 -1))
(defun colorcomp-G-less () (interactive) (colorcomp-mod 1 0 -1))
(defun colorcomp-B-less () (interactive) (colorcomp-mod 2 0 -1))

(defun colorcomp-copy-as-kill-and-exit ()
  "Copy the color components into the kill ring and kill the buffer.
The string is formatted #RRGGBB (hash followed by six hex digits)."
  (interactive)
  (kill-new (format "#%02X%02X%02X"
                    (aref colorcomp-data 0)
                    (aref colorcomp-data 1)
                    (aref colorcomp-data 2)))
  (kill-buffer nil))

(setq colorcomp-mode-map
      (let ((m (make-sparse-keymap)))
        (suppress-keymap m)
        (define-key m "i" 'colorcomp-R-less)
        (define-key m "o" 'colorcomp-R-more)
        (define-key m "k" 'colorcomp-G-less)
        (define-key m "l" 'colorcomp-G-more)
        (define-key m "," 'colorcomp-B-less)
        (define-key m "." 'colorcomp-B-more)
        (define-key m " " 'colorcomp-copy-as-kill-and-exit)
        m))
@end smallexample

Note that we never modify the data in each node, which is fixed when the
ewoc is created to be either @code{nil} or an index into the vector
@code{colorcomp-data}, the actual color components.

@node Blinking
@section Blinking Parentheses
@cindex parenthesis matching
@cindex blinking parentheses
@cindex balancing parentheses

  This section describes the mechanism by which Emacs shows a matching
open parenthesis when the user inserts a close parenthesis.

@defvar blink-paren-function
The value of this variable should be a function (of no arguments) to
be called whenever a character with close parenthesis syntax is inserted.
The value of @code{blink-paren-function} may be @code{nil}, in which
case nothing is done.
@end defvar

@defopt blink-matching-paren
If this variable is @code{nil}, then @code{blink-matching-open} does
nothing.
@end defopt

@defopt blink-matching-paren-distance
This variable specifies the maximum distance to scan for a matching
parenthesis before giving up.
@end defopt

@defopt blink-matching-delay
This variable specifies the number of seconds to keep indicating the
matching parenthesis.  A fraction of a second often gives good
results, but the default is 1, which works on all systems.
@end defopt

@deffn Command blink-matching-open
This function is the default value of @code{blink-paren-function}.  It
assumes that point follows a character with close parenthesis syntax
and applies the appropriate effect momentarily to the matching opening
character.  If that character is not already on the screen, it
displays the character's context in the echo area.  To avoid long
delays, this function does not search farther than
@code{blink-matching-paren-distance} characters.

Here is an example of calling this function explicitly.

@smallexample
@group
(defun interactive-blink-matching-open ()
  "Indicate momentarily the start of parenthesized sexp before point."
  (interactive)
@end group
@group
  (let ((blink-matching-paren-distance
         (buffer-size))
        (blink-matching-paren t))
    (blink-matching-open)))
@end group
@end smallexample
@end deffn

@node Character Display
@section Character Display

  This section describes how characters are actually displayed by
Emacs.  Typically, a character is displayed as a @dfn{glyph} (a
graphical symbol which occupies one character position on the screen),
whose appearance corresponds to the character itself.  For example,
the character @samp{a} (character code 97) is displayed as @samp{a}.
Some characters, however, are displayed specially.  For example, the
formfeed character (character code 12) is usually displayed as a
sequence of two glyphs, @samp{^L}, while the newline character
(character code 10) starts a new screen line.

  You can modify how each character is displayed by defining a
@dfn{display table}, which maps each character code into a sequence of
glyphs.  @xref{Display Tables}.

@menu
* Usual Display::       The usual conventions for displaying characters.
* Display Tables::      What a display table consists of.
* Active Display Table::  How Emacs selects a display table to use.
* Glyphs::              How to define a glyph, and what glyphs mean.
* Glyphless Chars::     How glyphless characters are drawn.
@end menu

@node Usual Display
@subsection Usual Display Conventions

  Here are the conventions for displaying each character code (in the
absence of a display table, which can override these
@iftex
conventions).
@end iftex
@ifnottex
conventions; @pxref{Display Tables}).
@end ifnottex

@cindex printable ASCII characters
@itemize @bullet
@item
The @dfn{printable @acronym{ASCII} characters}, character codes 32
through 126 (consisting of numerals, English letters, and symbols like
@samp{#}) are displayed literally.

@item
The tab character (character code 9) displays as whitespace stretching
up to the next tab stop column.  @xref{Text Display,,, emacs, The GNU
Emacs Manual}.  The variable @code{tab-width} controls the number of
spaces per tab stop (see below).

@item
The newline character (character code 10) has a special effect: it
ends the preceding line and starts a new line.

@cindex ASCII control characters
@item
The non-printable @dfn{@acronym{ASCII} control characters}---character
codes 0 through 31, as well as the @key{DEL} character (character code
127)---display in one of two ways according to the variable
@code{ctl-arrow}.  If this variable is non-@code{nil} (the default),
these characters are displayed as sequences of two glyphs, where the
first glyph is @samp{^} (a display table can specify a glyph to use
instead of @samp{^}); e.g., the @key{DEL} character is displayed as
@samp{^?}.

If @code{ctl-arrow} is @code{nil}, these characters are displayed as
octal escapes (see below).

This rule also applies to carriage return (character code 13), if that
character appears in the buffer.  But carriage returns usually do not
appear in buffer text; they are eliminated as part of end-of-line
conversion (@pxref{Coding System Basics}).

@cindex octal escapes
@item
@dfn{Raw bytes} are non-@acronym{ASCII} characters with codes 128
through 255 (@pxref{Text Representations}).  These characters display
as @dfn{octal escapes}: sequences of four glyphs, where the first
glyph is the @acronym{ASCII} code for @samp{\}, and the others are
digit characters representing the character code in octal.  (A display
table can specify a glyph to use instead of @samp{\}.)

@item
Each non-@acronym{ASCII} character with code above 255 is displayed
literally, if the terminal supports it.  If the terminal does not
support it, the character is said to be @dfn{glyphless}, and it is
usually displayed using a placeholder glyph.  For example, if a
graphical terminal has no font for a character, Emacs usually displays
a box containing the character code in hexadecimal.  @xref{Glyphless
Chars}.
@end itemize

  The above display conventions apply even when there is a display
table, for any character whose entry in the active display table is
@code{nil}.  Thus, when you set up a display table, you need only
specify the characters for which you want special behavior.

  The following variables affect how certain characters are displayed
on the screen.  Since they change the number of columns the characters
occupy, they also affect the indentation functions.  They also affect
how the mode line is displayed; if you want to force redisplay of the
mode line using the new values, call the function
@code{force-mode-line-update} (@pxref{Mode Line Format}).

@defopt ctl-arrow
@cindex control characters in display
This buffer-local variable controls how control characters are
displayed.  If it is non-@code{nil}, they are displayed as a caret
followed by the character: @samp{^A}.  If it is @code{nil}, they are
displayed as octal escapes: a backslash followed by three octal
digits, as in @samp{\001}.
@end defopt

@defopt tab-width
The value of this buffer-local variable is the spacing between tab
stops used for displaying tab characters in Emacs buffers.  The value
is in units of columns, and the default is 8.  Note that this feature
is completely independent of the user-settable tab stops used by the
command @code{tab-to-tab-stop}.  @xref{Indent Tabs}.
@end defopt

@node Display Tables
@subsection Display Tables

@cindex display table
  A display table is a special-purpose char-table
(@pxref{Char-Tables}), with @code{display-table} as its subtype, which
is used to override the usual character display conventions.  This
section describes how to make, inspect, and assign elements to a
display table object.

@defun make-display-table
This creates and returns a display table.  The table initially has
@code{nil} in all elements.
@end defun

  The ordinary elements of the display table are indexed by character
codes; the element at index @var{c} says how to display the character
code @var{c}.  The value should be @code{nil} (which means to display
the character @var{c} according to the usual display conventions;
@pxref{Usual Display}), or a vector of glyph codes (which means to
display the character @var{c} as those glyphs; @pxref{Glyphs}).

  @strong{Warning:} if you use the display table to change the display
of newline characters, the whole buffer will be displayed as one long
line.

  The display table also has six @dfn{extra slots} which serve special
purposes.  Here is a table of their meanings; @code{nil} in any slot
means to use the default for that slot, as stated below.

@table @asis
@item 0
The glyph for the end of a truncated screen line (the default for this
is @samp{$}).  @xref{Glyphs}.  On graphical terminals, Emacs uses
arrows in the fringes to indicate truncation, so the display table has
no effect.

@item 1
The glyph for the end of a continued line (the default is @samp{\}).
On graphical terminals, Emacs uses curved arrows in the fringes to
indicate continuation, so the display table has no effect.

@item 2
The glyph for indicating a character displayed as an octal character
code (the default is @samp{\}).

@item 3
The glyph for indicating a control character (the default is @samp{^}).

@item 4
A vector of glyphs for indicating the presence of invisible lines (the
default is @samp{...}).  @xref{Selective Display}.

@item 5
The glyph used to draw the border between side-by-side windows (the
default is @samp{|}).  @xref{Splitting Windows}.  This takes effect only
when there are no scroll bars; if scroll bars are supported and in use,
a scroll bar separates the two windows.
@end table

  For example, here is how to construct a display table that mimics
the effect of setting @code{ctl-arrow} to a non-@code{nil} value
(@pxref{Glyphs}, for the function @code{make-glyph-code}):

@example
(setq disptab (make-display-table))
(dotimes (i 32)
  (or (= i ?\t)
      (= i ?\n)
      (aset disptab i
            (vector (make-glyph-code ?^ 'escape-glyph)
                    (make-glyph-code (+ i 64) 'escape-glyph)))))
(aset disptab 127
      (vector (make-glyph-code ?^ 'escape-glyph)
              (make-glyph-code ?? 'escape-glyph)))))
@end example

@defun display-table-slot display-table slot
This function returns the value of the extra slot @var{slot} of
@var{display-table}.  The argument @var{slot} may be a number from 0 to
5 inclusive, or a slot name (symbol).  Valid symbols are
@code{truncation}, @code{wrap}, @code{escape}, @code{control},
@code{selective-display}, and @code{vertical-border}.
@end defun

@defun set-display-table-slot display-table slot value
This function stores @var{value} in the extra slot @var{slot} of
@var{display-table}.  The argument @var{slot} may be a number from 0 to
5 inclusive, or a slot name (symbol).  Valid symbols are
@code{truncation}, @code{wrap}, @code{escape}, @code{control},
@code{selective-display}, and @code{vertical-border}.
@end defun

@defun describe-display-table display-table
This function displays a description of the display table
@var{display-table} in a help buffer.
@end defun

@deffn Command describe-current-display-table
This command displays a description of the current display table in a
help buffer.
@end deffn

@node Active Display Table
@subsection Active Display Table
@cindex active display table

  Each window can specify a display table, and so can each buffer.
The window's display table, if there is one, takes precedence over the
buffer's display table.  If neither exists, Emacs tries to use the
standard display table; if that is @code{nil}, Emacs uses the usual
character display conventions (@pxref{Usual Display}).

  Note that display tables affect how the mode line is displayed, so
if you want to force redisplay of the mode line using a new display
table, call @code{force-mode-line-update} (@pxref{Mode Line Format}).

@defun window-display-table &optional window
This function returns @var{window}'s display table, or @code{nil} if
there is none.  The default for @var{window} is the selected window.
@end defun

@defun set-window-display-table window table
This function sets the display table of @var{window} to @var{table}.
The argument @var{table} should be either a display table or
@code{nil}.
@end defun

@defvar buffer-display-table
This variable is automatically buffer-local in all buffers; its value
specifies the buffer's display table.  If it is @code{nil}, there is
no buffer display table.
@end defvar

@defvar standard-display-table
The value of this variable is the standard display table, which is
used when Emacs is displaying a buffer in a window with neither a
window display table nor a buffer display table defined, or when Emacs
is outputting text to the standard output or error streams.  Although its
default is typically @code{nil}, in an interactive session if the
terminal cannot display curved quotes, its default maps curved quotes
to ASCII approximations.  @xref{Keys in Documentation}.
@end defvar

The @file{disp-table} library defines several functions for changing
the standard display table.

@node Glyphs
@subsection Glyphs
@cindex glyph

@cindex glyph code
  A @dfn{glyph} is a graphical symbol which occupies a single
character position on the screen.  Each glyph is represented in Lisp
as a @dfn{glyph code}, which specifies a character and optionally a
face to display it in (@pxref{Faces}).  The main use of glyph codes is
as the entries of display tables (@pxref{Display Tables}).  The
following functions are used to manipulate glyph codes:

@defun make-glyph-code char &optional face
This function returns a glyph code representing char @var{char} with
face @var{face}.  If @var{face} is omitted or @code{nil}, the glyph
uses the default face; in that case, the glyph code is an integer.  If
@var{face} is non-@code{nil}, the glyph code is not necessarily an
integer object.
@end defun

@defun glyph-char glyph
This function returns the character of glyph code @var{glyph}.
@end defun

@defun glyph-face glyph
This function returns face of glyph code @var{glyph}, or @code{nil} if
@var{glyph} uses the default face.
@end defun

@ifnottex
  You can set up a @dfn{glyph table} to change how glyph codes are
actually displayed on text terminals.  This feature is semi-obsolete;
use @code{glyphless-char-display} instead (@pxref{Glyphless Chars}).

@defvar glyph-table
The value of this variable, if non-@code{nil}, is the current glyph
table.  It takes effect only on character terminals; on graphical
displays, all glyphs are displayed literally.  The glyph table should
be a vector whose @var{g}th element specifies how to display glyph
code @var{g}, where @var{g} is the glyph code for a glyph whose face
is unspecified.  Each element should be one of the following:

@table @asis
@item @code{nil}
Display this glyph literally.

@item a string
Display this glyph by sending the specified string to the terminal.

@item a glyph code
Display the specified glyph code instead.
@end table

Any integer glyph code greater than or equal to the length of the
glyph table is displayed literally.
@end defvar
@end ifnottex

@node Glyphless Chars
@subsection Glyphless Character Display
@cindex glyphless characters

  @dfn{Glyphless characters} are characters which are displayed in a
special way, e.g., as a box containing a hexadecimal code, instead of
being displayed literally.  These include characters which are
explicitly defined to be glyphless, as well as characters for which
there is no available font (on a graphical display), and characters
which cannot be encoded by the terminal's coding system (on a text
terminal).

@defvar glyphless-char-display
The value of this variable is a char-table which defines glyphless
characters and how they are displayed.  Each entry must be one of the
following display methods:

@table @asis
@item @code{nil}
Display the character in the usual way.

@item @code{zero-width}
Don't display the character.

@item @code{thin-space}
Display a thin space, 1-pixel wide on graphical displays, or
1-character wide on text terminals.

@item @code{empty-box}
Display an empty box.

@item @code{hex-code}
Display a box containing the Unicode codepoint of the character, in
hexadecimal notation.

@item an @acronym{ASCII} string
Display a box containing that string.  The string should contain at
most 6 @acronym{ASCII} characters.

@item a cons cell @code{(@var{graphical} . @var{text})}
Display with @var{graphical} on graphical displays, and with
@var{text} on text terminals.  Both @var{graphical} and @var{text}
must be one of the display methods described above.
@end table

@noindent
The @code{thin-space}, @code{empty-box}, @code{hex-code}, and
@acronym{ASCII} string display methods are drawn with the
@code{glyphless-char} face.  On text terminals, a box is emulated by
square brackets, @samp{[]}.

The char-table has one extra slot, which determines how to display any
character that cannot be displayed with any available font, or cannot
be encoded by the terminal's coding system.  Its value should be one
of the above display methods, except @code{zero-width} or a cons cell.

If a character has a non-@code{nil} entry in an active display table,
the display table takes effect; in this case, Emacs does not consult
@code{glyphless-char-display} at all.
@end defvar

@defopt glyphless-char-display-control
This user option provides a convenient way to set
@code{glyphless-char-display} for groups of similar characters.  Do
not set its value directly from Lisp code; the value takes effect only
via a custom @code{:set} function (@pxref{Variable Definitions}),
which updates @code{glyphless-char-display}.

Its value should be an alist of elements @code{(@var{group}
. @var{method})}, where @var{group} is a symbol specifying a group of
characters, and @var{method} is a symbol specifying how to display
them.

@var{group} should be one of the following:

@table @code
@item c0-control
@acronym{ASCII} control characters @code{U+0000} to @code{U+001F},
excluding the newline and tab characters (normally displayed as escape
sequences like @samp{^A}; @pxref{Text Display,, How Text Is Displayed,
emacs, The GNU Emacs Manual}).

@item c1-control
Non-@acronym{ASCII}, non-printing characters @code{U+0080} to
@code{U+009F} (normally displayed as octal escape sequences like
@samp{\230}).

@item format-control
Characters of Unicode General Category [Cf], such as @samp{U+200E}
(Left-to-Right Mark), but excluding characters that have graphic
images, such as @samp{U+00AD} (Soft Hyphen).

@item no-font
Characters for there is no suitable font, or which cannot be encoded
by the terminal's coding system.
@end table

@c FIXME: this can also be 'acronym', but that's not currently
@c completely implemented; it applies only to the format-control
@c group, and only works if the acronym is in 'char-acronym-table'.
The @var{method} symbol should be one of @code{zero-width},
@code{thin-space}, @code{empty-box}, or @code{hex-code}.  These have
the same meanings as in @code{glyphless-char-display}, above.
@end defopt

@node Beeping
@section Beeping
@cindex bell

  This section describes how to make Emacs ring the bell (or blink the
screen) to attract the user's attention.  Be conservative about how
often you do this; frequent bells can become irritating.  Also be
careful not to use just beeping when signaling an error is more
appropriate (@pxref{Errors}).

@defun ding &optional do-not-terminate
@cindex keyboard macro termination
This function beeps, or flashes the screen (see @code{visible-bell} below).
It also terminates any keyboard macro currently executing unless
@var{do-not-terminate} is non-@code{nil}.
@end defun

@defun beep &optional do-not-terminate
This is a synonym for @code{ding}.
@end defun

@defopt visible-bell
This variable determines whether Emacs should flash the screen to
represent a bell.  Non-@code{nil} means yes, @code{nil} means no.
This is effective on graphical displays, and on text terminals
provided the terminal's Termcap entry defines the visible bell
capability (@samp{vb}).
@end defopt

@defopt ring-bell-function
If this is non-@code{nil}, it specifies how Emacs should ring the
bell.  Its value should be a function of no arguments.  If this is
non-@code{nil}, it takes precedence over the @code{visible-bell}
variable.
@end defopt

@node Window Systems
@section Window Systems

  Emacs works with several window systems, most notably the X Window
System.  Both Emacs and X use the term ``window'', but use it
differently.  An Emacs frame is a single window as far as X is
concerned; the individual Emacs windows are not known to X at all.

@defvar window-system
This terminal-local variable tells Lisp programs what window system
Emacs is using for displaying the frame.  The possible values are

@table @code
@item x
@cindex X Window System
Emacs is displaying the frame using X.
@item w32
Emacs is displaying the frame using native MS-Windows GUI.
@item ns
Emacs is displaying the frame using the Nextstep interface (used on
GNUstep and macOS).
@item pc
Emacs is displaying the frame using MS-DOS direct screen writes.
@item nil
Emacs is displaying the frame on a character-based terminal.
@end table
@end defvar

@defvar initial-window-system
This variable holds the value of @code{window-system} used for the
first frame created by Emacs during startup.  (When Emacs is invoked
with the @option{--daemon} option, it does not create any initial
frames, so @code{initial-window-system} is @code{nil}, except on
MS-Windows, where it is still @code{w32}.  @xref{Initial Options,
daemon,, emacs, The GNU Emacs Manual}.)
@end defvar

@defun window-system &optional frame
This function returns a symbol whose name tells what window system is
used for displaying @var{frame} (which defaults to the currently
selected frame).  The list of possible symbols it returns is the same
one documented for the variable @code{window-system} above.
@end defun

  Do @emph{not} use @code{window-system} and
@code{initial-window-system} as predicates or boolean flag variables,
if you want to write code that works differently on text terminals and
graphic displays.  That is because @code{window-system} is not a good
indicator of Emacs capabilities on a given display type.  Instead, use
@code{display-graphic-p} or any of the other @code{display-*-p}
predicates described in @ref{Display Feature Testing}.

@node Tooltips
@section Tooltips
@cindex tooltips
@dfn{Tooltips} are special frames (@pxref{Frames}) that are used to
display helpful hints (a.k.a.@: ``tips'') related to the current
position of the mouse pointer.  Emacs uses tooltips to display help
strings about active portions of text (@pxref{Special Properties}) and
about various UI elements, such as menu items (@pxref{Extended Menu
Items}) and tool-bar buttons (@pxref{Tool Bar}).

@defun tooltip-mode
Tooltip Mode is a minor mode that enables display of tooltips.
Turning off this mode causes the tooltips be displayed in the echo
area.  On text-mode (a.k.a.@: ``TTY'') frames, tooltips are always
displayed in the echo area.
@end defun

@vindex x-gtk-use-system-tooltips
When Emacs is built with GTK+ support, it by default displays tooltips
using GTK+ functions, and the appearance of the tooltips is then
controlled by GTK+ settings.  GTK+ tooltips can be disabled by
changing the value of the variable @code{x-gtk-use-system-tooltips} to
@code{nil}.  The rest of this subsection describes how to control
non-GTK+ tooltips, which are presented by Emacs itself.

Since tooltips are special frames, they have their frame parameters
(@pxref{Frame Parameters}).  Unlike other frames, the frame parameters
for tooltips are stored in a special variable.

@defvar tooltip-frame-parameters
This customizable option holds the frame parameters used for
displaying tooltips.  Any font and color parameters are ignored, and
the corresponding attributes of the @code{tooltip} face are used
instead.  If @code{left} or @code{top} parameters are included, they
are used as absolute frame-relative coordinates where the tooltip
should be shown.  (Mouse-relative position of the tooltip can be
customized using the variables described in @ref{Tooltips,,, emacs,
The GNU Emacs Manual}.)  Note that the @code{left} and @code{top}
parameters, if present, override the values of mouse-relative offsets.
@end defvar

@vindex tooltip@r{ face}
The @code{tooltip} face determines the appearance of text shown in
tooltips.  It should generally use a variable-pitch font of size that
is preferably smaller than the default frame font.

@findex tooltip-help-tips
@defvar tooltip-functions
This abnormal hook is a list of functions to call when Emacs needs to
display a tooltip.  Each function is called with a single argument
@var{event} which is a copy of the last mouse movement event.  If a
function on this list actually displays the tooltip, it should return
non-@code{nil}, and then the rest of the functions will not be
called.  The default value of this variable is a single function
@code{tooltip-help-tips}.
@end defvar

If you write your own function to be put on the
@code{tooltip-functions} list, you may need to know the buffer of the
mouse event that triggered the tooltip display.  The following
function provides that information.

@defun tooltip-event-buffer event
This function returns the buffer over which @var{event} occurred.
Call it with the argument of the function from
@code{tooltip-functions} to obtain the buffer whose text triggered the
tooltip.  Note that the event might occur not over a buffer (e.g.,
over the tool bar), in which case this function will return
@code{nil}.
@end defun

Other aspects of tooltip display are controlled by several
customizable settings; see @ref{Tooltips,,, emacs, The GNU Emacs
Manual}.

@node Bidirectional Display
@section Bidirectional Display
@cindex bidirectional display
@cindex right-to-left text

  Emacs can display text written in scripts, such as Arabic, Farsi,
and Hebrew, whose natural ordering for horizontal text display runs
from right to left.  Furthermore, segments of Latin script and digits
embedded in right-to-left text are displayed left-to-right, while
segments of right-to-left script embedded in left-to-right text
(e.g., Arabic or Hebrew text in comments or strings in a program
source file) are appropriately displayed right-to-left.  We call such
mixtures of left-to-right and right-to-left text @dfn{bidirectional
text}.  This section describes the facilities and options for editing
and displaying bidirectional text.

@cindex logical order
@cindex reading order
@cindex visual order
@cindex unicode bidirectional algorithm
@cindex UBA
@cindex bidirectional reordering
@cindex reordering, of bidirectional text
  Text is stored in Emacs buffers and strings in @dfn{logical} (or
@dfn{reading}) order, i.e., the order in which a human would read
each character.  In right-to-left and bidirectional text, the order in
which characters are displayed on the screen (called @dfn{visual
order}) is not the same as logical order; the characters' screen
positions do not increase monotonically with string or buffer
position.  In performing this @dfn{bidirectional reordering}, Emacs
follows the Unicode Bidirectional Algorithm (a.k.a.@: @acronym{UBA}),
which is described in Annex #9 of the Unicode standard
(@url{http://www.unicode.org/reports/tr9/}).  Emacs provides a ``Full
Bidirectionality'' class implementation of the @acronym{UBA},
consistent with the requirements of the Unicode Standard v8.0.

@defvar bidi-display-reordering
If the value of this buffer-local variable is non-@code{nil} (the
default), Emacs performs bidirectional reordering for display.  The
reordering affects buffer text, as well as display strings and overlay
strings from text and overlay properties in the buffer (@pxref{Overlay
Properties}, and @pxref{Display Property}).  If the value is
@code{nil}, Emacs does not perform bidirectional reordering in the
buffer.

The default value of @code{bidi-display-reordering} controls the
reordering of strings which are not directly supplied by a buffer,
including the text displayed in mode lines (@pxref{Mode Line Format})
and header lines (@pxref{Header Lines}).
@end defvar

@cindex unibyte buffers, and bidi reordering
  Emacs never reorders the text of a unibyte buffer, even if
@code{bidi-display-reordering} is non-@code{nil} in the buffer.  This
is because unibyte buffers contain raw bytes, not characters, and thus
lack the directionality properties required for reordering.
Therefore, to test whether text in a buffer will be reordered for
display, it is not enough to test the value of
@code{bidi-display-reordering} alone.  The correct test is this:

@example
 (if (and enable-multibyte-characters
          bidi-display-reordering)
     ;; Buffer is being reordered for display
   )
@end example

  However, unibyte display and overlay strings @emph{are} reordered if
their parent buffer is reordered.  This is because plain-@sc{ascii}
strings are stored by Emacs as unibyte strings.  If a unibyte display
or overlay string includes non-@sc{ascii} characters, these characters
are assumed to have left-to-right direction.

@cindex display properties, and bidi reordering of text
  Text covered by @code{display} text properties, by overlays with
@code{display} properties whose value is a string, and by any other
properties that replace buffer text, is treated as a single unit when
it is reordered for display.  That is, the entire chunk of text
covered by these properties is reordered together.  Moreover, the
bidirectional properties of the characters in such a chunk of text are
ignored, and Emacs reorders them as if they were replaced with a
single character @code{U+FFFC}, known as the @dfn{Object Replacement
Character}.  This means that placing a display property over a portion
of text may change the way that the surrounding text is reordered for
display.  To prevent this unexpected effect, always place such
properties on text whose directionality is identical with text that
surrounds it.

@cindex base direction of a paragraph
  Each paragraph of bidirectional text has a @dfn{base direction},
either right-to-left or left-to-right.  Left-to-right paragraphs are
displayed beginning at the left margin of the window, and are
truncated or continued when the text reaches the right margin.
Right-to-left paragraphs are displayed beginning at the right margin,
and are continued or truncated at the left margin.

  By default, Emacs determines the base direction of each paragraph by
looking at the text at its beginning.  The precise method of
determining the base direction is specified by the @acronym{UBA}; in a
nutshell, the first character in a paragraph that has an explicit
directionality determines the base direction of the paragraph.
However, sometimes a buffer may need to force a certain base direction
for its paragraphs.  For example, buffers containing program source
code should force all paragraphs to be displayed left-to-right.  You
can use following variable to do this:

@defvar bidi-paragraph-direction
If the value of this buffer-local variable is the symbol
@code{right-to-left} or @code{left-to-right}, all paragraphs in the
buffer are assumed to have that specified direction.  Any other value
is equivalent to @code{nil} (the default), which means to determine
the base direction of each paragraph from its contents.

@cindex @code{prog-mode}, and @code{bidi-paragraph-direction}
Modes for program source code should set this to @code{left-to-right}.
Prog mode does this by default, so modes derived from Prog mode do not
need to set this explicitly (@pxref{Basic Major Modes}).
@end defvar

@defun current-bidi-paragraph-direction &optional buffer
This function returns the paragraph direction at point in the named
@var{buffer}.  The returned value is a symbol, either
@code{left-to-right} or @code{right-to-left}.  If @var{buffer} is
omitted or @code{nil}, it defaults to the current buffer.  If the
buffer-local value of the variable @code{bidi-paragraph-direction} is
non-@code{nil}, the returned value will be identical to that value;
otherwise, the returned value reflects the paragraph direction
determined dynamically by Emacs.  For buffers whose value of
@code{bidi-display-reordering} is @code{nil} as well as unibyte
buffers, this function always returns @code{left-to-right}.
@end defun

@cindex visual-order cursor motion
  Sometimes there's a need to move point in strict visual order,
either to the left or to the right of its current screen position.
Emacs provides a primitive to do that.

@defun move-point-visually direction
This function moves point of the currently selected window to the
buffer position that appears immediately to the right or to the left
of point on the screen.  If @var{direction} is positive, point will
move one screen position to the right, otherwise it will move one
screen position to the left.  Note that, depending on the surrounding
bidirectional context, this could potentially move point many buffer
positions away.  If invoked at the end of a screen line, the function
moves point to the rightmost or leftmost screen position of the next
or previous screen line, as appropriate for the value of
@var{direction}.

The function returns the new buffer position as its value.
@end defun

@cindex layout on display, and bidirectional text
@cindex jumbled display of bidirectional text
@cindex concatenating bidirectional strings
  Bidirectional reordering can have surprising and unpleasant effects
when two strings with bidirectional content are juxtaposed in a
buffer, or otherwise programmatically concatenated into a string of
text.  A typical problematic case is when a buffer consists of
sequences of text fields separated by whitespace or punctuation
characters, like Buffer Menu mode or Rmail Summary Mode.  Because the
punctuation characters used as separators have @dfn{weak
directionality}, they take on the directionality of surrounding text.
As result, a numeric field that follows a field with bidirectional
content can be displayed @emph{to the left} of the preceding field,
messing up the expected layout.  There are several ways to avoid this
problem:

@itemize @minus
@item
Append the special character @code{U+200E}, LEFT-TO-RIGHT MARK, or
@acronym{LRM}, to the end of each field that may have bidirectional
content, or prepend it to the beginning of the following field.  The
function @code{bidi-string-mark-left-to-right}, described below, comes
in handy for this purpose.  (In a right-to-left paragraph, use
@code{U+200F}, RIGHT-TO-LEFT MARK, or @acronym{RLM}, instead.)  This
is one of the solutions recommended by the UBA.

@item
Include the tab character in the field separator.  The tab character
plays the role of @dfn{segment separator} in bidirectional reordering,
causing the text on either side to be reordered separately.

@cindex @code{space} display spec, and bidirectional text
@item
Separate fields with a @code{display} property or overlay with a
property value of the form @code{(space . PROPS)} (@pxref{Specified
Space}).  Emacs treats this display specification as a @dfn{paragraph
separator}, and reorders the text on either side separately.
@end itemize

@defun bidi-string-mark-left-to-right string
This function returns its argument @var{string}, possibly modified,
such that the result can be safely concatenated with another string,
or juxtaposed with another string in a buffer, without disrupting the
relative layout of this string and the next one on display.  If the
string returned by this function is displayed as part of a
left-to-right paragraph, it will always appear on display to the left
of the text that follows it.  The function works by examining the
characters of its argument, and if any of those characters could cause
reordering on display, the function appends the @acronym{LRM}
character to the string.  The appended @acronym{LRM} character is made
invisible by giving it an @code{invisible} text property of @code{t}
(@pxref{Invisible Text}).
@end defun

  The reordering algorithm uses the bidirectional properties of the
characters stored as their @code{bidi-class} property
(@pxref{Character Properties}).  Lisp programs can change these
properties by calling the @code{put-char-code-property} function.
However, doing this requires a thorough understanding of the
@acronym{UBA}, and is therefore not recommended.  Any changes to the
bidirectional properties of a character have global effect: they
affect all Emacs frames and windows.

  Similarly, the @code{mirroring} property is used to display the
appropriate mirrored character in the reordered text.  Lisp programs
can affect the mirrored display by changing this property.  Again, any
such changes affect all of Emacs display.

@cindex overriding bidirectional properties
@cindex directional overrides
@cindex LRO
@cindex RLO
  The bidirectional properties of characters can be overridden by
inserting into the text special directional control characters,
LEFT-TO-RIGHT OVERRIDE (@acronym{LRO}) and RIGHT-TO-LEFT OVERRIDE
(@acronym{RLO}).  Any characters between a @acronym{RLO} and the
following newline or POP DIRECTIONAL FORMATTING (@acronym{PDF})
control character, whichever comes first, will be displayed as if they
were strong right-to-left characters, i.e.@: they will be reversed on
display.  Similarly, any characters between @acronym{LRO} and
@acronym{PDF} or newline will display as if they were strong
left-to-right, and will @emph{not} be reversed even if they are strong
right-to-left characters.

@cindex phishing using directional overrides
@cindex malicious use of directional overrides
  These overrides are useful when you want to make some text
unaffected by the reordering algorithm, and instead directly control
the display order.  But they can also be used for malicious purposes,
known as @dfn{phishing}.  Specifically, a URL on a Web page or a link
in an email message can be manipulated to make its visual appearance
unrecognizable, or similar to some popular benign location, while the
real location, interpreted by a browser in the logical order, is very
different.

  Emacs provides a primitive that applications can use to detect
instances of text whose bidirectional properties were overridden so as
to make a left-to-right character display as if it were a
right-to-left character, or vise versa.

@defun bidi-find-overridden-directionality from to &optional object
This function looks at the text of the specified @var{object} between
positions @var{from} (inclusive) and @var{to} (exclusive), and returns
the first position where it finds a strong left-to-right character
whose directional properties were forced to display the character as
right-to-left, or for a strong right-to-left character that was forced
to display as left-to-right.  If it finds no such characters in the
specified region of text, it returns @code{nil}.

The optional argument @var{object} specifies which text to search, and
defaults to the current buffer.  If @var{object} is non-@code{nil}, it
can be some other buffer, or it can be a string or a window.  If it is
a string, the function searches that string.  If it is a window, the
function searches the buffer displayed in that window.  If a buffer
whose text you want to examine is displayed in some window, we
recommend to specify it by that window, rather than pass the buffer to
the function.  This is because telling the function about the window
allows it to correctly account for window-specific overlays, which
might change the result of the function if some text in the buffer is
covered by overlays.
@end defun

@cindex copying bidirectional text, preserve visual order
@cindex visual order, preserve when copying bidirectional text
  When text that includes mixed right-to-left and left-to-right
characters and bidirectional controls is copied into a different
location, it can change its visual appearance, and also can affect the
visual appearance of the surrounding text at destination.  This is
because reordering of bidirectional text specified by the
@acronym{UBA} has non-trivial context-dependent effects both on the
copied text and on the text at copy destination that will surround it.

  Sometimes, a Lisp program may need to preserve the exact visual
appearance of the copied text at destination, and of the text that
surrounds the copy.  Lisp programs can use the following function to
achieve that effect.

@defun buffer-substring-with-bidi-context start end &optional no-properties
This function works similar to @code{buffer-substring} (@pxref{Buffer
Contents}), but it prepends and appends to the copied text bidi
directional control characters necessary to preserve the visual
appearance of the text when it is inserted at another place.  Optional
argument @var{no-properties}, if non-@code{nil}, means remove the text
properties from the copy of the text.
@end defun
